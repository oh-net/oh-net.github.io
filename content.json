{"meta":{"title":"Technician","subtitle":"Yet another note","description":"$$ Welcome $$","author":"John Doe","url":"https://hero.triple.net.cn"},"pages":[{"title":"","date":"2018-12-13T07:53:47.216Z","updated":"2018-12-13T04:53:17.804Z","comments":true,"path":"google7cf3f7dec20269a7.html","permalink":"https://hero.triple.net.cn/google7cf3f7dec20269a7.html","excerpt":"","text":"google-site-verification: google7cf3f7dec20269a7.html"},{"title":"about","date":"2018-12-17T05:08:37.000Z","updated":"2018-12-17T05:09:38.553Z","comments":true,"path":"about/index.html","permalink":"https://hero.triple.net.cn/about/index.html","excerpt":"","text":"about me ITer in Shanghai,CN Email me with: sign@mail.de"},{"title":"categories","date":"2018-12-17T05:31:48.000Z","updated":"2018-12-17T05:31:48.596Z","comments":true,"path":"categories/index.html","permalink":"https://hero.triple.net.cn/categories/index.html","excerpt":"","text":""},{"title":"icode-tips","date":"2018-12-13T03:49:15.000Z","updated":"2018-12-13T03:51:16.466Z","comments":true,"path":"icode-tips/index.html","permalink":"https://hero.triple.net.cn/icode-tips/index.html","excerpt":"","text":"Proxy On Google Chrome, Linux:1google-chrome --proxy-server=socks5://127.0.0.1:1080 DB:123create database [DB-NAME] CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;GRANT ALL PRIVILEGES ON *.* TO zhangsan@&quot;%&quot; IDENTIFIED BY &quot;lisi11226t54&quot;; FLUSH PRIVILEGES; 执行上面两句话。自动创建用户 zhangs ,密码 lisi11226t54格式：grant 权限 on 数据库名.表名 to 用户@登录主机 identified by &quot;用户密码&quot;;@ 后面是访问 mysql 的客户端IP地址（或是 主机名） % 代表任意的客户端 i Network123456789101112131415# ==Nat==10.11.11.1 # gateway10.11.11.110~120 # DHCP# ==Local Only==192.168.22.1192.168.22.110~120# === Fixed IP/Port ===Dev: 8080test: 10086ss1: 1239 / 22 / 443mysql: 2304proxy-socks5: 3389(Auth) / 3306proxy-http: 1209 Bitnami 远程访问:1234# vim ~/apps/phpmyadmin/conf/httpd-app.conf# Modify to this:Allow from allRequire all granted SS Config Demo:1234567&#123; &quot;server&quot;: &quot;123.123.223.49&quot;, &quot;server_port&quot;: 1080, &quot;password&quot;: &quot;sefsfsdfsd&quot;, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;timeout&quot;: 600&#125; 不使用代理URL（FireFox）:1localhost,127.0.0.1,172.16.0.0/16,10.11.0.0/16,192.168.0.0/16,send.firefox.com, pan.baidu.com, .wx.qq.com, .jikexueyuan.com,.qq.com,.v2ex.com,.zhihu.com,.youdao.com,.meituan.com,.meituan.net,.mtyun.com,.mtyun.io,i.msla.top,hallo.msla.top,tech.msla.top,down.msla.top,.businessconnectchina.com, .alipay.com, .aliobjects.com, .alipayobjects.com, .businessconnectchina.com, .cobsun.com, .triple.net.cn, .processon.com, baiduupcs.com,.bcc-agi.com,dc.3.cn,.jd.com,.360buyimg.com,.jianguoyun.com,.ustclug.org,.csdnimg.cn,.v2ex.com,.oschina.net,.cnblogs.com,.gitee.com,.csdn.net,.douban.com,.qiniu.com,.bkt.clouddn.com,.qiniuup.com,.qiniudn.com,.edu.cn,.org.cn, adblock plus 过滤列表:1234567891011121314151617181920212223242526272829share.baidu.compm.baidu.comstatic.bshare.cn||oscimg.oschina.net/oscnet/btn-20180518.png||zi-han.net/theme/hplus/##layui-layer1zhihu.com##.HitQrcodecn.aliyun.com##.loading-pc-cellaliyun.com##.loading-pc-cellhaoweichi.com###Notice_showhaoweichi.com###Notice_windowblog.csdn.net##.csdn-toolbar.tb_disnone.csdn-toolbar-skin-blackblog.csdn.net##.pulllog-boxblog.csdn.net##.csdn-toolbar.tb_disnonezhihu.com##.AdblockBannerjd.com##.inter_linkjd.com###J_eventjd.com###J_fs_act_lkjd.com##.fs_act_lk.J_fsbtn51cto.com##.footer_maskfanyi.sogou.com##.bg-popup.opacitymy.oschina.net##.index_520_bgoschina.net##.index_520_bgblog.csdn.net##.edu-promotionblog.csdn.net##.p4course_targetjuejin.im##.extensionzi-han.net###layui-layer-shade1zi-han.net##.layui-layer-shade1zi-han.net###layui-layer1nbrecsys.4paradigm.com Install Oracle JDK on linux下载并安装 http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 12345wget -c http://happiz.qiniu.cdn.msla.top/jdk-8u171-linux-x64.tar.gzmv jdk-8u171-linux-x64.tar.gz /usr/lib/jvm/cd /usr/lib/jvm/tar xzf jdk-8u171-linux-x64.tar.gz ln -s jdk1.8.0_171/ java-8 这里注意， 按 G 到文件最后，然后按 o 进入 Insert 模式，把下面的配置粘贴进去， （Shift+Insert 或者 Ctrl+Shift + v）12345vi /etc/profileexport JAVA_HOME=/usr/lib/jvm/java-8 export JRE_HOME=$&#123;JAVA_HOME&#125;/jre export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 接下来，配置默认JDK版本123update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300update-alternatives --config java – EOF –"},{"title":"tags","date":"2018-12-17T05:24:03.000Z","updated":"2018-12-17T05:24:03.336Z","comments":true,"path":"tags/index.html","permalink":"https://hero.triple.net.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"如何快速在命令行中设置代理器","slug":"如何快速在命令行中设置代理器","date":"2018-12-22T15:17:40.000Z","updated":"2018-12-23T09:59:22.474Z","comments":true,"path":"2018/12/22/如何快速在命令行中设置代理器/","link":"","permalink":"https://hero.triple.net.cn/2018/12/22/如何快速在命令行中设置代理器/","excerpt":"我平时工作在 macOS 和 Linux 下。因为网络环境的问题，有些程序需要使用代理服务器才能顺利访问互联网。例如： pip、npm、brew 等等。好在这些命令都支持 ALL_PROXY、HTTPS_PROXY、HTTP_PROXY 这些变量。但是如果在 .bashrc 等文件中设置这些变量，又会导致全局无差别的使用代理服务器。所以，我写了一个叫做“proxied”的小脚本，放在了 “~/bin” 目录下，然后确保 “～/bin” 出现 PATH 变量中。","text":"我平时工作在 macOS 和 Linux 下。因为网络环境的问题，有些程序需要使用代理服务器才能顺利访问互联网。例如： pip、npm、brew 等等。好在这些命令都支持 ALL_PROXY、HTTPS_PROXY、HTTP_PROXY 这些变量。但是如果在 .bashrc 等文件中设置这些变量，又会导致全局无差别的使用代理服务器。所以，我写了一个叫做“proxied”的小脚本，放在了 “~/bin” 目录下，然后确保 “～/bin” 出现 PATH 变量中。 1234567#!/usr/bin/env shexport ALL_PROXY=socks5://&#123;socks5代理服务器地址:端口号&#125;export HTTP_PROXY=&#123;HTTP代理服务器地址:端口号&#125;export HTTPS_PROXY=&#123;HTTPS代理服务器地址:端口号&#125;exec $@ 之后，如果需要通过代理使用 pip， 只需要执行如下代码即可： 1$&gt; proxied pip install …","categories":[],"tags":[{"name":"代理","slug":"代理","permalink":"https://hero.triple.net.cn/tags/代理/"},{"name":"prosy","slug":"prosy","permalink":"https://hero.triple.net.cn/tags/prosy/"}]},{"title":"使用-systemd-analyze-命令优化-Linux-启动时间","slug":"使用-systemd-analyze-命令优化-Linux-启动时间","date":"2018-12-21T10:38:41.000Z","updated":"2018-12-21T10:46:44.822Z","comments":true,"path":"2018/12/21/使用-systemd-analyze-命令优化-Linux-启动时间/","link":"","permalink":"https://hero.triple.net.cn/2018/12/21/使用-systemd-analyze-命令优化-Linux-启动时间/","excerpt":"现在电脑的速度已经很快了，尤其是使用了 SSD 磁盘之后，甚至不太容易觉察到：电脑启动很慢！但还是有一些地方不得不关注，比如公司，不方便自己更换硬件、公司又不给升级，只能靠自己从软件方面入手了。Windows 下面可能会有很多也很专业的软件帮助，但是 Linux 就没那么多了，这篇文章就记录了如何通过 systemd-analyze 这个命令来查看并优化开机速度的方式。","text":"现在电脑的速度已经很快了，尤其是使用了 SSD 磁盘之后，甚至不太容易觉察到：电脑启动很慢！但还是有一些地方不得不关注，比如公司，不方便自己更换硬件、公司又不给升级，只能靠自己从软件方面入手了。Windows 下面可能会有很多也很专业的软件帮助，但是 Linux 就没那么多了，这篇文章就记录了如何通过 systemd-analyze 这个命令来查看并优化开机速度的方式。 Linux 启动时会加载很多可能用不到的服务，有些甚至非常耗时，比如网络、打印机、扫描仪。 可以使用 systemd-analyze 命令来查看，同时配合 systemctl 来禁用不需要的命令，或者稍后在有需要的时候再启动。 文章中使用的系统是 Debian 9 查看系统启动时间线1systemd-analyze critical-chain 看起来应该像这样：12345678910111213141516171819jack@deb:~$ systemd-analyze critical-chain The time after the unit is active or started is printed after the \"@\" character.The time the unit takes to start is printed after the \"+\" character.graphical.target @24.841s└─multi-user.target @24.841s └─exim4.service @23.575s +1.265s └─network-online.target @23.575s └─NetworkManager-wait-online.service @12.215s +11.359s └─NetworkManager.service @10.118s +2.092s └─dbus.service @7.739s └─basic.target @7.698s └─sockets.target @7.698s └─pcscd.socket @7.698s └─sysinit.target @7.555s └─sys-fs-fuse-connections.mount @10.472s +1ms └─systemd-modules-load.service @1.765s +591ms └─system.slice @1.735s └─-.slice @1.436s 禁用不需要的服务看起来网络等待耗时厉害，可以禁用它： 1systemctl disable NetworkManager-wait-online.service 启动之后再来查看：1systemctl status NetworkManager-wait-online.service 禁用的服务最好记录下来，以防系统出问题可以及时还原 1234567891011121314151617root@deb:~# systemctl disable mysql.servicemysql.service is not a native service, redirecting to systemd-sysv-install.Executing: /lib/systemd/systemd-sysv-install disable mysqlroot@deb:~# systemctl disable mysqlmysql.service is not a native service, redirecting to systemd-sysv-install.Executing: /lib/systemd/systemd-sysv-install disable mysqlroot@deb:~# systemctl disable php7.0-fpmSynchronizing state of php7.0-fpm.service with SysV service script with /lib/systemd/systemd-sysv-install.Executing: /lib/systemd/systemd-sysv-install disable php7.0-fpmroot@deb:~# systemctl disable nginxSynchronizing state of nginx.service with SysV service script with /lib/systemd/systemd-sysv-install.Executing: /lib/systemd/systemd-sysv-install disable nginxroot@deb:~# systemctl disable vboxdrvRemoved /etc/systemd/system/multi-user.target.wants/vboxdrv.service.root@deb:~# systemctl disable NetworkManager.serviceRemoved /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service.Removed /etc/systemd/system/multi-user.target.wants/NetworkManager.service.","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"}]},{"title":"国内外几家全站-CDN-对比.md","slug":"国内外几家全站-CDN-对比-md","date":"2018-12-21T04:19:18.000Z","updated":"2018-12-21T04:30:58.749Z","comments":true,"path":"2018/12/21/国内外几家全站-CDN-对比-md/","link":"","permalink":"https://hero.triple.net.cn/2018/12/21/国内外几家全站-CDN-对比-md/","excerpt":"配置全站 CDN 可以缓存 HTML 页面和加快页面首次加载所耗时间。本文重点讲述 WordPress 的全站缓存，国内外 CDN 混用的解决方案，以及让页面也在 CDN 上缓存的正确做法。本文主要介绍 CloudFront，同时也对 Cloudflare、又拍云、百度云加速、KeyCDN、Google Cloud CDN 这几家 CDN 进行对比。","text":"配置全站 CDN 可以缓存 HTML 页面和加快页面首次加载所耗时间。本文重点讲述 WordPress 的全站缓存，国内外 CDN 混用的解决方案，以及让页面也在 CDN 上缓存的正确做法。本文主要介绍 CloudFront，同时也对 Cloudflare、又拍云、百度云加速、KeyCDN、Google Cloud CDN 这几家 CDN 进行对比。 定义、解释与评分细则 国内速度：使用 IPIP.NET 上的 Ping 值估算。 国外速度：使用 CDNPerf 进行测试。如果没有数据则使用 IPIP.NET 上的 Ping 值进行估算。速度星级 - PING：小于等于 25ms 为满分，25~50ms 四分，50~100ms 三分，100~200ms 两分，200~300ms 一分，大于 300ms 零分。若 CDNPerf 上的数据则除 2。 可定制性：零分起步。支持按照路径多回源加两分，支持调转配置加一分，支持图像压缩加一分，支持自有语言编程加一分，支持任意一种主流语言的编程直接满分。除了列出’’’每月’’’的域名单价、请求价格（较少量的），这里还模拟几种用例的价格。 用例价格：一个月 100GB 流量（20GB 亚洲、20GB 北美、20GB 欧洲、20GB 大洋洲、20GB 中国） Microsoft CDN（Azure CDN）使用了 Anycast 技术。 国外速度：★★★★★，19 ms 北美速度：★★★★★，19 ms 亚洲速度：★★★★★，20 ms 欧洲速度：★★★★★，18 ms 国内速度：★★★★☆，49 ms 可定制性：☆☆☆☆☆ SSL 证书：免费一年期 DigiCert SSL 证书，自动续签。可免费使用自有证书。 证书兼容性：默认仅限支持 SNI 的浏览器。 接入方式：CNAME 根域名兼容性：可以直接填写 Anycast IP 实现根域名。 用例价格：’’’$11.00’’’ CloudFrontCloudFront 有 Amazon 自建的网络，单价较高但是 0 元起步，适合中小客户。本文将重点介绍 CloudFront 和 WordPress 配合实现动静分离，缓存 HTML 页面。之后将对比其他的一些 CDN。 国外速度：★★★★★，21 ms 北美速度：★★★★★，21 ms 亚洲速度：★★★★★，20 ms 欧洲速度：★★★★★，20 ms 国内速度：★★☆☆☆，196 ms 可定制性：★★★★★，可以根据不同的路径回源使用不同的服务器，甚至回源到不同的服务器，且没有规则数量上限。此外，配合 Lambda@Edge 甚至可以将原本需要源站响应的动态内容交给缓存服务器做，只需使用 Node.js。 缓存命中：★★★★☆，支持 Regional Edge Caches，先缓存到全球的 9 个节点，再向下分发，大大提升缓存命中率 动静分离：★★★★★，自动分离，一个服务下可以根据不同目录设置不同 Behaviors，甚至配置多个源站服务器，支持匹配 Cookie、GET、Header 规则缓存，支持禁用 POST 等提交方式 缓存刷新：★★★★☆，支持单个 URL 刷新以及规则匹配刷新。 接入方式：NS/CNAME 根域名兼容性：需要使用 Route 53 作为 DNS。 SSL 证书：免费多域名、通配符 SSL 证书，自动续签。可免费使用自有证书。 证书兼容性：默认仅限支持 SNI 的浏览器，可额外购买服务（$600/月）以兼容所有浏览器。 用例价格：’’’$10.76’’’ Cloudflare有自建的网络，最快的速度、最低廉的价格，主要提供网站安全防护，当然还附带了 CDN。其提供的 NS 服务也是（国外）业界第一的速度。 国外速度：★★★★★，20 ms 北美速度：★★★★★，20 ms 亚洲速度：★★★★★，20 ms 欧洲速度：★★★★★，20 ms 国内速度：★★☆☆☆，193 ms 可定制性：★★★★★，现已经支持 Cloudflare Worker（付费），可以使用 JavaScript 编程。免费使用需要使用 Page Rules 进行定制，定制的功能有限数量也有限。 缓存命中：★★★★★，如果开启了 Argo，那么就能够实现更高的缓存命中率，此外还能自动调配最优线路。Argo 需要每月额外的消费（$5/mo + $0.10/GB）。否则由于节点数量实在众多，于是在每一个地方都需要单独缓存，所以导致缓存命中率很低。 动静分离：★★★☆☆，自动分离，它遵守 Cache-Control 规则，也可以设置 Page Rules 修改默认缓存规则。但是，默认不缓存 HTML 页面、Page Rules 只有 3 个的限制、以及没有开放匹配 Cookie 规则的缓存。企业版则可以定制 Cookie 缓存。 缓存刷新：★★☆☆☆，仅支持刷新某个页面的 URL 和刷新全部内容，不支持规则刷新。 接入方式：NS（前往 https://cf.tlo.xyz 可以进行 CNANE/IP 接入） 根域名兼容性：NS 接入支持根域名，第三方 DNS 可以直接填写 Anycast IP 实现根域名。 SSL 证书：共享通配符 SSL 证书，自动续签。可付费升级自定义域的证书。企业版及以上才可使用自有证书。 证书兼容性：免费版仅限支持 SNI 的浏览器，专业版及以上支持所有浏览器。 用例价格：’’’免费’’’ UPYUN使用自己管理的机房，网络有些受限于中国的环境，单价业界最低。 国外速度：★★★☆☆，83 ms 北美速度：★★☆☆☆，126 ms 亚洲速度：★★★☆☆，55 ms 欧洲速度：★★★★☆，45 ms 国内速度：★★★★★，18 ms 可定制性：★★★☆☆，可以设置很多个缓存规则，并且有自定义 Rewrite，可以实现比 Rewrite 更丰富的功能，但是函数功能受限。 廉价指数：★★★★½，从免费起，Pay-as-you-go，价格也是一降再降，业界较低的标准 缓存命中：★★★★½，有源站资源迁移功能，首次访问后直接永久缓存。但是如果要删除文件，还需要用 API 手动删除，扣半分 动静分离：★★★★☆，自动分离，可以配置不同目录的缓存规则，但是不支持Cookie 规则缓存 缓存刷新：★★★★☆，支持单个 URL 刷新以及规则匹配刷新 接入方式：CNAME 根域名兼容性：不能兼容根域名 SSL 证书：单域名 Let’s Encrypt 证书，自动续签。可免费使用自有证书。 证书兼容性：仅限支持 SNI 的浏览器 用例价格：’’’¥57’’’ Google Cloud CDN有全球最密集的网络集群，最快的速度、较低的单价，主要提供负载均衡，SSL 卸载，当然还附带了 CDN。由于缓存命中率低，需要超大型访问量的网站才有效。正是因为这一点，Google 自己只是将用户量极大的搜索服务用上了这个 CDN 系统，其余的很多 CDN 用的是 Cloudflare 和 Fastly 的。Google 的网络和 Cloudflare 和 Fastly 的网络有内网链接 国外速度：★★★★★，21 ms 北美速度：★★★★★，18 ms 亚洲速度：★★★★☆，34 ms 欧洲速度：★★★★★，17 ms 国内速度：★★★☆☆，86 ms 可定制性：★★☆☆☆，可以根据不同路径配置不同的服务器，然后，好像也没什么别的可定制的了。 廉价指数：★★☆☆☆，由于占用了 IP 资源，每月需要花费 18 美元的固定价格，并还需要再为流量付费。流量的单价较低。 缓存命中：★½☆☆☆，节点太多，小流量网站都很难遇到命中的情况。但可以利用跨区域负载均衡提高缓存命中率。 动静分离：★★☆☆☆，自动分离，但不能配置任何规则。 缓存刷新：★★★★☆，支持单个 URL 刷新以及规则匹配刷新 接入方式：IP 绑定，它直接给你分配一个独立的 Anycast IP，只需要 A 记录解析即可。 证书兼容性：’’’所有’’’浏览器 不包含免费 SSL，需要自己购买证书。免费安装 SSL。 用例价格：’’’$34.65’’’ KeyCDN他们是租用别人的独立服务器，提供一体化 CDN 服务，单价业界最低。 国外速度：★★★★★，26 ms 北美速度：★★★★★，23 ms 亚洲速度：★★★★☆，50 ms 欧洲速度：★★★★★，20 ms 国内速度：★★☆☆☆，137 ms’’’（高丢包）’’’ 可定制性：☆☆☆☆☆ 缓存命中：★★★★☆，有类似 CloudFront Regional Edge Caches 的功能 动静分离：★★☆☆☆，自动分离，但不能配置规则。支持针对 Cookie 的缓存配置，但不能匹配 Cookie 内容 缓存刷新：★★★★☆，支持单个 URL 刷新、全部刷新、Cache-Tag 刷新 接入方式：CNAME，所以不能根域名使用 证书兼容性：仅限支持 SNI 的浏览器 用例价格：’’’$9.60’’’ 推荐工具 [https://www.cdnperf.com CDNPerf]：检查 CDN 速度","categories":[{"name":"互联网","slug":"互联网","permalink":"https://hero.triple.net.cn/categories/互联网/"}],"tags":[{"name":"cdn","slug":"cdn","permalink":"https://hero.triple.net.cn/tags/cdn/"}]},{"title":"ubuntu16.04安装shadowsocks-qt5并支持chacha20-ietf-poly1305协议","slug":"ubuntu16-04安装shadowsocks-qt5并支持chacha20-ietf-poly1305协议","date":"2018-12-20T06:43:40.000Z","updated":"2018-12-20T06:51:32.549Z","comments":true,"path":"2018/12/20/ubuntu16-04安装shadowsocks-qt5并支持chacha20-ietf-poly1305协议/","link":"","permalink":"https://hero.triple.net.cn/2018/12/20/ubuntu16-04安装shadowsocks-qt5并支持chacha20-ietf-poly1305协议/","excerpt":"背景： 在 ubuntu 16.04 的机器上需要使用 shadowsocks-qt5，但是购买的服务器用的是 chacha20-ietf-poly1305 协议，采用 apt-get 安装的 shadowsocks-qt5 都是没有该协议的。","text":"背景： 在 ubuntu 16.04 的机器上需要使用 shadowsocks-qt5，但是购买的服务器用的是 chacha20-ietf-poly1305 协议，采用 apt-get 安装的 shadowsocks-qt5 都是没有该协议的。 解决方法： 采用源码安装 步骤：1.下载 shadowsocks-qt5 源码并安装相关依赖下载源码： 1git clone https://github.com/shadowsocks/shadowsocks-qt5 编译指南： https://github.com/shadowsocks/shadowsocks-qt5/wiki/Compiling 这贴一下编译指南： Make sure you’ve installed all dependent development packages (with -dev or -devel). cmake &gt;= 3.1.0 qt5-qtbase-gui &gt;= 5.2 (qtbase5 in Debian/Ubuntu) qrencode (libqrencode in Debian/Ubuntu) libQtShadowsocks &gt;= 1.10.0 (libqtshadowsocks in Debian/Ubuntu. DON’T use the trunk code) zbar (libzbar0 in Debian/Ubuntu) libappindicator (libappindicator1 in Debian/Ubuntu) Check libQtShadowsocks Compiling wiki if you need to build it yourself. 也就是说在编译前需要安装上面对应的库与工具 我们按照说明进行安装： 1sudo apt-get install cmake qtbase5-dev libqrencode-dev libzbar0 libappindicator1 libzbar-dev 这时候你会发现其中 libqtshadowsocks 库没有，因为这个也需要我们手动编译并安装 2.下载 libqtshadowsocks 源码下载源码： 1git clone https://github.com/shadowsocks/libQtShadowsocks 编译指南： https://github.com/shadowsocks/libQtShadowsocks/wiki/Compiling 继续贴编译指南： Qt &gt;= 5.5 Botan-2 &gt;= 2.3.0 Or Botan-1.10 (Not recommended) CMake &gt;= 3.1 A C++ Compiler that supports C++14 features (i.e. GCC &gt;= 4.9) 编译方法： 1234mkdir build &amp;&amp; cd buildcmake .. -DUSE_BOTAN2=ONmake -j4sudo make install 注意这里一定要加 -DUSE_BOTAN2=ON不然编译出来没有 chacha20-ietf-poly1305但是这时候你又会发现系统里面并没有 Botan-2，那怎么办呢？答案当然是—–自己编译（手动滑稽 3.下载 Botan2.3.0 源码并编译1234567wget https://botan.randombit.net/releases/Botan-2.3.0.tgztar xvf Botan-2.3.0.tgzcd Botan-2.3.0./configure.pymake -j4sudo make installsudo ldconfig 当完成 Botan2.3.0 的编译与安装后执行步骤 2中的 libqtshadowsocks 的编译 4. 编译shadowsocks-qt51234mkdir build &amp;&amp; cd buildcmake .. make -j4sudo make install 5. Enjoy终端输入 1ss-qt5 启动 shadowsocks-qt5，这时候你会发现已经支持 chacha20-ietf-poly1305 协议了","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://hero.triple.net.cn/tags/shadowsocks/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://hero.triple.net.cn/tags/ubuntu/"}]},{"title":"Java 异常处理的误区和经验总结","slug":"exception-memo-in-java","date":"2018-12-17T07:28:29.000Z","updated":"2018-12-21T02:53:11.072Z","comments":true,"path":"2018/12/17/exception-memo-in-java/","link":"","permalink":"https://hero.triple.net.cn/2018/12/17/exception-memo-in-java/","excerpt":"本文着重介绍了 Java 异常选择和使用中的一些误区，希望各位读者能够熟练掌握异常处理的一些注意点和原则，注意总结和归纳。只有处理好了异常，才能提升开发人员的基本素养，提高系统的健壮性，提升用户体验，提高产品的价值。","text":"本文着重介绍了 Java 异常选择和使用中的一些误区，希望各位读者能够熟练掌握异常处理的一些注意点和原则，注意总结和归纳。只有处理好了异常，才能提升开发人员的基本素养，提高系统的健壮性，提升用户体验，提高产品的价值。 误区一、异常的选择图 1. 异常分类 图 1 描述了异常的结构，其实我们都知道异常分检测异常和非检测异常，但是在实际中又混淆了这两种异常的应用。由于非检测异常使用方便，很多开发人员就认为检测异常没什么用处。其实异常的应用情景可以概括为以下： 一、调用代码不能继续执行，需要立即终止。出现这种情况的可能性太多太多，例如服务器连接不上、参数不正确等。这些时候都适用非检测异常，不需要调用代码的显式捕捉和处理，而且代码简洁明了。 二、调用代码需要进一步处理和恢复。假如将 SQLException 定义为非检测异常，这样操作数据时开发人员理所当然的认为 SQLException 不需要调用代码的显式捕捉和处理，进而会导致严重的 Connection 不关闭、Transaction 不回滚、DB 中出现脏数据等情况，正因为 SQLException 定义为检测异常，才会驱使开发人员去显式捕捉，并且在代码产生异常后清理资源。当然清理资源后，可以继续抛出非检测异常，阻止程序的执行。根据观察和理解，检测异常大多可以应用于工具类中。 误区二、将异常直接显示在页面或客户端。将异常直接打印在客户端的例子屡见不鲜，以 JSP 为例，一旦代码运行出现异常，默认情况下容器将异常堆栈信息直接打印在页面上。其实从客户角度来说，任何异常都没有实际意义，绝大多数的客户也根本看不懂异常信息，软件开发也要尽量避免将异常直接呈现给用户。 清单 112345678910111213141516171819202122232425package com.ibm.dw.sample.exception;/** * 自定义 RuntimeException * 添加错误代码属性 */public class RuntimeException extends java.lang.RuntimeException &#123; //默认错误代码 public static final Integer GENERIC = 1000000; //错误代码 private Integer errorCode; public RuntimeException(Integer errorCode, Throwable cause) &#123; this(errorCode, null, cause); &#125; public RuntimeException(String message, Throwable cause) &#123; //利用通用错误代码 this(GENERIC, message, cause); &#125; public RuntimeException(Integer errorCode, String message, Throwable cause) &#123; super(message, cause); this.errorCode = errorCode; &#125; public Integer getErrorCode() &#123; return errorCode; &#125; &#125; 正如示例代码所示，在异常中引入错误代码，一旦出现异常，我们只要将异常的错误代码呈现给用户，或者将错误代码转换成更通俗易懂的提示。其实这里的错误代码还包含另外一个功能，开发人员亦可以根据错误代码准确的知道了发生了什么类型异常。 误区三、对代码层次结构的污染我们经常将代码分 Service、Business Logic、DAO 等不同的层次结构，DAO 层中会包含抛出异常的方法，如清单 2 所示： 清单 2123public Customer retrieveCustomerById(Long id) throw SQLException &#123; //根据 ID 查询数据库&#125; 上面这段代码咋一看没什么问题，但是从设计耦合角度仔细考虑一下，这里的 SQLException 污染到了上层调用代码，调用层需要显式的利用 try-catch 捕捉，或者向更上层次进一步抛出。根据设计隔离原则，我们可以适当修改成： 清单 312345678910public Customer retrieveCustomerById(Long id) &#123; try&#123; //根据 ID 查询数据库 &#125;catch(SQLException e)&#123; //利用非检测异常封装检测异常，降低层次耦合 throw new RuntimeException(SQLErrorCode, e); &#125;finally&#123; //关闭连接，清理资源 &#125;&#125; 误区四、忽略异常如下异常处理只是将异常输出到控制台，没有任何意义。而且这里出现了异常并没有中断程序，进而调用代码继续执行，导致更多的异常。 清单 4123456789101112public void retrieveObjectById(Long id)&#123; try&#123; //..some code that throws SQLException &#125;catch(SQLException ex)&#123; /** *了解的人都知道，这里的异常打印毫无意义，仅仅是将错误堆栈输出到控制台。 * 而在 Production 环境中，需要将错误堆栈输出到日志。 * 而且这里 catch 处理之后程序继续执行，会导致进一步的问题*/ ex.printStacktrace(); &#125;&#125; 可以重构成： 清单 51234567891011public void retrieveObjectById(Long id)&#123; try&#123; //..some code that throws SQLException &#125; catch(SQLException ex)&#123; throw new RuntimeException(“Exception in retieveObjectById”, ex); &#125; finally&#123; //clean up resultset, statement, connection etc &#125;&#125; 这个误区比较基本，一般情况下都不会犯此低级错误。 误区五、将异常包含在循环语句块中如下代码所示，异常包含在 for 循环语句块中。 清单 6123456for(int i=0; i&lt;100; i++)&#123; try&#123; &#125;catch(XXXException e)&#123; //…. &#125;&#125; 我们都知道异常处理占用系统资源。一看，大家都认为不会犯这样的错误。换个角度，类 A 中执行了一段循环，循环中调用了 B 类的方法，B 类中被调用的方法却又包含 try-catch 这样的语句块。褪去类的层次结构，代码和上面如出一辙。 误区六、利用 Exception 捕捉所有潜在的异常一段方法执行过程中抛出了几个不同类型的异常，为了代码简洁，利用基类 Exception 捕捉所有潜在的异常，如下例所示： 清单 7123456789public void retrieveObjectById(Long id)&#123; try&#123; //…抛出 IOException 的代码调用 //…抛出 SQLException 的代码调用 &#125;catch(Exception e)&#123; //这里利用基类 Exception 捕捉的所有潜在的异常，如果多个层次这样捕捉，会丢失原始异常的有效信息 throw new RuntimeException(“Exception in retieveObjectById”, e); &#125;&#125; 可以重构成 清单 81234567891011public void retrieveObjectById(Long id)&#123; try&#123; //..some code that throws RuntimeException, IOException, SQLException &#125;catch(IOException e)&#123; //仅仅捕捉 IOException throw new RuntimeException(/*指定这里 IOException 对应的错误代码*/code,“Exception in retieveObjectById”, e); &#125;catch(SQLException e)&#123; //仅仅捕捉 SQLException throw new RuntimeException(/*指定这里 SQLException 对应的错误代码*/code,“Exception in retieveObjectById”, e); &#125;&#125; 误区七、多层次封装抛出非检测异常如果我们一直坚持不同类型的异常一定用不同的捕捉语句，那大部分例子可以绕过这一节了。但是如果仅仅一段代码调用会抛出一种以上的异常时，很多时候没有必要每个不同类型的 Exception 写一段 catch 语句，对于开发来说，任何一种异常都足够说明了程序的具体问题。 清单 91234567try&#123; //可能抛出 RuntimeException、IOExeption 或者其它； //注意这里和误区六的区别，这里是一段代码抛出多种异常。以上是多段代码，各自抛出不同的异常&#125;catch(Exception e)&#123; //一如既往的将 Exception 转换成 RuntimeException，但是这里的 e 其实是 RuntimeException 的实例，已经在前段代码中封装过 throw new RuntimeException(/**/code, /**/, e);&#125; 如果我们如上例所示，将所有的 Exception 再转换成 RuntimeException，那么当 Exception 的类型已经是 RuntimeException 时，我们又做了一次封装。将 RuntimeException 又重新封装了一次，进而丢失了原有的 RuntimeException 携带的有效信息。 解决办法是我们可以在 RuntimeException 类中添加相关的检查，确认参数 Throwable 不是 RuntimeException 的实例。如果是，将拷贝相应的属性到新建的实例上。或者用不同的 catch 语句块捕捉 RuntimeException 和其它的 Exception。个人偏好方式一，好处不言而喻。 误区八、多层次打印异常我们先看一下下面的例子，定义了 2 个类 A 和 B。其中 A 类中调用了 B 类的代码，并且 A 类和 B 类中都捕捉打印了异常。 清单 10123456789101112131415161718192021222324252627public class A &#123; private static Logger logger = LoggerFactory.getLogger(A.class); public void process()&#123; try&#123; //实例化 B 类，可以换成其它注入等方式 B b = new B(); b.process(); //other code might cause exception &#125; catch(XXXException e)&#123; //如果 B 类 process 方法抛出异常，异常会在 B 类中被打印，在这里也会被打印，从而会打印 2 次 logger.error(e); throw new RuntimeException(/* 错误代码 */ errorCode, /*异常信息*/msg, e); &#125; &#125;&#125;public class B&#123; private static Logger logger = LoggerFactory.getLogger(B.class); public void process()&#123; try&#123; //可能抛出异常的代码 &#125; catch(XXXException e)&#123; logger.error(e); throw new RuntimeException(/* 错误代码 */ errorCode, /*异常信息*/msg, e); &#125; &#125;&#125; 同一段异常会被打印 2 次。如果层次再复杂一点，不去考虑打印日志消耗的系统性能，仅仅在异常日志中去定位异常具体的问题已经够头疼的了。 其实打印日志只需要在代码的最外层捕捉打印就可以了，异常打印也可以写成 AOP，织入到框架的最外层。 误区九、异常包含的信息不能充分定位问题异常不仅要能够让开发人员知道哪里出了问题，更多时候开发人员还需要知道是什么原因导致的问题，我们知道 java .lang.Exception 有字符串类型参数的构造方法，这个字符串可以自定义成通俗易懂的提示信息。 简单的自定义信息开发人员只能知道哪里出现了异常，但是很多的情况下，开发人员更需要知道是什么参数导致了这样的异常。这个时候我们就需要将方法调用的参数信息追加到自定义信息中。下例只列举了一个参数的情况，多个参数的情况下，可以单独写一个工具类组织这样的字符串。 清单 1112345678public void retieveObjectById(Long id)&#123; try&#123; //..some code that throws SQLException &#125;catch(SQLException ex)&#123; //将参数信息添加到异常信息中 throw new RuntimeException(“Exception in retieveObjectById with Object Id :”+ id, ex); &#125;&#125; 误区十、不能预知潜在的异常在写代码的过程中，由于对调用代码缺乏深层次的了解，不能准确判断是否调用的代码会产生异常，因而忽略处理。在产生了 Production Bug 之后才想起来应该在某段代码处添加异常补捉，甚至不能准确指出出现异常的原因。这就需要开发人员不仅知道自己在做什么，而且要去尽可能的知道别人做了什么，可能会导致什么结果，从全局去考虑整个应用程序的处理过程。这些思想会影响我们对代码的编写和处理。 误区十一、混用多种第三方日志库现如今 Java 第三方日志库的种类越来越多，一个大项目中会引入各种各样的框架，而这些框架又会依赖不同的日志库的实现。最麻烦的问题倒不是引入所有需要的这些日志库，问题在于引入的这些日志库之间本身不兼容。如果在项目初期可能还好解决，可以把所有代码中的日志库根据需要重新引入一遍，或者换一套框架。但这样的成本不是每个项目都承受的起的，而且越是随着项目的进行，这种风险就越大。 怎么样才能有效的避免类似的问题发生呢，现在的大多数框架已经考虑到了类似的问题，可以通过配置 Properties 或 xml 文件、参数或者运行时扫描 Lib 库中的日志实现类，真正在应用程序运行时才确定具体应用哪个特定的日志库。 其实根据不需要多层次打印日志那条原则，我们就可以简化很多原本调用日志打印代码的类。很多情况下，我们可以利用拦截器或者过滤器实现日志的打印，降低代码维护、迁移的成本。 结束语以上纯属个人的经验和总结，事物都是辩证的，没有绝对的原则，适合自己的才是最有效的原则。希望以上的讲解和分析可以对您有所帮助。","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"exception","slug":"exception","permalink":"https://hero.triple.net.cn/tags/exception/"}]},{"title":"各平台主机 IO 速度测试","slug":"check-some-clouds-disk-speed-on-linux","date":"2018-12-17T03:17:39.000Z","updated":"2018-12-17T03:28:19.658Z","comments":true,"path":"2018/12/17/check-some-clouds-disk-speed-on-linux/","link":"","permalink":"https://hero.triple.net.cn/2018/12/17/check-some-clouds-disk-speed-on-linux/","excerpt":"","text":"说明使用的命令1hdparm -Tt /dev/sda 都只测了两遍，仅作为参考 PC-HDD 500G123/dev/sda: Timing cached reads: 24752 MB in 1.99 seconds = 12411.35 MB/secTiming buffered disk reads: 598 MB in 3.01 seconds = 198.85 MB/sec Linode-SSD 1C1G 25G123/dev/sda:Timing cached reads: 11034 MB in 1.99 seconds = 5539.69 MB/secTiming buffered disk reads: 1916 MB in 3.00 seconds = 638.47 MB/sec Aliyun-SSD 1C1G 20G123/dev/vda:Timing cached reads: 18290 MB in 1.99 seconds = 9174.21 MB/secTiming buffered disk reads: 278 MB in 3.01 seconds = 92.50 MB/sec Kdatacenter-SSD 1C1G 100G123/dev/vda:Timing cached reads: 12728 MB in 2.00 seconds = 6367.04 MB/secTiming buffered disk reads: 850 MB in 3.00 seconds = 283.29 MB/sec","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"}]},{"title":"linux批量替换文件内容","slug":"linux-e6-89-b9-e9-87-8f-e6-9b-bf-e6-8d-a2-e6-96-87-e4-bb-b6-e5-86-85-e5-ae-b9","date":"2018-11-30T06:20:25.000Z","updated":"2018-12-12T09:20:50.289Z","comments":true,"path":"2018/11/30/linux-e6-89-b9-e9-87-8f-e6-9b-bf-e6-8d-a2-e6-96-87-e4-bb-b6-e5-86-85-e5-ae-b9/","link":"","permalink":"https://hero.triple.net.cn/2018/11/30/linux-e6-89-b9-e9-87-8f-e6-9b-bf-e6-8d-a2-e6-96-87-e4-bb-b6-e5-86-85-e5-ae-b9/","excerpt":"","text":"有同事开发是在 windows 下面，由于windows目录不区分大小写，这货索性直接吧所有路径都用小写， 然后放到服务器上(Linux)就悲剧了，一堆 404 … 好在有神器 sed 用sed命令可以批量替换多个文件中的 字符串。 sed -i “s/原字符串/新字符串/g” `grep 原字符串 -rl 所在目录` 例如：我要把 `Colure` 替换 为 `Color`，执行命令： sed -i &quot;s/Colure/Color/g&quot; &#39;grep Colure -rl /var/www/html/prject001/src/view/&#39; 这是目前linux最简单的批量替换字符串命令了！","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"替换","slug":"替换","permalink":"https://hero.triple.net.cn/tags/替换/"},{"name":"sed","slug":"sed","permalink":"https://hero.triple.net.cn/tags/sed/"}]},{"title":"我推荐禁用的 PHP 函数","slug":"e6-88-91-e6-8e-a8-e8-8d-90-e7-a6-81-e7-94-a8-e7-9a-84-php-e5-87-bd-e6-95-b0","date":"2018-08-24T04:36:52.000Z","updated":"2018-12-18T10:35:53.351Z","comments":true,"path":"2018/08/24/e6-88-91-e6-8e-a8-e8-8d-90-e7-a6-81-e7-94-a8-e7-9a-84-php-e5-87-bd-e6-95-b0/","link":"","permalink":"https://hero.triple.net.cn/2018/08/24/e6-88-91-e6-8e-a8-e8-8d-90-e7-a6-81-e7-94-a8-e7-9a-84-php-e5-87-bd-e6-95-b0/","excerpt":"推荐禁用的函数有时候为了安全我们需要禁掉一些PHP危险函数，整理如下需要的朋友可以参考下","text":"推荐禁用的函数有时候为了安全我们需要禁掉一些PHP危险函数，整理如下需要的朋友可以参考下 1phpinfo,eval,passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,pfsockopen,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket,fsockopen 函数名称和功能列表参见附录 禁用函数的方法：修改 php.ini首先找出你服务器的该文件在哪。 一般主机源码安装的默认地址是：/usr/local/lib/php.ini DirectAdmin 的 CGI 模式下，地址是：/usr/local/etc/php5/cgi/php.ini 在该文件中找出 disable_functions =如果有注释就去掉、然后在等号后面加入禁用的函数 重启 apache 或 nginx 附录：函数功能列表 phpinfo()能描述：输出 PHP 环境信息以及相关的模块、WEB 环境等信息。险等级：中 passthru()能描述：允许执行一个外部程序并回显输出，类似于 exec()。险等级：高 exec()能描述：允许执行一个外部程序（如 UNIX Shell 或 CMD 命令等）。险等级：高 system()能描述：允许执行一个外部程序并回显输出，类似于 passthru()。险等级：高 chroot()能描述：可改变当前 PHP 进程的工作根目录，仅当系统支持 CLI 模式HP 时才能工作，且该函数不适用于 Windows 系统。险等级：高 scandir()能描述：列出指定路径中的文件和目录。险等级：中 chgrp()能描述：改变文件或目录所属的用户组。险等级：高 chown()能描述：改变文件或目录的所有者。险等级：高 _shell_exec()_能描述：通过 Shell 执行命令，并将执行结果作为字符串返回。险等级：高 _proc_open()_能描述：执行一个命令并打开文件指针用于读取以及写入。险等级：高 _proc_get_status()_能描述：获取使用 proc_open() 所打开进程的信息。险等级：高 _error_log()_能描述：将错误信息发送到指定位置（文件）。全备注：在某些版本的 PHP 中，可使用 error_log() 绕过 PHP safe mode，行任意命令。险等级：低 _ini_alter()_能描述：是 ini_set() 函数的一个别名函数，功能与 ini_set() 相同。体参见 ini_set()。险等级：高 _ini_set()_能描述：可用于修改、设置 PHP 环境配置参数。险等级：高 _ini_restore()_能描述：可用于恢复 PHP 环境配置参数到其初始值。险等级：高 dl()能描述：在 PHP 进行运行过程当中（而非启动时）加载一个 PHP 外部模块。险等级：高 pfsockopen()能描述：建立一个 Internet 或 UNIX 域的 socket 持久连接。险等级：高 syslog()能描述：可调用 UNIX 系统的系统层 syslog() 函数。险等级：中 readlink()能描述：返回符号连接指向的目标文件内容。险等级：中 symlink()能描述：在 UNIX 系统中建立一个符号链接。险等级：高 popen()能描述：可通过 popen() 的参数传递一条命令，并对 popen() 所打开的文件进行执行。险等级：高 _stream_socket_server()_能描述：建立一个 Internet 或 UNIX 服务器连接。险等级：中 putenv()能描述：用于在 PHP 运行时改变系统字符集环境。在低于 5.2.6 版本的 PHP 中，可利用该函数改系统字符集环境后，利用 sendmail 指令发送特殊参数执行系统 SHELL 命令。险等级：高险等级：高 来源:\\http://www.zntec.cn/archives/disable_functions.html","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"}]},{"title":"mysql 中删除重复数据","slug":"mysql-e4-b8-ad-e5-88-a0-e9-99-a4-e9-87-8d-e5-a4-8d-e6-95-b0-e6-8d-ae","date":"2018-08-09T08:59:59.000Z","updated":"2018-12-18T10:49:18.930Z","comments":true,"path":"2018/08/09/mysql-e4-b8-ad-e5-88-a0-e9-99-a4-e9-87-8d-e5-a4-8d-e6-95-b0-e6-8d-ae/","link":"","permalink":"https://hero.triple.net.cn/2018/08/09/mysql-e4-b8-ad-e5-88-a0-e9-99-a4-e9-87-8d-e5-a4-8d-e6-95-b0-e6-8d-ae/","excerpt":"下面这条记录可以删除 account 表中的 Email 重复的数据, 保留 user_id 最小的那条记录","text":"下面这条记录可以删除 account 表中的 Email 重复的数据, 保留 user_id 最小的那条记录 DELETE FROM account WHERE email IN ( SELECT email FROM ( SELECT email FROM account GROUP BY email HAVING count(email) &gt; 1 ) a ) AND user_id NOT IN ( SELECT min(user_id) FROM ( SELECT min(user_id) AS user_id FROM account GROUP BY email HAVING count(email) &gt; 1 ) b ) 参考来源: https://www.cnblogs.com/youxin/p/6380234.html","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"}]},{"title":"一行命令删除文件中的空行","slug":"e4-b8-80-e8-a1-8c-e5-91-bd-e4-bb-a4-e5-88-a0-e9-99-a4-e6-96-87-e4-bb-b6-e4-b8-ad-e7-9a-84-e7-a9-ba-e8-a1-8c","date":"2018-08-09T03:50:02.000Z","updated":"2018-12-12T09:05:36.259Z","comments":false,"path":"2018/08/09/e4-b8-80-e8-a1-8c-e5-91-bd-e4-bb-a4-e5-88-a0-e9-99-a4-e6-96-87-e4-bb-b6-e4-b8-ad-e7-9a-84-e7-a9-ba-e8-a1-8c/","link":"","permalink":"https://hero.triple.net.cn/2018/08/09/e4-b8-80-e8-a1-8c-e5-91-bd-e4-bb-a4-e5-88-a0-e9-99-a4-e6-96-87-e4-bb-b6-e4-b8-ad-e7-9a-84-e7-a9-ba-e8-a1-8c/","excerpt":"","text":"从另一个地方复制的文字, 总会携带很多奇奇怪怪的空白 单独占一行, 没实质意义. 比如 空格 全角空格 制表符 换行符 教你用 vim 一条命令删掉::g/^\\(\\%u3000\\|[\\t ]\\)*$/d 解释: 使用 global(g) 命令 删除(d)文件中 匹配空白的行 ^: 匹配行开始 \\(\\): 要纳入检测的空白字符集合 \\%u3000: 匹配全角字符 \\|: “或” 条件 [\\t ]: 匹配制表符(\\t)或空格 *: 集合中的字符可以任意次数重复 $: 匹配行结尾 ps: 通过 ga 命令可以显示当前光标下字符的编码,例如: &lt;考&gt; 32771, 十六进制 8003, 八进制 100003","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://hero.triple.net.cn/tags/vim/"},{"name":"命令","slug":"命令","permalink":"https://hero.triple.net.cn/tags/命令/"},{"name":"替换","slug":"替换","permalink":"https://hero.triple.net.cn/tags/替换/"}]},{"title":"PHP 记录脚本或方法执行时间","slug":"records-execution-time-of-php-script","date":"2018-08-03T03:08:52.000Z","updated":"2018-12-21T06:24:10.295Z","comments":true,"path":"2018/08/03/records-execution-time-of-php-script/","link":"","permalink":"https://hero.triple.net.cn/2018/08/03/records-execution-time-of-php-script/","excerpt":"我再也不想每次用 PHP 记录脚步或方法执行时间 时, 都要漫天搜索一遍, )即使搜索很容易 &amp; 代码也很简单 但这个不应该打扰我, 我要立即可用的 最好不要有警告, 不要让我再考虑如何转换成 “人话” !代码来源: csdn: https://blog.csdn.net/zhu\\_lizhen/article/details/76018386","text":"我再也不想每次用 PHP 记录脚步或方法执行时间 时, 都要漫天搜索一遍, )即使搜索很容易 &amp; 代码也很简单 但这个不应该打扰我, 我要立即可用的 最好不要有警告, 不要让我再考虑如何转换成 “人话” !代码来源: csdn: https://blog.csdn.net/zhu\\_lizhen/article/details/76018386 执行结果示例: [caption id=”attachment_1783” align=”alignnone” width=”300”] PHP记录代码执行时间[/caption] 123456789101112131415//程序运行开始时间$startTime = explode(' ', microtime());/*········以下是代码区·········*/for($i = 0; $i &lt; 1000000; $i++)&#123; $i;&#125;/*········以上是代码区·········*///程序运行结束时间$endTime = explode(' ', microtime());echo $startTime[0] + $startTime[1] . '';echo $endTime[0] + $endTime[1] . '';echo '执行耗时：' . round($endTime[0] + $endTime[1] - ($startTime[0] + $startTime[1]), 4) . ' 秒。'; 另外一种方法取得程序执行时间来源： http://php.net/manual/zh/function.microtime.php 1234567$time = -microtime(true); $hash = 0; for ($i=0; $i &lt; rand(1000,4000); ++$i) &#123; $hash ^= md5(substr(str_shuffle(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"), 0, rand(1,10))); &#125; $time += microtime(true); echo \"Hash: $hash iterations:$i time: \",sprintf('%f', $time),PHP_EOL;","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"}]},{"title":"树莓派3b-plus无线wifi配置","slug":"config-wifi-on-raspberry-3b-plus","date":"2018-07-25T05:57:15.000Z","updated":"2018-12-18T04:53:14.424Z","comments":true,"path":"2018/07/25/config-wifi-on-raspberry-3b-plus/","link":"","permalink":"https://hero.triple.net.cn/2018/07/25/config-wifi-on-raspberry-3b-plus/","excerpt":"","text":"树莓派3b-plus 原生的wifi已经支持很好, 安装官方iso之后可以方便的使用 5G wifi 网络 一般使用 1sudo raspi-config 并选择第二项, 配置 wifi, 输入 ssid 和 密码就好了 完整的 Wi-Fi 配置参考官方文档 下面是已经手动配置文件的截图(包含配置文件路径):","categories":[{"name":"互联网","slug":"互联网","permalink":"https://hero.triple.net.cn/categories/互联网/"},{"name":"操作系统","slug":"互联网/操作系统","permalink":"https://hero.triple.net.cn/categories/互联网/操作系统/"}],"tags":[{"name":"wifi","slug":"wifi","permalink":"https://hero.triple.net.cn/tags/wifi/"},{"name":"树莓派","slug":"树莓派","permalink":"https://hero.triple.net.cn/tags/树莓派/"}]},{"title":"将 phpinfo 的保存到文件的方法","slug":"e5-b0-86-phpinfo-e7-9a-84-e4-bf-9d-e5-ad-98-e5-88-b0-e6-96-87-e4-bb-b6-e7-9a-84-e6-96-b9-e6-b3-95","date":"2018-07-25T03:05:38.000Z","updated":"2018-12-12T09:08:58.780Z","comments":false,"path":"2018/07/25/e5-b0-86-phpinfo-e7-9a-84-e4-bf-9d-e5-ad-98-e5-88-b0-e6-96-87-e4-bb-b6-e7-9a-84-e6-96-b9-e6-b3-95/","link":"","permalink":"https://hero.triple.net.cn/2018/07/25/e5-b0-86-phpinfo-e7-9a-84-e4-bf-9d-e5-ad-98-e5-88-b0-e6-96-87-e4-bb-b6-e7-9a-84-e6-96-b9-e6-b3-95/","excerpt":"","text":"将 phpinfo() 的数据保存到文件的方法. 示例如下: 将本地 phpinfo() 打印的 server, env, model 等信息(去掉了贡献人, License 的信息)保存到当前目录, 文件以当前时间命名: function PHPInfo2File($target_file){ ob_start(); phpinfo(61); $info = ob_get_contents(); ob_end_clean(); file_put_contents(date(&apos;Y-m-d_His&apos;) . &apos;.txt&apos;, $info); } 关于 phpinfo() 的参数可以参考: http://php.net/manual/zh/function.phpinfo.php","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"phpinfo","slug":"phpinfo","permalink":"https://hero.triple.net.cn/tags/phpinfo/"}]},{"title":"NAT类型科普及一些简单提升NAT类型的方法","slug":"nat-setting-and-tips","date":"2018-06-05T08:34:03.000Z","updated":"2018-12-17T08:09:52.991Z","comments":true,"path":"2018/06/05/nat-setting-and-tips/","link":"","permalink":"https://hero.triple.net.cn/2018/06/05/nat-setting-and-tips/","excerpt":"首先可以在百度百科了解到什么是NAT，传送门→“NAT科普”然后呢，看了那么多我们大概就知道了一些关于NAT的基本知识， “定义”、 “功能”、 “实现方式”及 “类型”","text":"首先可以在百度百科了解到什么是NAT，传送门→“NAT科普”然后呢，看了那么多我们大概就知道了一些关于NAT的基本知识， “定义”、 “功能”、 “实现方式”及 “类型” 提升NAT类型的好处：浏览网页、观看视频、游戏等更顺畅，下载速度更稳定快速， 特别是对那些玩ED2K/PT下载、PS4/XBox主机游戏的，提升NAT类型后更有可能获取到HigtID、更容易进入游戏房间连线等。 好了，废话有点多了。要提升NAT类型，我们必须知道NAT的4个类型：NAT1、NAT2、NAT3、NAT4。它们分别对应（详情见百度百科）： NAT1 → Full Cone NAT NAT2 → Address-Restricted Cone NAT NAT3 → Port-Restricted Cone NAT NAT4 → Symmetric NAT 说些比较重要的前话：路由器少一层是一层，这样越有可能得到NAT1和NAT2这两类NAT类型。 建议家里的网路是以下两种拓扑类型： 猫桥接→主路由（拨号连接外网用）→副路由（纯AP模式，扩展信号） 光猫拨号（直接充当主路由）→副路由（纯AP模式，扩展信号） 这样的好处是桥接和纯AP是不进行NAT的，而是SWitch，所以不会导致多一层NAT。 如果你的网络是 NAT1，那这是最宽松的网络环境，你想做什么，基本没啥限制； 如果是 NAT4 的话，这是最严格的网络环境，可能会玩不了游戏、下载都没速度； 一般，我们家里的设备都是通过光猫桥接+无线路由器拨号的形式连接到外网的， 此时，基本是NAT2和NAT3，正常情况对看网页、游戏及下载都没有过多的限制。但是，现在个别网络游戏严格要求你的网络环境必须是“NAT2”以上（NAT2和NAT1），才能进行游戏。 而你的网络环境又是 NAT3 及 NAT4,那到底该怎么办呢？下面我们介绍一些简单提升NAT类型的方法 NAT穿透 如果你的路由器有启用“Full Cone”、“STUN”、“TURN”、“ICE”、“uPnP”等功能，果断都启用了。如果没有的话，你的路由器差不多可以扔了，因为现在的路由器“uPnP”基本是标配，连这都没有，那你的路由器是有多古董。 如果你的路由器没有以上功能，那可以找下有没有“DMZ”功能（什么是“DMZ”，请问度娘 → DMZ ）,有的话，可以启用它，并把你要提升NAT类型的主机IP地址设置好。 （一般建议有“Full Cone”、“uPnP”等，就不要开 DMZ 了，除非你是PS4/XBox这类游戏主机要提升NAT类型） 在Windows上把以下三个服务设置为自动启动，并启动该服务： 一般这三个服务都会被奇虎360等带启动项优化的软件当做无用启动项被“优化”成禁止启动。怎么手动设置为自动启动，并启动，详情问 → 度娘 Function Discovery Provider Host Function Discovery Resource Publication SSDP Discovery 在 Windows 防火墙，放行你需要提升NAT类型的软件或者游戏程序（EXE程序或者UWP程序）， 如果你不会放行，也可以直接关闭 Windows 防火墙。（一般不推荐这样做，还是老话，不懂问“度娘”）第4步很重要，这步没做，等于其它的全是在做无用功。 如果你的设备是通过电脑共享网络的形式上网的，建议把这个服务也打开：UPnP Device Host 以上，能弄的都弄了，这样你的网络环境就会越好，甚至NAT1都没有问题。","categories":[{"name":"互联网","slug":"互联网","permalink":"https://hero.triple.net.cn/categories/互联网/"}],"tags":[{"name":"NAT","slug":"NAT","permalink":"https://hero.triple.net.cn/tags/NAT/"}]},{"title":"Linux系统中.bz2与.gz文件的区别","slug":"linux-e7-b3-bb-e7-bb-9f-e4-b8-ad-bz2-e4-b8-8e-gz-e6-96-87-e4-bb-b6-e7-9a-84-e5-8c-ba-e5-88-ab","date":"2018-05-31T05:57:38.000Z","updated":"2018-12-12T09:20:50.306Z","comments":false,"path":"2018/05/31/linux-e7-b3-bb-e7-bb-9f-e4-b8-ad-bz2-e4-b8-8e-gz-e6-96-87-e4-bb-b6-e7-9a-84-e5-8c-ba-e5-88-ab/","link":"","permalink":"https://hero.triple.net.cn/2018/05/31/linux-e7-b3-bb-e7-bb-9f-e4-b8-ad-bz2-e4-b8-8e-gz-e6-96-87-e4-bb-b6-e7-9a-84-e5-8c-ba-e5-88-ab/","excerpt":"","text":"### 使用 #压缩 tar -czf ***.tar.gz # tar -czf /tmp/etc.tar.gz /etc &lt;==打包后，以 gzip 压缩 tar -cjf ***.tar.bz2 # tar -cjf /tmp/etc.tar.bz2 /etc &lt;==打包后，以 bzip2 压缩 #解压缩 tar -xzf ***.tar.gz tar -xjf ***.tar.bz2 ### 区别 .bz2和.gz的区别在于，前者比后者压缩率更高，后者比前者花费更少的时间。也就是说同一个文件，压缩后，.bz2文件比.gz文件更小，但是.bz2文件的小是以花费更多的时间为代价的。 压缩实例：对一个599M的文件夹workspace进行压缩 -----------bz2文件---------------------- time tar -jcvf j.tar.bz2 workspace/ 340M 56.8% real 13m20.975s user 11m13.872s sys 0m5.985s -----------gz文件---------------------- time tar -zcvf z.tar.gz workspace/ 348M 58.1% real 2m10.305s user 0m54.228s sys 0m7.399s --------------------------------- 总结：压缩后，.bz2文件只比.gz文件小了8M，但却花费了后者6倍多的时间。当然，压缩的比率，时间跟被压缩文件的格式，大小等因素有关。所以，本例不能说明使用gz比使用bz2更划算，但至少可以证明bz2比gz压缩率更高，gz比bz2花费更少的时间。 压缩率与文件类型方面的影响很大。某些文件 bz2压缩率还比不上gz，但某些文件bz2能压缩比gz多两倍！至于文件大小的问题，有一句经典的话：虽然磁盘越来越便宜，但是网络带宽并非那么廉价，因此更小的文件用于节省网络带宽常常是值得的。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"命令","slug":"命令","permalink":"https://hero.triple.net.cn/tags/命令/"},{"name":"tar","slug":"tar","permalink":"https://hero.triple.net.cn/tags/tar/"}]},{"title":"虚拟机安装 Linux 并使用桌面环境的选择","slug":"e8-99-9a-e6-8b-9f-e6-9c-ba-e5-ae-89-e8-a3-85-linux-e5-b9-b6-e4-bd-bf-e7-94-a8-e6-a1-8c-e9-9d-a2-e7-8e-af-e5-a2-83-e7-9a-84-e9-80-89-e6-8b-a9","date":"2018-05-18T07:37:40.000Z","updated":"2018-12-12T09:13:19.466Z","comments":false,"path":"2018/05/18/e8-99-9a-e6-8b-9f-e6-9c-ba-e5-ae-89-e8-a3-85-linux-e5-b9-b6-e4-bd-bf-e7-94-a8-e6-a1-8c-e9-9d-a2-e7-8e-af-e5-a2-83-e7-9a-84-e9-80-89-e6-8b-a9/","link":"","permalink":"https://hero.triple.net.cn/2018/05/18/e8-99-9a-e6-8b-9f-e6-9c-ba-e5-ae-89-e8-a3-85-linux-e5-b9-b6-e4-bd-bf-e7-94-a8-e6-a1-8c-e9-9d-a2-e7-8e-af-e5-a2-83-e7-9a-84-e9-80-89-e6-8b-a9/","excerpt":"","text":"VMware 12，HDD，i5 4790，12GB 内存 Debian太卡，用了lxde也一样，纯粹是为了其稳定性去的（据说可以用很多年） Lubuntu 16.04.4 刚刚安装好重启都出错，先天不和，不过基于lxde的X界面，确实要比其他版本好太多，如果能忍受如此不稳定可以尝试。。。。。 好吧，换 CentOS（7, gnome classic），感觉还不错，卡顿比其他发行版感觉上好好一些，给了2G的显存 不足之处是各种软件不太熟悉，装个 ss 都没有，python 默认都是2.7.5的","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"}]},{"title":"阿里云不支持代理。。。","slug":"e9-98-bf-e9-87-8c-e4-ba-91-e4-b8-8d-e6-94-af-e6-8c-81-e4-bb-a3-e7-90-86-e3-80-82-e3-80-82-e3-80-82","date":"2018-05-18T06:36:05.000Z","updated":"2018-12-12T09:13:43.722Z","comments":false,"path":"2018/05/18/e9-98-bf-e9-87-8c-e4-ba-91-e4-b8-8d-e6-94-af-e6-8c-81-e4-bb-a3-e7-90-86-e3-80-82-e3-80-82-e3-80-82/","link":"","permalink":"https://hero.triple.net.cn/2018/05/18/e9-98-bf-e9-87-8c-e4-ba-91-e4-b8-8d-e6-94-af-e6-8c-81-e4-bb-a3-e7-90-86-e3-80-82-e3-80-82-e3-80-82/","excerpt":"","text":"昨天晚上想着经常用公共网络，不太安全，在ECS上建个代理吧， 折腾了很久，发现死活不行， 一开始尝试的是 openvpn ，配置好之后客户端连接提示 连接被重置。。我防火墙100%确定是关闭/放行了的 然后尝试下 ss ，简单的不能再简单的东西，也依然不行 至此基本确认，国内云想用代理基本不可能了。。。","categories":[{"name":"互联网","slug":"互联网","permalink":"https://hero.triple.net.cn/categories/互联网/"}],"tags":[{"name":"阿里云","slug":"阿里云","permalink":"https://hero.triple.net.cn/tags/阿里云/"},{"name":"proxy","slug":"proxy","permalink":"https://hero.triple.net.cn/tags/proxy/"},{"name":"代理","slug":"代理","permalink":"https://hero.triple.net.cn/tags/代理/"}]},{"title":"php 暂停多少毫秒、微秒 后执行","slug":"php-e6-9a-82-e5-81-9c-e5-a4-9a-e5-b0-91-e6-af-ab-e7-a7-92-e3-80-81-e5-be-ae-e7-a7-92-e5-90-8e-e6-89-a7-e8-a1-8c","date":"2018-05-15T09:19:54.000Z","updated":"2018-12-12T09:22:01.252Z","comments":false,"path":"2018/05/15/php-e6-9a-82-e5-81-9c-e5-a4-9a-e5-b0-91-e6-af-ab-e7-a7-92-e3-80-81-e5-be-ae-e7-a7-92-e5-90-8e-e6-89-a7-e8-a1-8c/","link":"","permalink":"https://hero.triple.net.cn/2018/05/15/php-e6-9a-82-e5-81-9c-e5-a4-9a-e5-b0-91-e6-af-ab-e7-a7-92-e3-80-81-e5-be-ae-e7-a7-92-e5-90-8e-e6-89-a7-e8-a1-8c/","excerpt":"","text":"在php中暂停代码执行一定时间，有两个函数可以实现，一个是sleep，另一个是usleep，它们参数都是一个整数值。 sleep是暂停多少秒，usleep是暂停多少微秒。 注意：usleep单位是微秒， 1秒 = 1000毫秒 ， 1毫秒 = 1000微秒， 即1微秒等于百万分之一秒。 如果程序中要使用要暂停多少毫秒，只能使用usleep，务必注意参数的单位， 假设暂停 50毫秒，应该使用usleep(50000)，而不是usleep(50)。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"sleep","slug":"sleep","permalink":"https://hero.triple.net.cn/tags/sleep/"},{"name":"毫秒","slug":"毫秒","permalink":"https://hero.triple.net.cn/tags/毫秒/"}]},{"title":"获取真实IP的方法，以及伪造IP的例子代码","slug":"getting-real-IP-and-the-example-code-of-forging-IP","date":"2018-05-15T03:22:15.000Z","updated":"2018-12-21T05:05:07.219Z","comments":true,"path":"2018/05/15/getting-real-IP-and-the-example-code-of-forging-IP/","link":"","permalink":"https://hero.triple.net.cn/2018/05/15/getting-real-IP-and-the-example-code-of-forging-IP/","excerpt":"获取客户端ip其实不是个简单的活儿,因为存在Ip欺骗,和代理问题,所以获取客户端的IP的真实性会打折扣的,不能百分百准确.但是我们还是尽量找一个比较完善的获取客户端真正ip方法.使用php获取IP的方法能找到很多.","text":"获取客户端ip其实不是个简单的活儿,因为存在Ip欺骗,和代理问题,所以获取客户端的IP的真实性会打折扣的,不能百分百准确.但是我们还是尽量找一个比较完善的获取客户端真正ip方法.使用php获取IP的方法能找到很多. 通用方法12345678function getIp() &#123; if (getenv(“HTTP_CLIENT_IP”) &amp;&amp; strcasecmp(getenv(“HTTP_CLIENT_IP”), “unknown”)) $ip = getenv(“HTTP_CLIENT_IP”); else if (getenv(“HTTP_X_FORWARDED_FOR”) &amp;&amp; strcasecmp(getenv(“HTTP_X_FORWARDED_FOR”), “unknown”)) $ip = getenv(“HTTP_X_FORWARDED_FOR”); else if (getenv(“REMOTE_ADDR”) &amp;&amp; strcasecmp(getenv(“REMOTE_ADDR”), “unknown”)) $ip = getenv(“REMOTE_ADDR”); else if (isset($_SERVER[‘REMOTE_ADDR’]) &amp;&amp; $_SERVER[‘REMOTE_ADDR’] &amp;&amp; strcasecmp($_SERVER[‘REMOTE_ADDR’], “unknown”)) $ip = $_SERVER[‘REMOTE_ADDR’]; else $ip = “unknown”; return ($ip);&#125; 现在需要对这段代码进行解释,这里用到了两个函数, getenv() 和 strcasecmp(),前一个函数获取得系统的环境变量,如果能取到值,则返回该值,不能则返回 false. $_SERVER 是服务器超级全局变量数组,用 $_SERVER[‘REMOTE_ADDR’] 同样可以获取到客户端的IP地址.二者的区别在于,getenv 不支持IIS的 isapi 方式运行的php. strcasecmp(string1,string2) 字符串函数的用法是把 string1 和 string2 进行比较,如果相等返回 0,如果string1大于string2,返回大于0的数,小于则返回小于0的数. 函数先使用客户IP,如果不成立尝试用代理的方法,如果不行,再使用 REMOTE_ADDR.还看到过一个检测IP更详细的方法,考虑了IP的欺骗,和多重代理代码.方法相类似. 1234567891011121314function getip() &#123; $unknown = ‘unknown’; if (isset($\\_SERVER\\[‘HTTP\\_X\\_FORWARDED\\_FOR’\\]) &amp;&amp; $\\_SERVER\\[‘HTTP\\_X\\_FORWARDED\\_FOR’\\] &amp;&amp; strcasecmp($\\_SERVER\\[‘HTTP\\_X\\_FORWARDED\\_FOR’\\], $unknown)) &#123; $ip = $\\_SERVER\\[‘HTTP\\_X\\_FORWARDED\\_FOR’\\]; &#125; elseif(isset($\\_SERVER\\[‘REMOTE\\_ADDR’\\]) &amp;&amp; $\\_SERVER\\[‘REMOTE\\_ADDR’\\] &amp;&amp; strcasecmp($\\_SERVER\\[‘REMOTE\\_ADDR’\\], $unknown)) &#123; $ip = $\\_SERVER\\[‘REMOTE\\_ADDR’\\]; &#125; /* 处理多层代理的情况 * 或者使用正则方式：$ip = preg_match(“/\\[\\\\d\\\\.\\]&#123;7,15&#125;/”, $ip, $matches) ? $matches\\[0\\] : $unknown; */ if (false !== strpos($ip, ‘,’)) $ip = reset(explode(‘,’, $ip)); return $ip;&#125; 一、没有使用代理服务器的PHP获取客户端IP情况： REMOTE_ADDR = 客户端IP HTTP_X_FORWARDED_FOR = 没数值或不显示 二、使用透明代理服务器的情况：Transparent Proxies REMOTE_ADDR = 最后一个代理服务器 IP HTTP_X_FORWARDED_FOR = 客户端真实 IP （经过多个代理服务器时，这个值类似：221.5.252.160, 203.98.182.163, 203.129.72.215） 这类代理服务器还是将客户端真实的IP发送给了访问对象,无法达到隐藏真实身份的目的. 三、使用普通匿名代理服务器的PHP获取客户端IP情况：Anonymous Proxies REMOTE_ADDR = 最后一个代理服务器 IP HTTP_X_FORWARDED_FOR = 代理服务器 IP （经过多个代理服务器时，这个值类似：203.98.182.163, 203.98.182.163, 203.129.72.215） 这种情况下隐藏了客户端的真实IP,但是向访问对象透露了客户端是使用代理服务器访问它们的. 四、使用欺骗性代理服务器的情况：Distorting Proxies REMOTE_ADDR = 代理服务器 IP HTTP_X_FORWARDED_FOR = 随机的 IP（经过多个代理服务器时,这个值类似：220.4.251.159, 203.98.182.163, 203.129.72.215） 这种情况下同样透露了客户端是使用了代理服务器,但编造了一个虚假的随机IP（220.4.251.159）代替客户端的真实IP来欺骗它. 五、使用高匿名代理服务器的PHP获取客户端IP情况：High Anonymity Proxies (Elite proxies) REMOTE_ADDR = 代理服务器 IP HTTP_X_FORWARDED_FOR = 没数值或不显示 无论是 REMOTE_ADDR 还是 HTTP_FORWARDED_FOR，这些头消息未必能够取得到,因为不同的浏览器不同的网络设备可能发送不同的IP头消息.因此PHP使用$_SERVER[“REMOTE_ADDR”] 、$_SERVER[“HTTP_X_FORWARDED_FOR”] 获取的值可能是空值也可能是“unknown”值. REMOTE_ADDR 是你的客户端跟你的服务器“握手”时候的IP。如果使用了“匿名代理”，REMOTE_ADDR将显示代理服务器的IP。HTTP_CLIENT_IP 是代理服务器发送的HTTP头。如果是“超级匿名代理”，则返回none值。同样，REMOTE_ADDR也会被替换为这个代理服务器的IP。$_SERVER[‘REMOTE_ADDR’]; //访问端（有可能是用户，有可能是代理的）IP$_SERVER[‘HTTP_CLIENT_IP’]; //代理端的（有可能存在，可伪造）$_SERVER[‘HTTP_X_FORWARDED_FOR’]; //用户是在哪个IP使用的代理（有可能存在，也可以伪造） 下面是测试代码： 服务端获取IP地址 http://ip.itlearner.com/ 其代码如下: 12345678$s_onlineip = getenv(‘HTTP_CLIENT_IP’);echo “HTTP_CLIENT_IP:”.$s_onlineip;$s_onlineip = getenv(‘HTTP_X_FORWARDED_FOR’);echo “HTTP_X_FORWARDED_FOR:”.$s_onlineip;$s_onlineip = getenv(‘REMOTE_ADDR’);echo “REMOTE\\_ADDR:”.$s\\_onlineip.”&lt;br/&gt;\\\\n”;$s\\_onlineip = $\\_SERVER\\[‘REMOTE_ADDR’\\];echo “\\\\$\\_SERVER\\[‘REMOTE\\_ADDR’\\]:”.$s_onlineip.”&lt;br/&gt;\\\\n”; 客户端代码 伪造IP测试： 12345678910111213141516171819202122232425$url = ‘[http://ip.itlearner.com/](http://ip.itlearner.com/)’;$data_string = ‘test=test’;$URL\\_Info = parse\\_url($url);$request = ”;if (!isset($URL_Info\\[“port”\\]))$URL_Info\\[“port”\\]=80;$request.=”POST “.$URL_Info\\[“path”\\].” HTTP/1.1\\\\n”;$request.=”Host: “.$URL_Info\\[“host”\\].”\\\\n”;$request.=”Referer: “.$URL_Info\\[“host”\\].”\\\\n”;$request.=”Content-type: application/x-www-form-urlencoded\\\\n”;$request.=”X-Forwarded-For:192.168.1.4\\\\n”;//HTTP\\_X\\_FORWARDED_FOR的值$request.=”client\\_ip:192.168.1.5\\\\n”;//HTTP\\_CLIENT_IP的值$request.=”Content-length: “.strlen($data_string).”\\\\n”;$request.=”Connection: close\\\\n”;$request.=”\\\\n”;$request.=$data_string.”\\\\n”;$fp = fsockopen($URL\\_Info\\[“host”\\], $URL\\_Info\\[“port”\\]);fputs($fp, $request);$result = ”;while(!feof($fp)) &#123;$result .= fgets($fp, 1024);&#125;fclose($fp);echo $result; 输出： 1234&gt; HTTP_CLIENT_IP:192.168.1.5 &gt; HTTP_X_FORWARDED_FOR:192.168.1.4 &gt; REMOTE_ADDR:127.0.0.1 &gt; $_SERVER[‘REMOTE_ADDR’]:127.0.0.1 代理IP测试： 123456789$cUrl = curl_init();curl_setopt($cUrl, CURLOPT_URL, $url);curl_setopt($cUrl, CURLOPT_RETURNTRANSFER, 1);curl_setopt($cUrl, CURLOPT_HEADER, 1);curl_setopt($cUrl, CURLOPT_USERAGENT, “Mozilla/99.99″);curl_setopt($cUrl, CURLOPT_PROXY, ’125.77.194.103:80′);$c = curl_exec($cUrl);curl_close($cUrl);echo $c; 输出： 1234&gt; HTTP_CLIENT_IP: &gt; HTTP_X_FORWARDED_FOR: &gt; REMOTE_ADDR:125.77.194.103 &gt; $\\_SERVER\\[‘REMOTE\\_ADDR’\\]:125.77.194.103 伪造IP来源对于php来说是很简单的一件事情，我们只要利用了php curl 即可实现伪造IP来源哦，IP地址你可以随便写哦。 实例代码如下 1234567$ch = curl_init();curl_setopt($ch, CURLOPT_URL, “[http://localhost/2.php](http://localhost/2.php)”);curl_setopt($ch, CURLOPT_HTTPHEADER, array(‘X-FORWARDED-FOR:8.8.8.8’, ‘CLIENT-IP:8.8.8.8’));//IPcurl_setopt($ch, CURLOPT_REFERER, “[http://www.hzhuti.com/](http://www.hzhuti.com/) “); //来路curl_setopt($ch, CURLOPT_HEADER, 1);$out = curl_exec($ch);curl_close($ch); 2.php代码： 代码如下 12345678910111213function getClientIp() &#123;if (!empty($_SERVER[“HTTP_CLIENT_IP”]))$ip = $_SERVER[“HTTP_CLIENT_IP”];else if (!empty($_SERVER[“HTTP_X_FORWARDED_FOR”]))$ip = $_SERVER[“HTTP_X_FORWARDED_FOR”];else if (!empty($_SERVER[“REMOTE_ADDR”]))$ip = $_SERVER[“REMOTE_ADDR”];else$ip = “err”;return $ip;&#125;echo “IP: ” . getClientIp() . “”;echo “referer: ” . $_SERVER[“HTTP_REFERER”]; 用1.php 请求 2.php，输出结果： IP：8.8.8.8 referer:http://www.hzhuti.com 伪造成功，这是不是给采集的朋友提供了很好的换IP的方案！！当然防被刷的朋友也要注意了 PHP中的CURL函数库（Client URL Library Function） curl_close — 关闭一个curl会话curl_copy_handle — 拷贝一个curl连接资源的所有内容和参数curl_errno — 返回一个包含当前会话错误信息的数字编号curl_error — 返回一个包含当前会话错误信息的字符串curl_exec — 执行一个curl会话curl_getinfo — 获取一个curl连接资源句柄的信息curl_init — 初始化一个curl会话curl_multi_add_handle — 向curl批处理会话中添加单独的curl句柄资源curl_multi_close — 关闭一个批处理句柄资源curl_multi_exec — 解析一个curl批处理句柄curl_multi_getcontent — 返回获取的输出的文本流curl_multi_info_read — 获取当前解析的curl的相关传输信息curl_multi_init — 初始化一个curl批处理句柄资源curl_multi_remove_handle — 移除curl批处理句柄资源中的某个句柄资源curl_multi_select — Get all the sockets associated with the cURL extension, which can then be “selected”curl_setopt_array — 以数组的形式为一个curl设置会话参数curl_setopt — 为一个curl设置会话参数curl_version — 获取curl相关的版本信息 curl_init()函数的作用初始化一个curl会话，curl_init()函数唯一的一个参数是可选的，表示一个url地址。curl_exec()函数的作用是执行一个curl会话，唯一的参数是curl_init()函数返回的句柄。curl_close()函数的作用是关闭一个curl会话，唯一的参数是curl_init()函数返回的句柄。 相关阅读我粗略列举6种PHP业内、国际各大开源系统获取用户真实IP的案例（包括Magento Zencart Zend Framework Yii…国内的就不提了吧！通杀！）： PHP获取用户真实IP方法1： 123456789101112131415161718&amp;lt;?phpfunctionGetIP()&#123;if(!empty($\\_SERVER\\[\"HTTP\\_CLIENT_IP\"\\]))&#123; $cip= $\\_SERVER\\[\"HTTP\\_CLIENT_IP\"\\];&#125;elseif(!empty($\\_SERVER\\[\"HTTP\\_X\\_FORWARDED\\_FOR\"\\]))&#123; $cip= $\\_SERVER\\[\"HTTP\\_X\\_FORWARDED\\_FOR\"\\];&#125;elseif(!empty($\\_SERVER\\[\"REMOTE\\_ADDR\"\\]))&#123; $cip= $\\_SERVER\\[\"REMOTE\\_ADDR\"\\];&#125;else&#123; $cip= \"无法获取！\";&#125;return$cip;&#125;echoGetIP();?&gt; PHP获取用户真实IP方法2： 12345678910111213141516171819202122232425&amp;lt;?phperror\\_reporting(E\\_ERROR | E\\_WARNING | E\\_PARSE);if($HTTP\\_SERVER\\_VARS\\[\"HTTP\\_X\\_FORWARDED_FOR\"\\])&#123;$ip= $HTTP\\_SERVER\\_VARS\\[\"HTTP\\_X\\_FORWARDED_FOR\"\\];&#125;elseif($HTTP\\_SERVER\\_VARS\\[\"HTTP\\_CLIENT\\_IP\"\\])&#123;$ip= $HTTP\\_SERVER\\_VARS\\[\"HTTP\\_CLIENT\\_IP\"\\];&#125;elseif($HTTP\\_SERVER\\_VARS\\[\"REMOTE_ADDR\"\\])&#123;$ip= $HTTP\\_SERVER\\_VARS\\[\"REMOTE_ADDR\"\\];&#125;elseif(getenv(\"HTTP\\_X\\_FORWARDED_FOR\"))&#123;$ip= getenv(\"HTTP\\_X\\_FORWARDED_FOR\");&#125;elseif(getenv(\"HTTP\\_CLIENT\\_IP\"))&#123;$ip= getenv(\"HTTP\\_CLIENT\\_IP\");&#125;elseif(getenv(\"REMOTE_ADDR\"))&#123;$ip= getenv(\"REMOTE_ADDR\");&#125;else&#123;$ip= \"Unknown\";&#125;echo$ip;?&gt; PHP获取用户真实IP方法3： 1234&amp;lt;?php$iipp= $\\_SERVER\\[\"REMOTE\\_ADDR\"\\];echo$iipp ;?&gt; PHP获取用户真实IP方法4： 12345&amp;lt;?php$user\\_IP= ($\\_SERVER\\[\"HTTP\\_VIA\"\\]) ? $\\_SERVER\\[\"HTTP\\_X\\_FORWARDED\\_FOR\"\\] : $\\_SERVER\\[\"REMOTE_ADDR\"\\];$user\\_IP= ($user\\_IP) ? $user\\_IP: $\\_SERVER\\[\"REMOTE_ADDR\"\\];echo$user_IP?&gt; PHP获取用户真实IP方法5： 1234567891011121314151617181920212223&amp;lt;?phpfunctionget\\_real\\_ip()&#123;$ip=false;if(!empty($\\_SERVER\\[\"HTTP\\_CLIENT_IP\"\\]))&#123; $ip= $\\_SERVER\\[\"HTTP\\_CLIENT_IP\"\\];&#125;if(!empty($\\_SERVER\\['HTTP\\_X\\_FORWARDED\\_FOR'\\]))&#123; $ips= explode(\", \",$\\_SERVER\\['HTTP\\_X\\_FORWARDED\\_FOR'\\]); if($ip)&#123; array_unshift($ips,$ip);$ip= FALSE; &#125; for($i= 0; $i&lt; count($ips);$i++)&#123; if(!eregi(\"^(10|172\\\\.16|192\\\\.168)\\\\.\",$ips\\[$i\\]))&#123; $ip= $ips\\[$i\\]; break; &#125; &#125;&#125;return($ip? $ip: $\\_SERVER\\['REMOTE\\_ADDR'\\]);&#125;echoget\\_real\\_ip();?&gt; PHP获取用户真实IP方法6： 123456789101112131415&amp;lt;?phpif(getenv('HTTP\\_CLIENT\\_IP'))&#123;$onlineip= getenv('HTTP\\_CLIENT\\_IP');&#125;elseif(getenv('HTTP\\_X\\_FORWARDED_FOR'))&#123;$onlineip= getenv('HTTP\\_X\\_FORWARDED_FOR');&#125;elseif(getenv('REMOTE_ADDR'))&#123;$onlineip= getenv('REMOTE_ADDR');&#125;else&#123;$onlineip= $HTTP\\_SERVER\\_VARS\\['REMOTE_ADDR'\\];&#125;echo$onlineip;?&gt; 获取用户真实IP原理：客官看完了业界常用的获取用户真实IP方法后，发现有个共同规律，主要核心就是 HTTP_CLIENT_IP HTTP_X_FORWARDED_FOR REMOTE_ADDR 不同的演变，只是代码兼容性罢了！ 如何模拟用户真实IP？问：如果可以伪造模拟 HTTP_CLIENT_IP，伪造模拟 HTTP_X_FORWARDED_FOR，伪造模拟 REMOTE_ADDR，不就可以达到追踪不到用户真实IP的目的了么？ 答：楼上理解完全正确！如果做到这样完全可以通杀99%的获取用户真实IP，以用户IP为标识的系统！ 如何模拟 HTTP_CLIENT_IP？HTTP_CLIENT_IP 可以模拟么？伪装 HTTP_CLIENT_IP！ 123curl\\_setopt($curl, CURLOPT\\_HTTPHEADER, array( &apos;Client\\_Ip: &apos;.mt\\_rand(0, 255).&apos;.&apos;.mt\\_rand(0, 255).&apos;.&apos;.mt\\_rand(0, 255).&apos;.&apos;.mt_rand(0, 255),));//优点：伪造成本低，通杀90%系统 如何模拟 HTTP_X_FORWARDED_FOR？HTTP_X_FORWARDED_FOR 可以模拟么？伪装 HTTP_X_FORWARDED_FOR！ 123curl\\_setopt($curl, CURLOPT\\_HTTPHEADER, array( &apos;X-Forwarded-For: &apos;.mt\\_rand(0, 255).&apos;.&apos;.mt\\_rand(0, 255).&apos;.&apos;.mt\\_rand(0, 255).&apos;.&apos;.mt\\_rand(0, 255),));//优点：伪造成本低，通杀90%系统 如何模拟 REMOTE_ADDR？REMOTE_ADDR 可以模拟么？伪装 REMOTE_ADDR！ 123curl\\_setopt($curl, CURLOPT\\_PROXYTYPE, CURLPROXY_HTTP);curl\\_setopt($curl, CURLOPT\\_PROXY, &apos;1.1.1.1:8080&apos;);//自行百度获得普匿代理IP即可，高匿代理IP更佳！//优点：通杀100%系统","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"代理","slug":"代理","permalink":"https://hero.triple.net.cn/tags/代理/"}]},{"title":"php发送get、post请求的6种方法简明总结","slug":"php-e5-8f-91-e9-80-81get-e3-80-81post-e8-af-b7-e6-b1-82-e7-9a-846-e7-a7-8d-e6-96-b9-e6-b3-95-e7-ae-80-e6-98-8e-e6-80-bb-e7-bb-93","date":"2018-04-28T08:16:50.000Z","updated":"2018-12-12T09:22:01.198Z","comments":false,"path":"2018/04/28/php-e5-8f-91-e9-80-81get-e3-80-81post-e8-af-b7-e6-b1-82-e7-9a-846-e7-a7-8d-e6-96-b9-e6-b3-95-e7-ae-80-e6-98-8e-e6-80-bb-e7-bb-93/","link":"","permalink":"https://hero.triple.net.cn/2018/04/28/php-e5-8f-91-e9-80-81get-e3-80-81post-e8-af-b7-e6-b1-82-e7-9a-846-e7-a7-8d-e6-96-b9-e6-b3-95-e7-ae-80-e6-98-8e-e6-80-bb-e7-bb-93/","excerpt":"","text":"方法1: 用file_get_contents 以get方式获取内容： &lt;?php $url=&apos;http://www.jb51.net/&apos;; $html = file_get_contents($url); echo $html; ?&gt; 方法2: 用fopen打开url, 以get方式获取内容： &lt;?php $fp = fopen($url, ‘r&apos;); stream_get_meta_data($fp); while(!feof($fp)) { $result .= fgets($fp, 1024); } echo “url body: $result”; fclose($fp); ?&gt; 方法3：用file_get_contents函数,以post方式获取url &lt;?php $data = array (‘foo&apos; =&gt; ‘bar&apos;); $data = http_build_query($data); $opts = array ( ‘http&apos; =&gt; array ( ‘method&apos; =&gt; ‘POST&apos;, ‘header&apos;=&gt; “Content-type: application/x-www-form-urlencodedrn” . “Content-Length: ” . strlen($data) . “rn”, ‘content&apos; =&gt; $data ) ); $context = stream_context_create($opts); $html = file_get_contents(‘http://localhost/e/admin/test.html&apos;, false, $context); echo $html; ?&gt; 方法4：用fsockopen函数打开url，以get方式获取完整的数据，包括header和body,fsockopen需要 PHP.ini 中 allow_url_fopen 选项开启 &lt;?php function get_url ($url,$cookie=false) { $url = parse_url($url); $query = $url[path].”?”.$url[query]; echo “Query:”.$query; $fp = fsockopen( $url[host], $url[port]?$url[port]:80 , $errno, $errstr, 30); if (!$fp) { return false; } else { $request = “GET $query HTTP/1.1rn”; $request .= “Host: $url[host]rn”; $request .= “Connection: Closern”; if($cookie) $request.=”Cookie: $cookien”; $request.=”rn”; fwrite($fp,$request); while(!@feof($fp)) { $result .= @fgets($fp, 1024); } fclose($fp); return $result; } } //获取url的html部分，去掉header function GetUrlHTML($url,$cookie=false) { $rowdata = get_url($url,$cookie); if($rowdata) { $body= stristr($rowdata,”rnrn”); $body=substr($body,4,strlen($body)); return $body; } return false; } ?&gt; 方法5：用fsockopen函数打开url，以POST方式获取完整的数据，包括header和body &lt;?php function HTTP_Post($URL,$data,$cookie, $referrer=”&quot;) { // parsing the given URL $URL_Info=parse_url($URL); // Building referrer if($referrer==”&quot;) // if not given use this script as referrer $referrer=”111″; // making string from $data foreach($data as $key=&gt;$value) $values[]=”$key=”.urlencode($value); $data_string=implode(“&amp;”,$values); // Find out which port is needed – if not given use standard (=80) if(!isset($URL_Info[&quot;port&quot;])) $URL_Info[&quot;port&quot;]=80; // building POST-request: $request.=”POST “.$URL_Info[&quot;path&quot;].” HTTP/1.1n”; $request.=”Host: “.$URL_Info[&quot;host&quot;].”n”; $request.=”Referer: $referern”; $request.=”Content-type: application/x-www-form-urlencodedn”; $request.=”Content-length: “.strlen($data_string).”n”; $request.=”Connection: closen”; $request.=”Cookie: $cookien”; $request.=”n”; $request.=$data_string.”n”; $fp = fsockopen($URL_Info[&quot;host&quot;],$URL_Info[&quot;port&quot;]); fputs($fp, $request); while(!feof($fp)) { $result .= fgets($fp, 1024); } fclose($fp); return $result; } ?&gt; 方法6:使用curl库，使用curl库之前，可能需要查看一下php.ini是否已经打开了curl扩展 &lt;?php $ch = curl_init(); $timeout = 5; curl_setopt ($ch, CURLOPT_URL, ‘http://www.jb51.net/&apos;); curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout); $file_contents = curl_exec($ch); curl_close($ch); echo $file_contents; ?&gt; 好了，关于 php 发送 get/post 请求的方法就介绍那么多。 文章来源： http://www.jb51.net/article/51974.htm","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"post","slug":"post","permalink":"https://hero.triple.net.cn/tags/post/"},{"name":"get","slug":"get","permalink":"https://hero.triple.net.cn/tags/get/"}]},{"title":"ownCloud 备份","slug":"owncloud-e5-a4-87-e4-bb-bd","date":"2018-04-20T01:46:07.000Z","updated":"2018-12-12T09:21:19.275Z","comments":false,"path":"2018/04/20/owncloud-e5-a4-87-e4-bb-bd/","link":"","permalink":"https://hero.triple.net.cn/2018/04/20/owncloud-e5-a4-87-e4-bb-bd/","excerpt":"","text":"以下文档来自官方，经Google翻译后： 备份ownCloud服务器时，需要复制以下四项内容： 你的 config/ 目录。 你的 data/ 目录。 您的 ownCloud 数据库。 您的自定义主题文件，如果有的话。（参见Theming ownCloud） 当您从我们的安装您ownCloud服务器开放编译服务包（或发行包，我们不建议）不要备份ownCloud服务器上的文件，这是在你的其他文件 owncloud/ 目录，例如 ore/ ， 3rdparty/ ， apps/ ， lib/ ，和所有其余的ownCloud文件。如果您从备份中还原这些文件，它们可能与当前的软件包版本不同步，并且会导致代码完整性检查失败。这也可能导致其他错误，如白页。 当你从源代码tarball中安装ownCloud时，这不会是一个问题，除了ownCloud数据库之外，你可以安全地备份整个ownCloud安装。数据库不能被复制，但您必须使用数据库工具来进行正确的数据库转储。 要从备份恢复ownCloud安装，请参阅恢复ownCloud。 备份配置/和数据/目录只需将您的复制config/和data/文件夹到您 ownCloud 环境以外的地方。这个例子rsync用来将两个目录复制到/oc-backupdir： rsync -Aax config data /oc-backupdir/ 有很多方法可以备份普通文件，你可以使用任何你习惯的方法。 备份数据库您不能只复制数据库，但必须使用数据库工具来进行正确的数据库转储。 MySQL的/ MariaDB的推荐的数据库引擎是MySQL或MariaDB，这是推荐的MySQL替代品。备份MySQL / MariaDB： mysqldump --single-transaction -h [server] -u [username] -p [password] [db_name] &gt; owncloud-dbbackup_`date +&quot;%Y%m%d&quot;`.bak 示例： mysqldump --single-transaction -h localhost -u username -p password owncloud &gt; owncloud-dbbackup_`date +&quot;%Y%m%d&quot;`.bak SQLite的sqlite3 data / owncloud.db .dump&gt; owncloud-dbbackup_`date +“％Y％m％d”`.bak PostgreSQL的PGPASSWORD=&quot;password&quot; pg_dump [db_name] -h [server] -U [username] -f owncloud-dbbackup_`date +&quot;%Y%m%d&quot;`.bak 启用加密时从备份中还原文件如果您需要从备份中恢复文件，这些文件是在启用加密时进行备份的，那么请执行以下操作。 从ownCloud起，至少v8.2.7版本才有效。此外，这还没有官方支持。ownCloud官方支持恢复完整备份或者不恢复 —— 不恢复其个别部分。 从备份还原文件。 从备份还原文件的加密密钥。 运行 occ files:scan; 这使扫描器找到它。请注意，在数据库中，它将（1）将“大小”设置为加密大小，这是错误的（并且更大），以及（2）“加密”标志将被设置为0。occ files:scan 将DB中的“encrypted”标志更新为 1 下的 所有 _文件_files/path，但不包括目录。将该标志设置为1将告诉加密应用程序文件已加密并需要处理。 无需为“files_versions”或“files_trashbin”中的文件更新加密标志，因为 OCC files:scan 不会扫描或找到这些文件。 以用户身份下载文件一次; 该文件的大小将自动更正。 这个过程可能不适用于所有环境。如果它不适合你，你可能需要运行一个OCC命令来进行扫描。但是，这将需要用户的密码或恢复密钥。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"owncloud","slug":"owncloud","permalink":"https://hero.triple.net.cn/tags/owncloud/"},{"name":"backup","slug":"backup","permalink":"https://hero.triple.net.cn/tags/backup/"},{"name":"备份","slug":"备份","permalink":"https://hero.triple.net.cn/tags/备份/"}]},{"title":"Debian下使用iptables防火墙","slug":"debian-e4-b8-8b-e4-bd-bf-e7-94-a8-iptables-e9-98-b2-e7-81-ab-e5-a2-99","date":"2018-04-19T10:18:28.000Z","updated":"2018-12-12T08:59:32.162Z","comments":true,"path":"2018/04/19/debian-e4-b8-8b-e4-bd-bf-e7-94-a8-iptables-e9-98-b2-e7-81-ab-e5-a2-99/","link":"","permalink":"https://hero.triple.net.cn/2018/04/19/debian-e4-b8-8b-e4-bd-bf-e7-94-a8-iptables-e9-98-b2-e7-81-ab-e5-a2-99/","excerpt":"","text":"Iptables 是建立在 netfilter 架构基础上的一个包过滤管理工具，最主要的作用是用来做防火墙或透明代理。Iptables 从 ipchains 发展而来，它的功能更为强大。Iptables 提供以下三种功能：包过滤、NAT（网络地址转换）和通用的 pre-route packet mangling。 在之前的文章中我对Iptables 进行了概念和原理上的介绍：Iptables介绍及命令，但是在实际应用中，很多实用的命令会反复用到，所以在这里对这些命令进行一下总结，方便大家查看。 安装iptables防火墙如果没有安装iptables需要先安装，CentOS执行： yum install iptables Debian/Ubuntu执行： apt-get install iptables PS：一般默认的VPS Linux发行版都会带有iptables。 iptables规则的查看与删除 查看iptables规则命令后面的line-number为显示行号（将规则一则一则输出，并显示行号），可选，方便后文的删除指令。 iptables -L -n --line-numbers 清除已有iptables规则iptables -F iptables -X iptables -Z 删除某iptables规则例如，删除第12行的规则，行号可由之前的命令查看 iptables -D INPUT 12 常用的iptables规则开放指定的端口#允许本机访问 iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT # 允许已建立的或相关连的通行 iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT #允许所有本机向外的访问 iptables -A OUTPUT -j ACCEPT # 允许访问22端口 iptables -A INPUT -p tcp --dport 22 -j ACCEPT #允许访问80端口 iptables -A INPUT -p tcp --dport 80 -j ACCEPT #允许FTP服务的21和20端口 iptables -A INPUT -p tcp --dport 21 -j ACCEPT iptables -A INPUT -p tcp --dport 20 -j ACCEPT #如果有其他端口的话，规则也类似，稍微修改上述语句就行 #禁止其他未允许的规则访问 iptables -A INPUT -j REJECT iptables -A FORWARD -j REJECT 屏蔽IP有些IP如果你不想被VPS访问的到（原因很多，例如搜索引擎蜘蛛，DOS攻击者之类），可以用iptables屏蔽这些IP的访问： #如果只是想屏蔽IP的话“3、开放指定的端口”可以直接跳过。 #屏蔽单个IP的命令是 iptables -I INPUT -s 123.45.6.7 -j DROP #封整个段即从123.0.0.1到123.255.255.254的命令 iptables -I INPUT -s 123.0.0.0/8 -j DROP #封IP段即从123.45.0.1到123.45.255.254的命令 iptables -I INPUT -s 124.45.0.0/16 -j DROP #封IP段即从123.45.6.1到123.45.6.254的命令是 iptables -I INPUT -s 123.45.6.0/24 -j DROP 保存iptables规则CentOS上可以执行： service iptables save 一般在安装iptables完成后，开机启动会自动设置成功，但在个别CentOS系统上，貌似还有些问题，可以使用如下命令手动设置: chkconfig --level 345 iptables on 另外更需要注意的是Debian/Ubuntu上iptables是不会保存规则的。 需要按如下步骤进行，让网卡关闭是保存iptables规则，启动时加载iptables规则： 创建/etc/network/if-post-down.d/iptables 文件，添加如下内容： #!/bin/bash iptables-save &gt; /etc/iptables.rules 添加执行权限。 chmod +x /etc/network/if-post-down.d/iptables 创建/etc/network/if-pre-up.d/iptables 文件，添加如下内容： #!/bin/bash iptables-restore &lt; /etc/iptables.rules 添加执行权限 chmod +x /etc/network/if-pre-up.d/iptables 本文出自 TENNFY博客，转载时请注明出处及相应链接。 本文永久链接: https://www.tennfy.com/2552.html","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"iptables","slug":"iptables","permalink":"https://hero.triple.net.cn/tags/iptables/"},{"name":"防火墙","slug":"防火墙","permalink":"https://hero.triple.net.cn/tags/防火墙/"}]},{"title":"Linux下安装Eclipse","slug":"linux-e4-b8-8b-e5-ae-89-e8-a3-85eclipse","date":"2018-03-28T10:46:23.000Z","updated":"2018-12-12T09:20:50.215Z","comments":true,"path":"2018/03/28/linux-e4-b8-8b-e5-ae-89-e8-a3-85eclipse/","link":"","permalink":"https://hero.triple.net.cn/2018/03/28/linux-e4-b8-8b-e5-ae-89-e8-a3-85eclipse/","excerpt":"","text":"Java环境若要在Linux下面安装Oracle 的Java， 参见本博另一篇文章：Linux 下面配置 Oracle JDK 下载：官方地址： https://www.eclipse.org/downloads/eclipse-packages/?osType=linux&amp;release=undefined 国内维护： happiz.msla.qiniu.cdn.msla.top/eclipse-java-oxygen-3-linux-gtk-x86_64.tar.gz 安装# 以下操作均已root账户执行，或者具有sudo权限的用户按需要在命令前面加 sudo # 将文件复制到安装路径下/usr/local/，并解压，最后执行： cp eclipse-java-luna-SR2-linux-gtk-x86_64.tar.gz /usr/local/ # 解压 tar -zxvf eclipse-java-luna-SR2-linux-gtk-x86_64.tar.gz cd eclipse # 命令行中启动Eclipse ./eclipse 制作快捷方式# 以下操作均以root账户执行，或者具有sudo权限的用户按需要在命令前面加 sudo vi Eclipse.desktop # 在文件中输入下面的内容 [Desktop Entry] Name=Eclipse Exec=/usr/local/eclipse/eclipse -desktop Icon=/usr/local/eclipse/plugins/org.eclipse.platform_xxxx.xxx.xxx/eclipse64.png Type=Application Comment=Run eclipse Path= Terminal=false StartupNotify=false # 复制到桌面中 mv Eclipse.desktop /home/user123/Desktop/ 后续有可能会提示“Eclipse 没有标记为可信任” 的问题，右键查看时，已设定为可执行。 解决方法： 使用root帐号将这个文件所有者设置为执行的用户： su chown user123:user123 Eclipse.desktop","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"eclipse","slug":"eclipse","permalink":"https://hero.triple.net.cn/tags/eclipse/"}]},{"title":"作为程序员的你，何时意识到数学的重要性?","slug":"important-math-in-program","date":"2018-02-28T10:46:02.000Z","updated":"2018-12-18T04:25:14.292Z","comments":true,"path":"2018/02/28/important-math-in-program/","link":"","permalink":"https://hero.triple.net.cn/2018/02/28/important-math-in-program/","excerpt":"","text":"我印象很深的一个例子，是当年学WordPress的时候，接触到一个函数 wp_nonce_tick 有时候HTTP请求需要在特定周期过后失效，也就是时间敏感的请求签名，这是后台自我保护的一种机制。 怎么样让一个请求在一定时间后过期呢？ 按照web后台程序员习惯的方法，是在数据库或者session里存一个值，相应请求到达后端的时候就去检查这个值是否还匹配。 但是只是存放一个值并不能关联到时间，所有就要设计相应的机制去 poll/update 这个值。如果这样搞，开销会很大 Nonce的基本原理就是一个算式： 1234 ceil(time() / ( life / 2 ))``` 你有兴趣可以打开浏览器控制台用Javascript来试试，比如一分钟内有效期的Nonce Math.ceil(Math.ceil(new Date().getTime() / 1000) / (60 / 2)) ` 用这个值来给请求签名，服务器端只需要计算一个同周期的Nonce，看看两者是否相等就可以判断请求是否仍然有效。 不用存什么中间值，不用poll，只是简单的数学规律，谈不上多高深，但你知道了这个工具以后，会觉得太强大r、太美、数学家真牛逼 加密学上有很多让不懂数学的人，懂了以后觉得毛骨悚然的例子，你可以买本书来看看，我数学差，就不混充很懂了。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"program","slug":"program","permalink":"https://hero.triple.net.cn/tags/program/"}]},{"title":"同时使用有线网上内网、无线网上外网","slug":"e5-90-8c-e6-97-b6-e4-bd-bf-e7-94-a8-e6-9c-89-e7-ba-bf-e7-bd-91-e4-b8-8a-e5-86-85-e7-bd-91-e3-80-81-e6-97-a0-e7-ba-bf-e7-bd-91-e4-b8-8a-e5-a4-96-e7-bd-91","date":"2018-02-14T03:37:01.000Z","updated":"2018-12-12T09:08:58.743Z","comments":false,"path":"2018/02/14/e5-90-8c-e6-97-b6-e4-bd-bf-e7-94-a8-e6-9c-89-e7-ba-bf-e7-bd-91-e4-b8-8a-e5-86-85-e7-bd-91-e3-80-81-e6-97-a0-e7-ba-bf-e7-bd-91-e4-b8-8a-e5-a4-96-e7-bd-91/","link":"","permalink":"https://hero.triple.net.cn/2018/02/14/e5-90-8c-e6-97-b6-e4-bd-bf-e7-94-a8-e6-9c-89-e7-ba-bf-e7-bd-91-e4-b8-8a-e5-86-85-e7-bd-91-e3-80-81-e6-97-a0-e7-ba-bf-e7-bd-91-e4-b8-8a-e5-a4-96-e7-bd-91/","excerpt":"","text":"方法一、利用有线访问局域网数据库等，用无线网络访问外网，这里提供一种方法可以实现，可编写bat文件，并在cmd中执行： route delete 0.0.0.0 route add 0.0.0.0 mask 0.0.0.0 172.20.1.254 route add 172.20.36.0 mask 255.255.255.0 172.20.36.254 解释一下： 其中针对上述情况，实际应用中，遇到windows 7与windows xp两者不一样，windows 7中，除了上述命令外，在TCP/IP配置中，无线外网设置为自动获取，内网配置为内网IP，子网掩码，网关。 widows xp中，除了上述命令外，在TCP/IP配置中，无线设置为手动输入IP，子网掩码，且网关留空，不填，内网配置为内网IP，子网掩码，网关。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768### 方法二、 例1 我的笔记本用无线 网卡联互联网，同时局域网使用的是有线 连接（网段 132.147.X.X，不提供接入Internet服务），同时提供无线 网络连接供客户使用（网段192.168.1.X，可连接互联网）。 如果同时连接有线 网卡和 无线 网卡，因为有线 网卡的优先级较高，故仅有线 局域网能正常工作，无线 网卡可连接但却无法传送数据。要改变这种情况，需要对笔记本本地路由设置做出修改：访问132.147.X.X的请求均有有线 网卡处理，访问其它网络的则由无线 网卡处理。 具体设置步骤如下： 1. 设置无线 网卡为默认路由网关：无线 网络连接属性—Internet协议（TCP/IP）-属性-高级，手动输入无线 路由网关，我这里的是132.147.X.X，跃点数为“1”， 是最高优先级。到了这一步，如果有线 连接，无线 连接同时存在的话，所有的数据都是经由无线 网卡处理的。 2. 设置排除信息，把132.147.X.X路段的网址连接请求交由优先网卡处理：在命令行输入以下命令 route -p add 132.147.0.0 mask 255.255.0.0 132.147.160.1 其中132.147.0.0是本地局域网网段，132.147.160.1是本机所处子网段的默认网关，需要根据具体情况填写。经过以上设置，在访问本地网段的时候均由有线 网卡处理，访问互联网的时候可交由无线 网卡处理，就不会产生冲突了。**注意****: ****这里的****172.16.x.x ****和****192.168.1.X ****和你的局域网环境有关**,可以命令行下ipconfig /all 查看例2### 局域网有线连接（网段172.16.X.X，不提供接入internet服务），WIFI连接（网段192.168.1.X，可连接互联网)。如 果同时连接有线网卡和无线网卡，因为有线网卡的优先级较高，故仅有线局域网能正常工作，无线网卡可连接但却无法传送数据。要改变这种情况，需要对笔记本本 地路由设置做出修改：访问172.16.X.X的请求均有有线网卡处理，访问其它网络的则由无线网卡处理。设置步骤如下： 1》 设置无线网卡为默认路由网关：无线网络连接属性—Internet协议(TCP/IP)-属性-高级，手动输入无线路由网关，我这里的是 192.168.1.1，跃点数为“1”，是最高优先级。到了这一步，如果有线连接，无线连接同时存在的话，所有的数据都是经由无线网卡处理的。 2》设置排除信息，把172.16.X.X路段的网址连接请求交由优先网卡处理：在命令行输入以下命令 route -p add 172.16.0.0 mask 255.255.0.0 172.16.6.1 其中172.16.0.0是本地局域网网段，172.16.6.1是本机所处子网段的默认网关，需要根据具体情况填写。 经过以上设置，在访问本地网段的时候均由有线网卡处理，访问互联网的时候可交由无线网卡处理，就不会产生冲突了。### 其它信息(来自网络)不少公司的网管试图解决双网卡问题，下面我就给大家详细的讲解一下双网卡同时使用的方法，这样即可保障内网的安全，又能解决电脑访问外网的问题，一举两得。希望大家喜欢。首先你的机器需要有两块网卡，分别接到两台交换机上,internet地址：192.168.1.8，子网掩码：255.255.255.0，网关：192.168.1.1内部网地址：172.23.1.8，子网掩码：255.255.255.0，网关：172.23.1.1如果按正常的设置方法设置每块网卡的ip地址和网关，再cmd下使用route print查看时会看到Network Destination Netmask Gateway Interface Metric0.0.0.0 0.0.0.0 192.168.1.1 192.168.1.80.0.0.0 0.0.0.0 172.23.1.1 172.23.1.8即指向0.0.0.0的有两个网关，这样就会出现路由冲突，两个网络都不能访问。如何实现同时访问两个网络？那要用到route命令第一步：route delete 0.0.0.0 &quot;删除所有0.0.0.0的路由&quot;第二步：route add 0.0.0.0 mask 0.0.0.0 192.168.1.1 &quot;添加0.0.0.0网络路由&quot;这个是主要的,意思就是你可以上外网.第三步：route add 172.23.0.0 mask 255.0.0.0 172.23.1.1 &quot;添加172.23.0.0网络路由&quot;，注意mask为255.0.0.0 ，而不是255.255.255.0 ，这样内部的多网段才可用。这时就可以同时访问两个网络了，但碰到一个问题，使用上述命令添加的路由在系统重新启动后会自动丢失，怎样保存现有的路由表呢？route add -p 添加静态路由，即重启后，路由不会丢失。注意使用前要在tcp/ip设置里去掉接在企业内部网的网卡的网关------------------------------------------------------------------------------------------------一些单位将内网和外网分开了。痛苦啊，偶单位就是如此。boss当然是基于安全性考虑了，可是没有笔记本的怎么办？又要办公，有得上网。没办法，发扬DIY精神偷偷装一块网卡，让聊天与工作同在。让你的主机内外兼顾。这是我在网上找到的，谢谢作者了。方法如下： 1.设置其中接internet的网卡的网关为10.0.0.1，启用后就是默认网关 --注：这是对应外网的网卡，按照你们单位外网的ip分配情况，在TCP/IP属性中配置好 ip、掩码、DNS2.将连接单位内部网的网卡IP配好后，设网关设置为空（即不设网关），启用后，此时内网无法通过网关路由3.进入CMD，运行：route -p add 192.0.0.0 mask 255.0.0.0 192.168.0.1 metric 1--注：意思是将192*的IP包的路由网关设为192.168.0.1 ，-P 参数代表永久写入路由表，建议先不加此参数，实践通过后在写上去4. OK！同时启用两个网卡，两个网关可以同时起作用了，两个子网也可以同时访问了，关机重启后也不用重设！``","categories":[{"name":"互联网","slug":"互联网","permalink":"https://hero.triple.net.cn/categories/互联网/"}],"tags":[{"name":"wifi","slug":"wifi","permalink":"https://hero.triple.net.cn/tags/wifi/"},{"name":"网络","slug":"网络","permalink":"https://hero.triple.net.cn/tags/网络/"}]},{"title":"PHP 框架之争","slug":"php-e6-a1-86-e6-9e-b6-e4-b9-8b-e4-ba-89","date":"2018-02-06T02:53:07.000Z","updated":"2018-12-12T09:22:01.268Z","comments":true,"path":"2018/02/06/php-e6-a1-86-e6-9e-b6-e4-b9-8b-e4-ba-89/","link":"","permalink":"https://hero.triple.net.cn/2018/02/06/php-e6-a1-86-e6-9e-b6-e4-b9-8b-e4-ba-89/","excerpt":"","text":"原文来自V站，帖子在这里： https://www.v2ex.com/t/428592 有很多人做了我们没时间&amp;没能力做到的事情，减少了自己亲历亲为的代价，先表示感谢， 我把个人认为有用的copy下来： Yii2，Yaf，CI。大型用 Yii2，中小型 CI，要效率，Yaf。 天天说 Laravel 很重很重，但你有没有用过 Laravel 的精简版 Lumen ？ 以速度著称的 Lumen 都不知道要甩其他框架几条街，用做 API 和前后端分离的最佳框架之一。 当哪天你不想用 Lumen，还可以无痛升级到 Laravel —— Yii 增删查改不够方便（相比别的）； Laravel 乱七八糟的东西太多，增加不必要的折腾。谁简单实用就用谁吧，安全问题框架解决不了。 —— Laravel 在我看来有几点无法接受 1. 都说 Laravel 模仿 Rails,但是 Rails 的哲学里”约定优于配置”却没抄过来,起码路由没有. 没有自动路由,每加一个 action 就要去配置文件里写一次,简直恶心死了. 最恶心的是你接手别人项目时候,路由还有几种风格的,分析时在 html 或者 js 里找到个接口,接着想找 php 的具体实现,必须先去看路由的配置文件 2. 全局函数以及 Facade 众多语言 /框架都是先引入,再使用,到 Laravel 这里就不是了 从文档上下文来看,并没有显式引入某个函数 /类,为什么从天而降给了个函数 /类给我用,你到底还偷偷引入了多少东西? 3.文档 文档太简陋了,一堆细节没说,具体实现太绕,经常要看源码 4.view 层 PHP 本身就是个强大的模板语言,非要再往上加个模板引擎,这就算了 不能忍的是 view 文件的路径分隔居然是用”.”而不是”/“ 当出现了像 view(‘activities.index’)这样的代码,我要去找具体的 view 文件时,就要手工把”.”转换成”/“,然后在编辑器 /IDE 里跳过去 如果是 view(‘activities/index’)的话,我只需要复制 activities/index 出来,然后使用编辑器 /IDE 的任意文件跳转功能,瞬间就转过去了 如果你非要说装个插件就能解决的话,当我没说过这一条 5.性能 大部分 Laravel 的性能优化文章都是千篇一律,无非就是升 php7,开 opcache,关闭 debug,开路由 /配置缓存,生成 composer 安装的所有依赖的 class map 废话,这些基础谁不会 在没做上述优化之前,我压测 hello world 的结果,qps 只有 5~7 在做完上述这些之后,qps 到了 13~15,哇,性能是原来的 2 倍,开心吗 这个 qps,我按住 F5 都能把网站给刷爆 同样的环境下,也做了上述的优化后,CodeIgniter,Yii,ThinkPHP 这几个框架的 qps 都在 200~400 之间 别说加了 db 操作之后大家都差不多,不少页面能命中缓存的情况下,io 的耗时比 Laravel 的耗时都要低 6.其他 Laravel 自带的队列 去年帮别人改代码时碰到的,消息是经过 PHP 的序列化放进队列的,可改造性差 队列为空就退出进程,官方还教你用 supervisor 去守护,喵喵喵? 神经病一样的存在 Laravel 的诞生并没有解决太多的痛点,或者说他解决的问题在我这里根本就不痛,还带我来了更多的坑,换我在 PHP 框架上选型我也选 Yii Yii 文档丰富,细节到位,安全指南也够用,没那么多花哨的概念,代码规范又符合直觉,层次清晰,性能虽然没有常驻内存的框架好,但也够用,只需要专心处理业务就是 而且 PHP 不适合玩常驻内存,毕竟没有多少对 GC 的讨论,官方也没有什么指南给你去调优,因为本身设计就是请求完就销毁的 玩异步的话,除了 Swoole 框架有异步文件 IO 函数,其它框架都没有,除非自己用多线程模拟,否则一处阻塞处处阻塞,可选型方案太少,还不如换语言 —— 9 年前搞过 yii 还把 zend 项目无痛转成了 yii 现在它自带后台了吗 像 laravel voyager 现在鄙人再也不关注性能 只在乎开发速度 和现场的东西 —— yii2-starter-kit 自带后台, rest-api， 通一遍之后，开发很快 —— 我现在比较关注设计理念，工作用 CakePHP,自己写东西用 Symfony ；看过 laravel 与 yii，只能说 laravel 的优雅我没有 get 到 —— 我觉得框架选择，主要还是熟悉度，一个非常熟悉踩过很多坑的框架，和一个熟悉但是没怎么用过的框架，谁都知道选哪个吧，前者可以是 Yii 可以是 Laravel，取决于选择框架的人 —— CodeIgniter 刚工作时深度使用,当时那家公司用 2 台服务器撑起了千万级 PV 的业务 ThinkJS 作为个人 Node 项目的 api 接口 Web 框架看多了,会发现它们基本都是大同小异,无论是流程上还是功能上,到后面无非就是找一些符合自己理念 /哲学 /信仰的工具而已 还是多研究些架构更实在 —— Yii 相对于 Laraval，类似自助餐与方便面的关系，从健康（相对于方便面）、分量、口味、厌倦周期等角度来说，推荐 Yii，从就餐时间角度来说，推荐 Laraval ——","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"CodeIginter","slug":"CodeIginter","permalink":"https://hero.triple.net.cn/tags/CodeIginter/"},{"name":"symfony","slug":"symfony","permalink":"https://hero.triple.net.cn/tags/symfony/"},{"name":"laravel","slug":"laravel","permalink":"https://hero.triple.net.cn/tags/laravel/"},{"name":"框架","slug":"框架","permalink":"https://hero.triple.net.cn/tags/框架/"}]},{"title":"通过SQL累加数据","slug":"e9-80-9a-e8-bf-87sql-e7-b4-af-e5-8a-a0-e6-95-b0-e6-8d-ae","date":"2018-01-23T05:09:04.000Z","updated":"2018-12-12T09:13:43.669Z","comments":true,"path":"2018/01/23/e9-80-9a-e8-bf-87sql-e7-b4-af-e5-8a-a0-e6-95-b0-e6-8d-ae/","link":"","permalink":"https://hero.triple.net.cn/2018/01/23/e9-80-9a-e8-bf-87sql-e7-b4-af-e5-8a-a0-e6-95-b0-e6-8d-ae/","excerpt":"","text":"需求通过SQL累加数据。已知有列A（id），B（coin），C（direction）， 规则： 1. 当 c = 1 时，查询的结果， 新列D == B（coin），否则 新列E == B（coin） 2. 然后再根据C（direction）的值，使用相同的规则(#1)，累加B（coin），生成新列F 先看表结构： CREATE TABLE `test1` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `coin` int(11) NOT NULL, `direction` int(11) NOT NULL, PRIMARY KEY (`id`) ); -- 测试数据 INSERT INTO `test1` VALUES (&apos;1&apos;, &apos;1&apos;, &apos;1&apos;); INSERT INTO `test1` VALUES (&apos;2&apos;, &apos;22&apos;, &apos;0&apos;); INSERT INTO `test1` VALUES (&apos;3&apos;, &apos;33&apos;, &apos;1&apos;); INSERT INTO `test1` VALUES (&apos;4&apos;, &apos;4&apos;, &apos;0&apos;); INSERT INTO `test1` VALUES (&apos;5&apos;, &apos;4&apos;, &apos;1&apos;); INSERT INTO `test1` VALUES (&apos;6&apos;, &apos;99&apos;, &apos;0&apos;); INSERT INTO `test1` VALUES (&apos;7&apos;, &apos;7&apos;, &apos;0&apos;); INSERT INTO `test1` VALUES (&apos;8&apos;, &apos;8&apos;, &apos;0&apos;); INSERT INTO `test1` VALUES (&apos;9&apos;, &apos;23&apos;, &apos;1&apos;); INSERT INTO `test1` VALUES (&apos;10&apos;, &apos;543&apos;, &apos;0&apos;); --- 要实现的效果： : 也就是说： D=增加=B E=减少=B F=余额累加数 ---- 方案一SET @csum := 0; SELECT a.id, a.coin, a.direction AS &apos;B(direction)&apos;, ( CASE a.direction WHEN 1 THEN a.coin ELSE &apos; &apos; END ) AS D, ( CASE a.direction WHEN 0 THEN a.coin ELSE &apos; &apos; END ) AS &apos;E&apos;, ( @csum := @csum + ( a.coin * ( CASE a.direction WHEN 1 THEN 1 ELSE - 1 END ) ) ) AS &apos;F&apos; FROM test1 a GROUP BY a.id, a.coin, a.direction, D, E 方案二SELECT a.id, a.coin, a.direction AS &apos;B(direction)&apos;, ( CASE a.direction WHEN 1 THEN a.coin ELSE &apos; &apos; END ) AS D, ( CASE a.direction WHEN 0 THEN a.coin ELSE &apos; &apos; END ) AS &apos;E&apos;, ( ifnull( ( SELECT SUM(b.coin) FROM test1 b WHERE b.id &lt;= a.id AND b.direction = 1 ), 0 ) - ifnull( ( SELECT SUM(b.coin) FROM test1 b WHERE b.id &lt;= a.id AND b.direction = 0 ), 0 ) ) axxx FROM test1 a GROUP BY a.id, a.coin, a.direction, D, E","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"sql","slug":"sql","permalink":"https://hero.triple.net.cn/tags/sql/"},{"name":"T型累加","slug":"T型累加","permalink":"https://hero.triple.net.cn/tags/T型累加/"},{"name":"累加","slug":"累加","permalink":"https://hero.triple.net.cn/tags/累加/"}]},{"title":"八年phper的高级工程师面试之路","slug":"e5-85-ab-e5-b9-b4phper-e7-9a-84-e9-ab-98-e7-ba-a7-e5-b7-a5-e7-a8-8b-e5-b8-88-e9-9d-a2-e8-af-95-e4-b9-8b-e8-b7-af","date":"2018-01-16T04:14:16.000Z","updated":"2018-12-12T09:08:58.705Z","comments":true,"path":"2018/01/16/e5-85-ab-e5-b9-b4phper-e7-9a-84-e9-ab-98-e7-ba-a7-e5-b7-a5-e7-a8-8b-e5-b8-88-e9-9d-a2-e8-af-95-e4-b9-8b-e8-b7-af/","link":"","permalink":"https://hero.triple.net.cn/2018/01/16/e5-85-ab-e5-b9-b4phper-e7-9a-84-e9-ab-98-e7-ba-a7-e5-b7-a5-e7-a8-8b-e5-b8-88-e9-9d-a2-e8-af-95-e4-b9-8b-e8-b7-af/","excerpt":"","text":"八年phper的高级工程师面试之路这是一篇反面教材，希望也能引起部分程序员的警惕。 最近半个月时间，经过几次面试，差不多已经对自己有了定位————距离腾讯T3岗位还是有一点距离。 因为在一家小公司呆的习惯了（6年），公司没有人在技术层面超过我，作为技术核心，感觉自己很牛，活在一个小圈子里面，几乎不会主动去了解新技术，甚至对php以及js本身都不能算精通。 所以变故出现的时候，我才发现自己的技术脱节有多厉害，虽然之前的面试并没有做专门的准备，但是与6年前找工作的情形相比，差距非常的大。 下面是我整理的一部分遇到的面试题，我尽量用我所知道的知识来进行陈述，肯定会有很多误解以及遗漏，希望大家能够指正。 公司1： 1、mysql_real_escape_string mysql_escape_string有什么本质的区别，有什么用处，为什么被弃用？ 答：mysql_real_escape_string需要预先连接数据库，并可在第二个参数传入数据库连接（不填则使用上一个连接） 两者都是对数据库插入数据进行转义，但是mysql_real_escape_string转义时，会考虑数据库连接的字符集。 它们的用处都是用来能让数据正常插入到数据库中，并防止sql注入，但是并不能做到100%防止sql注入。 再问：为什么不能100%防止？ 答；因为客户端编码以及服务器端编码不同，可能产生注入问题，但是其实这种场景不多见。 继续答：被弃用的原因是官方不再建议使用mysql_xx的数据库操作方式，建议使用pdo和mysqli，因为不管从性能跟安全来看，mysqli都比mysql要好。 衍生出来的问题是mysqli的连接复用（持久化）问题，这一块我并没有答好。 2、什么是内存泄漏，js内存泄漏是怎么产生的？ 答：内存泄漏是因为一块被分配内存既不能被使用，也不能被回收，直到浏览器进程结束。 产生泄漏的原因是闭包维持函数内局部变量，不能被释放，尤其是使用闭包并存在外部引用还setInterval的时候危害很大。 备注：我觉得这块回答并不好，因为肯定不是闭包的原因。 我查了一下资料，从比较浅的方位来再回答一下这个问题： 产生泄漏的原因有好几种： (1) 页面元素被删除，但是绑定在该元素上的事件未被删除； (2) 闭包维持函数内局部变量（外部不可控），使其得不到释放； (3) 意外的全局变量； (4) 引用被删除，但是引用内的引用，还存在内存中。 从上述原因上看，内存泄漏产生的根本原因是引用无法正确回收，值类型并不能引发内存泄漏。 对于每个引用，都有自己的引用计数，当引用计数归零或被标记清除时，js垃圾回收器会认为该引用可以回收了。 3、什么是闭包，跟原型链、作用域链有什么关联 答：闭包是指存在于一个作用域链分支的函数域内的函数，该函数可以向上逐级访问作用域链上的变量，直到找到为止。当闭包存在外部引用时，js会维持闭包自身以及所在函数作用域链的内存状态。 备注：这个是我自己瞎说的。 继续答：跟原型链没有什么关联，函数的原型（prototype）主要用于实现继承，原型链可用于追溯继承关系，与作用域链类似，都是向上逐级访问属性，直到被找到，原型链的顶层是null，可以理解为所有的object都继承至null，所以null的类型是object。 继续答：作用域链可以看作是一个树形结构，由根节点window向下扩散，下层节点可以访问上层节点，但是上层节点无法访问下层节点，产生闭包的函数作用域属于节点中的一个，向下扩散后闭包函数产生叶子节点，叶子节点之间可以互相访问，当访问的变量在叶子节点中无法找到时，向上层节点查找，直到被找到为止，这个概念有点类似原型链上的属性查找。 4、一台电脑配置无限好，可以同时打开多少个网页 答：65535-1000 = 64535（端口数） // 1024 5、ip地址能被伪造吗？ 答：http头部可以被篡改，但是只能修改X_FORWARDED_FOR，真实ip地址（REMOTE_ADDR）很难修改（除非是路由器去修改），因为真实ip是底层会话ip地址，而且因为TCP 3次握手的存在，连接无法建立，伪造的意义不大，至于UDP的话，一般是内网才使用UDP通信。 6、有100万个奖品，每个人可以中奖3次，先到先得，怎么控制并发，不能发超，并保证完全的先到先得模式 答：百万奖品在打乱后预先insert到数据库，所有中奖操作，均只能update，不能insert。进来抽奖的用户使用memcahe原子加锁，实现抽奖次数自增，当抽奖次数到达3时，返回不中奖。 再问：预先插入需要很多资源，如果奖品数量上了1亿怎么办？ 答：使用redis队列存储请求，跑守护进程异步发奖，产生的问题是用户无法实时看到中奖情况。 再问：这样肯定不行。 再答：使用全局内存加锁确保抽奖过程是单进程在跑，但是会面临大并发阻塞问题。 再问：内存比较宝贵，在不用内存加锁的情况下怎么办，并且如果碰到1亿奖池的情况，预先插入数据库肯定不好，怎么办？ 答：设置奖品概率，分三张表，都使用innodb引擎，一张存中奖记录（预先插入一行），一张存奖品发放概况，一张存用户抽奖情况（uin唯一索引），大并发情况下，利用mysql的排他锁进行并发控制。流程如下： begin 查询用户抽奖次数，加排他锁 对用户抽奖次数的更新/插入 锁行查询发放情况 获得抽奖结果（某些奖品发完之后，动态变更概率） 更新发放表 插入中奖记录 commit 再问：遇到脏读怎么办？ 答：这方面不是很了解 再问：innodb的master线程在什么情况下fork其他子线程？ 答：不知道 7、数据链路层的数据是怎么校验的，有哪些校验方式？ 答：crc32，别的校验可能是取模校验奇偶数吧。 备注：答个crc校验就行了。 8、b+树的查询时间复杂度是多少，哈希表是多少，为什么数据库索引用b+树存储，而不是哈希表，数据库索引存储还有其他数据结构吗？ 答：O(log(n))，O(1) 因为哈希表是散列的，在遇到`key`&gt;’12’这种查找条件时，不起作用，并且空间复杂度较高。 备注：b+数根据层数决定时间复杂度，数据量多的情况下一般4-5层，然后用二分法查找页中的数据，时间复杂度远小于log(n)。 9、apache是怎么跟php通讯的，sapi是什么 答：使用sapi通讯，sapi是php封装的对外数据传递接口，通常有cgi/fastcgi/cli/apache2handler四种运行模式。 10、php的垃圾回收机制？ 答：垃圾回收是指当php运行状态结束时，比如遇到了exit/die/致命错误/脚本运行结束时，php需要回收运行过程中创建的变量、资源的内存。 ZEND引擎维护了一个栈zval，每个创建的变量和资源都会压入这个栈中，每个压入的数组结构都类似：[refcount =&gt; int, is_ref =&gt; 0|1, value =&gt; union, type =&gt; string]，变量被unset时，ref_count如果变成0，则被回收。 当遇到变量循环引用自身时，使用同步回收算法回收。 备注：PHP7已经重写了zal的结构体。 11、jquery的sizzle引擎工作原理 答：除了直到是DOM元素查找引擎之外，一无所知。 12、seajs的工作原理，如何解决重复加载库的问题，如何进行资源的同步加载 答：建立映射关系并缓存起来；资源并不能真正同步加载，只是返回一个回调。 13、memcache跟redis的区别 答：可存储数据结构不同；redis支持持久化存储。 14、md5逆向原理 答：先用字典查找，再尝试暴力破解。 再问：没有更好的方法了吗？ 答：没有了。 备注：嗯，事实上也确实没有特别好的办法，只能使用TB级的海量特征库用数据库存起来，然再分片查找。 15、父类方法是protected，子类重构为private，会发生什么？ 答：会发生fatal错误，因为继承的方法或属性只能维持或放大权限，不能缩小，比如protected重载为public是可行的。 16、一个网页从输入地址回车，到完整展示网页内容这段时间里，做了哪些工作，越详细越好。 答： 0、浏览器本地缓存匹配； 1、本地hosts映射对比; 2、本地dns缓存解析； 3、远程dns解析获得服务器ip地址； 4、浏览器发送tcp连接请求包(syn)； 5、请求包经过传输层、网络层、数据链路层封装通过网卡到达路由器； 6、路由器转发数据包到所属运营商服务器； 7、运营商服务器通过寻址最短路径通过中继节点到达指定ip地址； 8、服务器端可能存在反向代理或者负载均衡，都是直接转发请求至上游服务器，当然也可以制定安全防御规则直接丢弃请求包； 9、上游服务器收到连接请求，在自身可用的情况下，返回(syn+ack)； 10、浏览器校验ack，再次发送(syn+ack)； 11、服务器校验ack切换连接状态至established，然后根据请求传输数据包； 12、当transform-encoding为chunked时，浏览器开始渲染页面； 13、四次挥手，连接关闭； 14、渲染数据完成。 备注：还有很多东西不懂，一些东西完全是自己瞎蒙的，因为时间原因，以后有时间详细画一下。 17、keep-alive的概念 答：长连接机制，表示keep-alive-timeout时间内，如果连接没有closed，再次传输数据不再需要三次握手了。 备注：这里也有很多疑问，需要好好捋一捋。 18、linux文件压缩操作命令，shell脚本等 备注：因为平时开发都是在windows环境，对linux了解不足，这一块几乎是0分。 公司2： 这个是被鄙视最惨的一家了，首先会有笔试，相对来说并不复杂，但是有些坑，很多已经忘记了。 印象深刻的是我说自己熟悉常用设计模式，然后让我画UML类图，我就懵逼了，所以在写简历的时候，最好是写自己非常熟悉的，如果只是一知半解，并没有必要放到简历中。 公司3： 这里仅列举几个问到的问题： 1、设计一个中继服务器，转发客户A-&gt;客户B的请求； 2、myisam跟innodb有什么区别； 3、php进程死锁产生的原因是什么？怎么自动排查与自动恢复？ 4、有class A { public function b($a, $b, $c){//ssss}}; 怎么使用[‘b’ =&gt; 2, ‘a’ =&gt; 1, ‘c’ =&gt; 3]，对进行A::b进行调用，并顺利赋值？ 5、php5.2-&gt;php7.1的各版本演进历史，新增特性等？ 6、画一个tcp三次握手图 目前还在找工作中，在我看来8年的程序员怎么也不应该是这样子的，温水煮青蛙的教训非常惨痛，好在现在认识到问题还不晚，等到了35岁这个年纪，可能就真的晚了。 PHP 高级php架构师 觉得他们的面试题出的未必是好 题主已说面岗是架构师 虽然我不是架构师 但是我接触到的架构师应该具备的能力模型我觉得有几点比较重要 技术选型（知识面要广，不仅要考虑到公司的团队效率还要考虑到所选技术遇到问题解决所需的时间成本）、技术难点攻克（算法和并发模型或者存储方案的搭配），学习能力（不论年龄 这是必须 因为技术本是日新月异），管理能力（这个包括但不限于 人员管理、定期的技术沉淀、项目控制等），业务分析到技术实现的能力（其实架构师很大一部分壁垒是对业务理解非常深刻 一些具体实现未必要事必躬亲 因为本来你的时间成本就是应该发挥其最大价值 就是带领并指导团队快速开发产品的），解决问题的能力（bug出现时你一定要出现在一线指导或者亲自快速解决）其他的想到的再说吧 补充一些：鉴于技术人员的天生不服的性格 所以一般架构师技术不过硬是服不了人的 所以像一些底层的东西还是需要深入了解的 网络 协议 存储db 设计模式 算法 数据结构 未必细节要全部记住 但是要做到已知所以然 知其然只需要稍看文档即可 最后回归下腾讯的面试题吧 他们的考察点太单一了 毕竟是一个已然涉及管理岗的职位 但是题目还是较多在技术的细节点上 像是一个普通程序员岗的面试题 当然有一些可能是在其他几面中高管会面谈测探 我没面过腾讯所以有下错误定论的可能 只是希望给所有技术人员一点职业发展中应该平衡一下自己的重点 这样才不至于被淘汰","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"架构师","slug":"架构师","permalink":"https://hero.triple.net.cn/tags/架构师/"}]},{"title":"关于获取浏览器语言的一些调查","slug":"something-about-get-browsers-info","date":"2018-01-12T09:13:03.000Z","updated":"2018-12-18T04:34:13.561Z","comments":true,"path":"2018/01/12/something-about-get-browsers-info/","link":"","permalink":"https://hero.triple.net.cn/2018/01/12/something-about-get-browsers-info/","excerpt":"","text":"今天有一个需求过来: 要根据用户使用的语言自动将官网切换成对应的语种. 呶,就那么 _简单_ 的需求 实际上实现起来也不是特别复杂,切换方法都有,网站原来已经做了本地化处理,不过是需要客户手动选择 然后, 很快写了一段JS, 通过js获取浏览器语言, 然后再做匹配. 代码很简单: 12345678910111213141516171819202122232425262728293031323334 &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function () &#123; var currLang = $.cookie(&apos;lang&apos;); // 如果本地已经保存过语言设定，使用本地的；否则，从浏览器重新获取语言 if (typeof (currLang) == &apos;undefined&apos; || currLang == &apos;&apos;) &#123; currLang = window.navigator.language; if (!currLang) &#123; currLang = window.navigator.browserLanguage; &#125; if (currLang != &apos;zh-CN&apos; &amp;&amp; currLang != &apos;en-US&apos;) &#123; // 既不是中文，也不是英文，则使用英文作为默认显示语言 currLang = &apos;en-US&apos;; &#125; changeLang(currLang); &#125; &#125; &lt;/script&gt;``` 丢到测试环境, Firefox,Chrome 跑一通，正常！ 然而在IE 下，就不行了，，，， 我操作系统是中文的，IE 默认语言也是中文，在 `常规`-`外观`-`语言` 里面看到有设置的地方，改为英语，无效;删除中文，只留英语，还是无效;然后，把网上流传的三种获取语言的方式都在IE里面试一遍：``` alert(window.navigator.userLanguage); alert(window.navigator.systemLanguage); alert(window.navigator.language);``` IE 显示的都是 `zh-CN` ! 不服，把 `navigator` 的所有属性都打印了一遍（需要的拿走）： //属性 document.write( window.navigator.appCodeName + &quot; ------ //返回与浏览器相关的内部代码名 都为Mozilla &quot;); document.write(navigator.appName + &quot; ------ //返回浏览器正式名称 均为Netscape &quot;); document.write(navigator.appVersion + &quot; ------ //返回浏览器版本号 &quot;); document.write(navigator.cookieEnabled + &quot; ------ //返回浏览器是否启用cookie，true和false &quot;); document.write(navigator.geolocation + &quot; ------ //返回地理定位信息(h5) &quot;); document.write(navigator.javaEnabled() + &quot; ------ //检测当前浏览器是否支持 Java，从而知道浏览器是否能显示 Java 小程序(IE,chrome返回true，firefox返回false) &quot;); document.write(navigator.language + &quot; ------ //返回浏览器的首选语言 &quot;); document.write( navigator.mimeTypes + &quot; ------ //返回浏览器支持的Mime类型 &quot;); document.write( navigator.msManipulationViewsEnabled + &quot; ------ //仅支持IE，true &quot;); document.write(navigator.msMaxTouchPoints + &quot; ------ //字面意思是最大的触摸点，IE为0，其他不支持 &quot;); document.write(navigator.msPointerEnabled + &quot; ------ //IE为true，其他不支持 &quot;); document.write(navigator.onLine + &quot; ------ //是否连接互联网，均返回true(未断网) &quot;); document.write(navigator.platform + &quot; ------ //所在平台，返回win32 &quot;); document.write(navigator.plugins + &quot; ------ //返回浏览器插件集合 &quot;); document.write(navigator.preference + &quot; ------ //允许一个已标识的脚本获取并设置特定的 Navigator 参数 &quot;); document.write( navigator.product + &quot; ------ //浏览器产品名，返回gecko &quot;); document.write(navigator.systemLanguage + &quot; ------ //获取系统语言，IE支持，返回zh-cn &quot;); document.write(navigator.userAgent + &quot; ------ //判断浏览器类型 &quot;); document.write(navigator.userLanguage + &quot; ------ //返回操作系统的自然语言设置,IE支持，返回zh-cn &quot;); //方法 document.write(navigator.msLaunchUri + &quot; ------ //回调函数，未研究 &quot;); document.write(navigator.taintEnabled + &quot; ------ //回调函数 &quot;); document.write(navigator.hasOwnProperty + &quot; ------ //意思是是否支持属性，用法如下 &quot;); document.write(document.hasOwnProperty(&quot;ontouchstart&quot;) + &quot; ------ //电脑返回false，手机为true &quot;); console.log(navigator); ` 显示结果： 一个`en-US`的影子也没 继续找方法， 在 Mozilla 官方文档上看到关于 Navigator 的定义貌似有一个 navigator.languages 的属性（language 后面有个 s），拿到IE下面打印一下： `undefined` 。。。 这就悲剧了，意思是，和操作系统语言有关，IE 留的这个功能没啥用处。。。网上看来有像我一样不死心的人，跑到 Microsoft 官方论坛 还有这里： https://social.msdn.microsoft.com/Forums/ie/en-US/a5190b18-a49b-49b2-ac7a-2af433c0319a/detect-ie-language-preference结果就是，，，， 他们自己也不知道。。。 然后再去找，偶然发现 ip.chinaz.com 页面显示的语言居然是我浏览器设定的。。 神奇！！仔细一看，原来诀窍在这里，看图： chianz 没用直接通过js获取语言（估计他们也研究过这个问题），而是在点击“展开更多”那个按钮时发送一个GET请求，然后获取当次请求中的Header中的属性（`Accept-Language`） 果然很专业！剩下的问题，就简单了，依葫芦画瓢呗～～","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hero.triple.net.cn/tags/javascript/"},{"name":"浏览器","slug":"浏览器","permalink":"https://hero.triple.net.cn/tags/浏览器/"}]},{"title":"PHP的AES 对称加密小计","slug":"php-e7-9a-84aes-e5-af-b9-e7-a7-b0-e5-8a-a0-e5-af-86-e5-b0-8f-e8-ae-a1","date":"2018-01-09T09:03:34.000Z","updated":"2018-12-12T09:22:01.282Z","comments":true,"path":"2018/01/09/php-e7-9a-84aes-e5-af-b9-e7-a7-b0-e5-8a-a0-e5-af-86-e5-b0-8f-e8-ae-a1/","link":"","permalink":"https://hero.triple.net.cn/2018/01/09/php-e7-9a-84aes-e5-af-b9-e7-a7-b0-e5-8a-a0-e5-af-86-e5-b0-8f-e8-ae-a1/","excerpt":"","text":"对称加密在很多地方有独特的应用需要， 并且经实测，加密解密效率也不错， 我服务器上 双核2G，PHP7.0 使用 openssl_encrypt 模块加密并解密 三万六千个字符，耗时大约 0.5 毫秒（ 0.00048s），速度非常快 对于个人加密数据来说已经足够了 有些小问题需要记一下： 1. openssl_encrypt 模块必须要有非NULL的初始化向量（IV） 2. 加密和解密是没有雪崩效应的，特别是解密，在密文后面追加字符，并不会显著影响前面的密文的解密，只是后面追加的字符无法解密而已，前面的照常显示 3. 老版本PHP使用的的 Mcrypt 模块密钥长度是16位（可能是部分加密方法，未完全测试），openssl 没有此限制 通用加密/解密使用方法： /** * [AesSecurity aes加密，支持PHP7.1] */ class AesSecurity { /** * [encrypt aes加密] * @param [type] $input [要加密的数据] * @param [type] $key [加密key] * @return [type] [加密后的数据] */ public static function encrypt($input, $key) { $data = openssl_encrypt($input, &apos;AES-128-ECB&apos;, $key, OPENSSL_RAW_DATA); $data = base64_encode($data); return $data; } /** * [decrypt aes解密] * @param [type] $sStr [要解密的数据] * @param [type] $sKey [加密key] * @return [type] [解密后的数据] */ public static function decrypt($sStr, $sKey) { $decrypted = openssl_decrypt(base64_decode($sStr), &apos;AES-128-ECB&apos;, $sKey, OPENSSL_RAW_DATA); return $decrypted; } }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"AES","slug":"AES","permalink":"https://hero.triple.net.cn/tags/AES/"},{"name":"对称加密","slug":"对称加密","permalink":"https://hero.triple.net.cn/tags/对称加密/"}]},{"title":"CentOS 7.2下编译安装PHP 7","slug":"centos-7-2-e4-b8-8b-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85php-7","date":"2017-12-26T10:12:01.000Z","updated":"2018-12-12T08:59:08.086Z","comments":true,"path":"2017/12/26/centos-7-2-e4-b8-8b-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85php-7/","link":"","permalink":"https://hero.triple.net.cn/2017/12/26/centos-7-2-e4-b8-8b-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85php-7/","excerpt":"","text":"注意此配置针对开发环境，如果线上环境，那么phpdbg和dtrace这两个建议不要编译 编译安装参数 # prefix 可根据实际情况自定义 # with-fpm-systemd参数可以使PHP7支持centos7的systemd服务管理 # 安装过程中可能有一些扩展需要额外库支持，如果configure运行报错，直接goolge 搜索，基本上yum install xxx-devel 就可 ./configure --prefix=/data/soft/php7 --enable-fpm --with-fpm-user=php-fpm --with-fpm-group=www --with-fpm-systemd --enable-phpdbg --enable-dtrace --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-opcache --enable-pcntl --enable-mbstring --enable-soap --enable-zip --enable-calendar --enable-bcmath --enable-ftp --enable-intl --enable-sockets --with-openssl --with-mhash --with-zlib --with-curl --with-gettext --with-gd --enable-exif --enable-gd-native-ttf --enable-gd-jis-conv --with-png-dir=/usr/lib --with-jpeg-dir=/usr/lib --with-freetype-dir=/usr/lib 执行以上编译前配置，如果没有错误 运行命令 make &amp; make install 编译完成，copy php-develpment.ini 文件到 PREFIX/lib/目录下 一些特别需要注意安装的包 yum install systemd-devel yum isntall freetype-devel yum isntall libpng-devel yum install openjpeg-devel 安装完，如果想要systemd控制启动 copy ./sapi/fpm/php-fpm.service 到 /usr/lib/systemd/system/下 systemctl enable php-fpm systemctl start php-fpm 即可 编译安装完，就是一些第三方扩展安装，能用pecl的尽量使用pecl，不能用的编译安装也简单，使用phize 这个即可，具体自己搜索网上文章 另外就是php.ini配置文件的修改和php-fpm.conf文件的修改，一些最基本的优化都可以在这两个文件里面实现，比如opcache的配置，php-fpm启动进程数量等，php-fpm配置文件在PREFIX/etc目录下 因为是开发环境，优化的就不写了，如果有需要，网上搜索，基本上优化的建议都很通用 文章来源： https://segmentfault.com/a/1190000005363212","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"centos","slug":"centos","permalink":"https://hero.triple.net.cn/tags/centos/"}]},{"title":"使用SNK密钥文件保护你的DLL和代码不被反编译教程","slug":"e4-bd-bf-e7-94-a8snk-e5-af-86-e9-92-a5-e6-96-87-e4-bb-b6-e4-bf-9d-e6-8a-a4-e4-bd-a0-e7-9a-84dll-e5-92-8c-e4-bb-a3-e7-a0-81-e4-b8-8d-e8-a2-ab-e5-8f-8d-e7-bc-96-e8-af-91-e6-95-99-e7-a8-8b","date":"2017-12-22T08:45:46.000Z","updated":"2018-12-12T09:05:36.324Z","comments":true,"path":"2017/12/22/e4-bd-bf-e7-94-a8snk-e5-af-86-e9-92-a5-e6-96-87-e4-bb-b6-e4-bf-9d-e6-8a-a4-e4-bd-a0-e7-9a-84dll-e5-92-8c-e4-bb-a3-e7-a0-81-e4-b8-8d-e8-a2-ab-e5-8f-8d-e7-bc-96-e8-af-91-e6-95-99-e7-a8-8b/","link":"","permalink":"https://hero.triple.net.cn/2017/12/22/e4-bd-bf-e7-94-a8snk-e5-af-86-e9-92-a5-e6-96-87-e4-bb-b6-e4-bf-9d-e6-8a-a4-e4-bd-a0-e7-9a-84dll-e5-92-8c-e4-bb-a3-e7-a0-81-e4-b8-8d-e8-a2-ab-e5-8f-8d-e7-bc-96-e8-af-91-e6-95-99-e7-a8-8b/","excerpt":"","text":"大家做项目开发一般都是分层的，比如UI层，业务层，数据访问层。业务层引用数据访问层的DLL(比如dataAccess.dll)，并使用dataAccess.dll中的方法。当项目完成并给客户用了，可有些心里BT的客户这个时候也可以请个稍微懂NET的人来引用你的dataAccess.dll并调用其中的方法搞破坏。比如可以直接使用里面的ChangePwd(string UserName,string Pwd)方法把其他用户的密码改了，这个时候就你就……. 好了，该开始说怎么保护我们的代码了： 首先我们需要把我们的程序集做成强命名的程序集。这里我们在.NET 命令提示中输入sn -k c:test.snk 创建一个新的随机密钥对并将其存储在 c:test.snk 中 然后新建立类库ClassLibrary1，里面只有个类文件Class1.cs，代码如下： using System; namespace ClassLibrary1 { public class Class1 { public Class1() { // // TODO: 在此处添加构造函数逻辑 // } public string Insert() { return &quot;ok&quot;; } } } AssemblyInfo.cs代码： //............其他的就用默认 [assembly: AssemblyKeyFile(&quot;c:test.snk&quot;)] // 连接上面用强命名工具SN.exe生成的文件. 接着创建个WindowApplication来调用我们的ClassLibrary1，代码： private void button1_Click(object sender, System.EventArgs e) { MessageBox.Show(new ClassLibrary1.Class1().Insert()); } 不修改WindowApplication的AssemblyInfo.cs。 在这里就可以直接运行了，不过大家都看的出来，这样是能成功调用Class1中的方法的。 现在让我们来修改下Class1.cs，代码： using System; using System.Security.Permissions; namespace ClassLibrary1 { [StrongNameIdentityPermissionAttribute(SecurityAction.LinkDemand, PublicKey = &quot;00240000048000009400000006020000002400005253413100040000010001000551684edd1600&quot;+ &quot;8ccbdd337b1cf1490490d97fe0048c5f3629cc4f5104578499eace9b2a94115022edd620def472&quot;+ &quot;8b4f088291cfa77a40659afba611fdafbb7894b93a64049d439936bd0cd8dc0704625aeb735892&quot;+ &quot;e9eb3f910a49a2925af10515d935654d7adac5567ff6d780d23d587de0ff4d271da7b30680fa88&quot;+ &quot;a47a4ba4&quot;)] public class Class1 { public Class1() { // // TODO: 在此处添加构造函数逻辑 // } public string Insert() { return &quot;ok&quot;; } } } 然后再编译后运行windowapplication调用class1中的方法就会出错。 这里的StrongNameIdentityPermissionAttribute是NET提供的CAS(Code Access Security)中的1个类，具体可参考MSDN， SecurityAction.LinkDemand 是要求直接调用方已被授予了指定的权限，这里即windowapplication要授予了权限才行， 如果使用SecurityAction.Demand要求调用堆栈中的所有高级调用方都已被授予了当前权限对象所指定的权限。 他们的区别是： 如果windowapplication已授权访问，而还有个windowapplication2(未授权访问)通过调用windowapplication中的button1_Click方法来调用class1，这个时候如果使用SecurityAction.LinkDemand就能成功调用， 而使用SecurityAction.Demand windowapplication2就不能调用，windowapplication 在这2种情况下都能调用。 说到这里大家一定再问PublicKey＝后面一串那么长的字符串怎么来。PublicKey后面的字符串是你开始生成的c:test.snk文件中保存的公钥。那怎么才能看到这个公钥了，照样是用SN.EXE。 输入sn -p c:test.snk c:publicKey.snk (从 test.snk 中提取公钥并将其存储在 publicKey.snk 中) 再输入sn -tp c:publicKey.snk (显示公钥信息) 上面这个命令就能看到PublicKey后面的字符串了，还想什么啊，把那字符串copy下来啊。 最后大家一定在关心这个时候windowapplication 要怎么调用class1了，其实也简单，只要把windowapplication 的AssemblyInfo.cs修改为： [assembly: AssemblyKeyFile(&quot;c:test.snk&quot;)] 到这里就一切OK了，大家都看到最关键的就是test.snk文件了，所以一定要保护好你自己的test.snk文件。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"c#","slug":"c","permalink":"https://hero.triple.net.cn/tags/c/"},{"name":"逆向工程","slug":"逆向工程","permalink":"https://hero.triple.net.cn/tags/逆向工程/"}]},{"title":"真正修改Redmine附件上传路径的方法","slug":"e7-9c-9f-e6-ad-a3-e4-bf-ae-e6-94-b9redmine-e9-99-84-e4-bb-b6-e4-b8-8a-e4-bc-a0-e8-b7-af-e5-be-84-e7-9a-84-e6-96-b9-e6-b3-95","date":"2017-12-22T07:04:37.000Z","updated":"2018-12-12T09:11:32.269Z","comments":true,"path":"2017/12/22/e7-9c-9f-e6-ad-a3-e4-bf-ae-e6-94-b9redmine-e9-99-84-e4-bb-b6-e4-b8-8a-e4-bc-a0-e8-b7-af-e5-be-84-e7-9a-84-e6-96-b9-e6-b3-95/","link":"","permalink":"https://hero.triple.net.cn/2017/12/22/e7-9c-9f-e6-ad-a3-e4-bf-ae-e6-94-b9redmine-e9-99-84-e4-bb-b6-e4-b8-8a-e4-bc-a0-e8-b7-af-e5-be-84-e7-9a-84-e6-96-b9-e6-b3-95/","excerpt":"","text":"之前搭建了一个Redmine， 在一个云服务器上，装好了Redmine之后，想要更改文件的存储路径为另外的云硬盘（系统盘太不安全，容量也只有25G） 惊讶的发现，搜索 “redmine修改附件储存路径”时 网上的例子都是基于1.x.x 的做法，更甚的是，要修改源文件？？？ 甚至官方论坛Custom folder for attachments. How?都没有什么有效的回答（而且是10年前的答案。。也是修改 xxx.rb。。。你特么在逗我。。） 好吧，只有自己摸索了 下面是解决方案 目标路径： /data/redmine_attachments 创建目录&amp;设置权限sudo mkdir -p /data/redmine_attachments sudo chown -R www-data /data/redmine_attachments sudo chmod -R 755 /data/redmine_attachments # 这里一定要有执行权限，否则上传时（严格说，还没开始上传，而是点击按钮时）会提示“文件 是无效的” 设置上传路径 &amp; 顺便把邮件也修改了cd /usr/share/redmine/ cp config/configuration.yml /etc/redmine/default/configuration.yml 这里的目标路径可能和你的不一样。快速找打的方法是打开你站点的“管理”，“配置”，找到“邮件”这个选项。 如果没配置的话，会提示错误，让你在/etc/redmine/&lt;instance&gt;/configuration.yml 中配置邮件选项，这个路径中的配置文件就是当前Redmine的正确配置文件 根据文档中的注释自己修改一下参数就可以了 最后，别忘记重启 apache","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"redmine","slug":"redmine","permalink":"https://hero.triple.net.cn/tags/redmine/"}]},{"title":"Vim快速选中、删除、复制引号或括号中的内容","slug":"Vim-selected-remove-copy-in-quote","date":"2017-12-21T03:33:15.000Z","updated":"2018-12-12T10:24:11.515Z","comments":true,"path":"2017/12/21/Vim-selected-remove-copy-in-quote/","link":"","permalink":"https://hero.triple.net.cn/2017/12/21/Vim-selected-remove-copy-in-quote/","excerpt":"","text":"最近刚刚发现了一些VIM中，快速对引号或括号等标点内的内容进行选中、删除、复制操作的超级技巧。 通过这些命令可以快速修改或删除匹配的 括号、引号等成对字符之间的内容， 极大的提高编辑效率。 以下命令可以对标点内的内容进行操作。 ci&apos;、ci&quot;、ci(、ci[、ci{、ci &lt;----- 分别更改这些配对标点符号中的文本内容 di&apos;、di&quot;、di(或dib、di[、di{或diB、di &lt;----- 分别删除这些配对标点符号中的文本内容 yi&apos;、yi&quot;、yi(、yi[、yi{、yi &lt;----- 分别复制这些配对标点符号中的文本内容 vi&apos;、vi&quot;、vi(、vi[、vi{、vi &lt;----- 分别选中这些配对标点符号中的文本内容 举个例子 1： 原始数据（光标所在位置匹配的括号）： Normal 模式下 输入 ci(之后的结果： 举个例子 2： 比如要操作的文本如下： 111&quot;222&quot;333 将光标移到”222”的任何一个字符处输入命令 di&quot; ,文本会变成： 111&quot;&quot;333 若输入命令 da&quot; ,文本会变成： 111333 特别是对于用Vim编码的同学来说，真是非常强劲的技巧。 转至: http://www.linuxsong.org/2010/09/vim-quick-select-copy-delete/","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://hero.triple.net.cn/tags/vim/"}]},{"title":"更改Debian终端中的命令行颜色","slug":"e6-9b-b4-e6-94-b9debian-e7-bb-88-e7-ab-af-e4-b8-ad-e7-9a-84-e5-91-bd-e4-bb-a4-e8-a1-8c-e9-a2-9c-e8-89-b2","date":"2017-12-20T07:32:42.000Z","updated":"2018-12-12T09:11:08.901Z","comments":true,"path":"2017/12/20/e6-9b-b4-e6-94-b9debian-e7-bb-88-e7-ab-af-e4-b8-ad-e7-9a-84-e5-91-bd-e4-bb-a4-e8-a1-8c-e9-a2-9c-e8-89-b2/","link":"","permalink":"https://hero.triple.net.cn/2017/12/20/e6-9b-b4-e6-94-b9debian-e7-bb-88-e7-ab-af-e4-b8-ad-e7-9a-84-e5-91-bd-e4-bb-a4-e8-a1-8c-e9-a2-9c-e8-89-b2/","excerpt":"","text":"由于在终端下，命令提示符、输入及输出均为一种颜色，因此当输出内容比较多时，很容易花眼，不易区分，这里我把它更改成如BackTrack下的命令行颜色，即username@hostname为红色，后面的目录为蓝色。 更改普通用户的配置文件如下：vi /home/xxx/.bashrc 在打开的文件中添加下列語句： PS1=&apos;${debian_chroot:+($debian_chroot)}[33[01;31m]u@h[33[00m]:[33[01;34m]w[33[00m]$ &apos; 其中01;31m代表红色username@hostname,01;34m代表目录为蓝色。 root 用户，同样地，登陆root后，输入如下命令：vi /root/.bashrc 在打开的文件中添加上面的語句： PS1=&apos;${debian_chroot:+($debian_chroot)}[33[01;31m]u@h[33[00m]:[33[01;34m]w[33[00m]$ &apos;","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"命令行","slug":"命令行","permalink":"https://hero.triple.net.cn/tags/命令行/"},{"name":"终端","slug":"终端","permalink":"https://hero.triple.net.cn/tags/终端/"}]},{"title":"Vim Global Command用法（g命令）","slug":"vim-global-command","date":"2017-12-14T06:02:56.000Z","updated":"2018-12-12T10:00:17.631Z","comments":false,"path":"2017/12/14/vim-global-command/","link":"","permalink":"https://hero.triple.net.cn/2017/12/14/vim-global-command/","excerpt":"","text":"Task 删除一个文本文件中的所有带 ‘test’ 的行，以及这一行的前一行和后一行。 如何用Vim实现？ Solution:g/test/-,/test/+ d 上面的命令是如何工作的呢？这你就需要了解vim的global命令(g命令) :g就是global命令 语法：:[range]g/pattern/cmd :g/pattern1/, /pattern2/cmd 第一种语法会在range的范围内搜索pattern, 如果符合要求就执行cmd. 第二种语法会在/p1/, /p2/之间执行cmd 例::g/test/d 删除所有带test的行 :g!/test/d 保留带test的行 :g/hello/, /world/d 删除所有hello, world之间的行 提取宏定义有如下代码，现在要求提取出当TEST为Ture时，所定义的内容 #ifdef TEST test1 test2 #else no test #endif 可以这样写g命令 :g/#ifdef TEST/+1, /#else|#endif/-1 t $ +1代表取下一行，-1代表取上一行， #else|#endif表示满足#else或者#endif这两个条件都可以。 用以上的命令可以成功了取得#ifdef TEST所包含的内容 但如果我们想要取不满足#ifdef TEST的内容怎么办呢，这个问题要比上面的问题复杂。我们不能直接去搜索#else, 因为它之前有可能是其它的#ifdef, 而不是#ifdef TEST，其次，不是所有的#ifdef TEST都有#else定义。 所有我们要使用try和endtry命令 :try|g/#ifdef TEST//#else/+1, /#endif/-1 t $|endtry 解释一下，先找 #ifdef TEST, 找到后再找 #else, 然后取下一行，再找到 #endif 取上一行。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://hero.triple.net.cn/tags/vim/"}]},{"title":"[转]写会 MySQL 索引","slug":"e8-bd-ac-e5-86-99-e4-bc-9a-mysql-e7-b4-a2-e5-bc-95","date":"2017-12-05T03:58:00.000Z","updated":"2018-12-12T09:13:19.507Z","comments":true,"path":"2017/12/05/e8-bd-ac-e5-86-99-e4-bc-9a-mysql-e7-b4-a2-e5-bc-95/","link":"","permalink":"https://hero.triple.net.cn/2017/12/05/e8-bd-ac-e5-86-99-e4-bc-9a-mysql-e7-b4-a2-e5-bc-95/","excerpt":"","text":"来源：andyqian my.oschina.net/u/1462914/blog/1563127 前言继上篇《读懂MySQL执行计划》后，在文章末尾，我们谈到了索引的概念，那么，今天我们就一起来聊一聊MySQL索引。 什么是索引？百度百科是这样描述的： 索引是为来加速对表中数据行中的检索而创建的一种分散的数据结果，时针对表而建立的，它是由数据页面以外的索引页面组成，每个索引页中的行都含有逻辑指针，以便加速检索物理数据 其实，索引的概念大家都很清楚，也知道索引能够提升查询效率，但大部分童鞋在怎么建索引，建在哪些字段上有以下常见误解: 新建表时不需要建索引，后续才添加索引 where条件后的字段均建索引 简单SQL不需要索引，联合查询才需要索引 联合索引的顺序是where条件后字段的先后顺序 对于区分度小的字段上也新建索引，如状态、性别等字段等。 索引区分度在说上述问题之前，我们先来看看另一个概念，就是区分度。 区分度: 指字段在数据库中的不重复比 区分度在新建索引时有着非常重要的参考价值，在MySQL中，区分度的计算规则如下: 字段去重后的总数与全表总记录数的商。 例如: select count(distinct(name))/count(*) from t_base_user; 结果如下: count(distinct(name))/count(*) 1.0000 其中区分度最大值为1.000，最小为0.0000，区分度的值越大，也就是数据不重复率越大，新建索引效果也越好，在主键以及唯一键上面的区分度是最高的，为1.0000，在状态、性别等字段上面的区分度值是最小的。 (这个就要看数据量了，如果只有几条数据，这时区分度还挺高的，如果数据量多，区分度基本为0.0000。也就是在这些字段上添加索引后，效果也不佳的原因。) 值得注意的是：如果表中没有任何记录时，计算区分度的结果是为空值，其他情况下，区分度值均分布在0.0000-1.0000之间。 如何建索引 (一) : 区分度 个人强烈建议，建索引时，一定要先计算该字段的区分度，原因如下: 单列索引 可以查看该字段的区分度，根据区分度的大小，也能大概知道在该字段上的新建索引是否有效，以及效果如何。区分度越大，索引效果越明显。 2.多列索引(联合索引) 多列索引中其实还有一个字段的先后顺序问题，一般是将区分度较高的放在前面，这样联合索引才更有效，例如: select * from t_base_user where name=”” and status=1; 像上述语句，如果建联合索引的话，就应该是: alter table t_base_user add index idx_name_status(name,status); 而不是: alter table t_base_user add index idx_status_name(status,name)； (二) 最左前缀匹配原则 MySQL会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如 select * from t_base_user where type=”10″ and created_at&lt;“2017-11-03” and status=1, (该语句仅作为演示) 在上述语句中，status就不会走索引，因为遇到&lt;时，MySQL已经停止匹配，此时走的索引为：(type,created_at)，其先后顺序是可以调整的，而走不到status索引，此时需要修改语句为: select * from t_base_user where type=10 and status=1 and created_at&lt;“2017-11-03” 即可走status索引。 (三) 函数运算 不要在索引列上，进行函数运算，否则索引会失效。因为b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。 (四) 扩展优先 扩展优先，不要新建索引，尽量在已有索引中修改。如下: select * from t_base_user where name=”andyqian” and email=”andytohome” 在表t_base_user表中已经存在idx_name索引，如果需要加入idx_name_email的索引，应该是修改idx_name索引，而不是新建一个索引。 误解纠正上面说了，如何新建索引，现在我们就可以来回答，在第一步中存在的误解了。 误解一：新建表时不需要建立索引，后续才加索引 答：一个好的数据表设计，在一开始就要考虑索引的创建，而不是等到后续出问题了，影响业务使用了，才新建索引来救场，而且后续创建索引的成本也相对高很多。(这就是给生产事故留下生根发芽的机会呀) 误解二：where条件后的字段均建索引 答：这个误解比较常见，但where条件后的字段不需要全部建立索引，过多的索引，也会导致索引文件剧增，也还达不到期望中的效果。详细请参考上述新建索引的小节。 误解三：简单SQL不需要建立索引，联合查询采建立索引 答：这个误解就得好好说说了，现在互联网公司特别是B/S架构下，业务逻辑均剥离在代码逻辑层，到最后SQL层面，其实都是一些简单的SQL，只有些许连接查询，更多的还是单表操作，(C/S架构中有很多在SQL层面的写逻辑的)，你说这些语句简不简单。 误解四: 联合索引的顺序是where条件后字段的先后顺序 答：我们刚才说过，联合索引的顺序，是根据最左前缀原则，以及区分度来区分的，和where条件后字段的先后顺序无关。 误解五：对于区分度较小的字段新建索引 答：在区分度较小的字段上新建索引，基本无效，还会增加大量的索引文件，你说是不是得不偿失。 索引重不重要？上面介绍了MySQL索引的概念，新建索引时的一些技巧。这么理论的东西，对于平时没有使用或使用比较少的童鞋，此时对索引的重要性可能还没那么直观，那么，我就来说说我在索引上吃过的亏，踩过的坑！同时也是未建索引常见问题！ 0. 导致慢查询 这个问题可是未建索引的常客哦，（这里也还有很多细节呢，如隐式类型转换等等） 1. 导致服务超时 场景 : 在某次上线时，作为服务提供者，提供服务给业务方使用。一开始以为就提供一个简单的服务，也已经测试完成，心里还在窃喜，今天总算可以早早回家了！ 描述 : 实际一上线，在生产环境中导致业务方请求调用时，而且每次请求均超时，数据也已落地，此时只能review代码，最后发现生产中有个慢查询导致，活活的花费了10多秒，这个语句有多简单呢，你绝对想不到，就是一个简单的单表where查询。 你说这种原因导致服务不可用，你说冤不冤，气不气！（这也是我为什么说，一个好的数据表设计，从一开始就要考虑新建索引了）。 2. 数据库服务器CPU 100% 在查询频率比较高的SQL上，如果出现未建索引，导致慢查询的话，那可是会导致数据库服务器CPU 100%，影响可是整个系统哦。 小结 上面说了好几类，由于没建立索引而导致的问题，轻则导致慢查询，影响系统效率，重则，导致CPU 100%，影响整个系统的使用，看到这里，你说索引重不重要？ 最后上面简单说了，索引是什么、有什么用，以及建立索引时的一些技巧，还着重说了索引的重要性。那么索引这么重要，在平时编码时如何规避问题呢？以下是我个人的建议： 在建表时就应该考虑添加索引，如外键字段等等。 在写完SQL后，一定要查看执行计划。尽量避免全表扫描。 如果是已有表中添加索引，一定要先计算该字段的区分度。 联合索引，将区分度大放在前面。 遵从MySQL左列前缀优先原则 看完本文有收获？请转发分享给更多人 关注「数据库开发」，提升 DB 技能","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"},{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/tags/数据库/"},{"name":"索引","slug":"索引","permalink":"https://hero.triple.net.cn/tags/索引/"}]},{"title":"Mysql 自定义函数——根据父级分类查询所有子级分类","slug":"mysql-e8-87-aa-e5-ae-9a-e4-b9-89-e5-87-bd-e6-95-b0-e6-a0-b9-e6-8d-ae-e7-88-b6-e7-ba-a7-e5-88-86-e7-b1-bb-e6-9f-a5-e8-af-a2-e6-89-80-e6-9c-89-e5-ad-90-e7-ba-a7-e5-88-86-e7-b1-bb","date":"2017-11-30T08:45:42.000Z","updated":"2018-12-12T09:20:50.393Z","comments":false,"path":"2017/11/30/mysql-e8-87-aa-e5-ae-9a-e4-b9-89-e5-87-bd-e6-95-b0-e6-a0-b9-e6-8d-ae-e7-88-b6-e7-ba-a7-e5-88-86-e7-b1-bb-e6-9f-a5-e8-af-a2-e6-89-80-e6-9c-89-e5-ad-90-e7-ba-a7-e5-88-86-e7-b1-bb/","link":"","permalink":"https://hero.triple.net.cn/2017/11/30/mysql-e8-87-aa-e5-ae-9a-e4-b9-89-e5-87-bd-e6-95-b0-e6-a0-b9-e6-8d-ae-e7-88-b6-e7-ba-a7-e5-88-86-e7-b1-bb-e6-9f-a5-e8-af-a2-e6-89-80-e6-9c-89-e5-ad-90-e7-ba-a7-e5-88-86-e7-b1-bb/","excerpt":"","text":"Mysql 自定义函数——根据父级分类查询所有子级分类 mysql 有些地方不如Oracle那么强悍，但是业务应用范围却一点也不弱于后者， 这里涉及的是一个很常见的场景： 查询某个分类下面的所有子分类。 比如想知道某个组织架构下面的所有地区、部门、组、等分类，然后根据这些分类获取相应的人员 CREATE DEFINER=`test`@`172.16.%` FUNCTION `GET_CHLID`(deptID int) RETURNS varchar(4000) CHARSET gb2312 READS SQL DATA BEGIN DECLARE sTemp VARCHAR(4000); DECLARE sTempChd VARCHAR(4000); SET sTemp = &apos;$&apos;; SET sTempChd = cast(deptID as char); WHILE sTempChd is not NULL DO SET sTemp = CONCAT(sTemp,&apos;,&apos;,sTempChd); SELECT GROUP_CONCAT(upm_dept_id) INTO sTempChd FROM upm_dept WHERE FIND_IN_SET(upm_from_dept_id, sTempChd) &gt; 0; END WHILE; return sTemp; RETURN 1; END 可能遇到的错误 data too long for column ‘name’ at row 检查数据类型有没有错误，比如上文中的 deptID 如果定义函数的时候指定成 varchar 类型，会出错 字符编码问题，网上有很多案例，参考一下吧 ERROR 1418 (HY000): This function has none of DETERMINISTIC 开启了bin-log, 我们就必须指定我们的函数是否是 DETERMINISTIC | NO SQL | or READS SQL DATA 那我们就指定这不就也能解决问题: create function rand_string(n INT)returns varchar(255)no sql //《——-可以在这指定beginend $$","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"},{"name":"分级","slug":"分级","permalink":"https://hero.triple.net.cn/tags/分级/"},{"name":"子部门","slug":"子部门","permalink":"https://hero.triple.net.cn/tags/子部门/"},{"name":"自定义函数","slug":"自定义函数","permalink":"https://hero.triple.net.cn/tags/自定义函数/"}]},{"title":"在Debian中网卡的设置","slug":"e5-9c-a8debian-e4-b8-ad-e7-bd-91-e5-8d-a1-e7-9a-84-e8-ae-be-e7-bd-ae","date":"2017-11-01T02:24:23.000Z","updated":"2018-12-12T09:08:58.681Z","comments":false,"path":"2017/11/01/e5-9c-a8debian-e4-b8-ad-e7-bd-91-e5-8d-a1-e7-9a-84-e8-ae-be-e7-bd-ae/","link":"","permalink":"https://hero.triple.net.cn/2017/11/01/e5-9c-a8debian-e4-b8-ad-e7-bd-91-e5-8d-a1-e7-9a-84-e8-ae-be-e7-bd-ae/","excerpt":"","text":"在Debian中网卡的设置可以通过/etc/network/interfaces文件来进行，具体可分为三种不同的配置方式： DHCP自动获取、静态分配IP地址和PPPoE宽带拨号。 在进行配置之前，首先进入/etc/network目录中，用nano命令编辑interfaces文件： ** 网卡通过DHCP自动获取IP地址 ** # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). # # The loopback network interface（配置环回口） # 开机自动激lo接口 auto lo # 配置lo接口为环回口 iface lo inet loopback # # The primary network interface （配置主网络接口） #开机自动激活eth0接口 auto eth0 #配置eth0接口为DHCP自动获取 iface eth0 inet dhcp ** 网卡静态分配IP地址 ** # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). # # The loopback network interface（配置环回口） # 开机自动激lo接口 auto lo # 配置lo接口为环回口 iface lo inet loopback # # The primary network interface （配置主网络接口） #开机自动激活eth0接口 auto eth0 #配置eth0接口为静态设置IP地址 iface eth0 inet static address 10.16.3.99 netmask 255.255.255.0 network 10.16.3.0 broadcast 10.16.3.255 gateway 10.16.3.1 #单网卡配置多个ip，设置第二个ip地址 auto eth0:1 iface eth0:1 inet static address x.x.x.x netmask 255.255.255.0 network 10.16.3.0 broadcast 10.16.3.255 gateway 10.16.3.1 # dns-* options are implemented by the resolvconf package, if installed（DNS设置） dns-nameservers 61.153.177.196 61.153.177.197 dns-search feelnet.org 配置好后推出编辑/etc/resolv.conf，配置DNS，加入以下信息： nameserver 219.146.0.130 基本文件格式Debian的网络配置文件在目录/etc/network中，其中的interfaces文件中保存了每一个网络设备在启动时的属性。下面是一个很简单的配置文件： 例子 1. 简单的配置文件auto lo eth0 ① iface lo inet loopback ② iface eth0 inet dhcp ③ iface eth1 inet static ④ address 10.1.133.165 netmask 255.255.255.0 gateway 10.1.133.1 ① 表示系统中的lo和eth0两个网络设备在系统启动网络时自动启动。 ② 表示网络设备lo使用TCP/IP网络并且是一个loopback设备，如果是IPV6网络则使用”inet6”，IPX网络使用”ipx”。 ③ 表示网络设备eth0使用TCP/IP网络，同时使用DHCP自动获取IP地址。 ④ 表示网络设备eth1使用TCP/IP网络，并且是占用固定的IP 10.1.33.165，子网掩码是255.255.255.0，网关是10.1.133.1。 上面的这种配置方式，可以使用于大多数的情况，但在一些特殊的情况下，就需要一些更为灵活的手段来配置网络。 通过PING配置网络Linux在处理PCMCIA卡的时候有比较好的方式，可以在PCMICA卡插入时通过一个配置脚本来确定网络地址。但是，笔记本上的网卡是笔记本自带的，并非PCMCIA卡，由于经常需要奔波于办公室、实验室和家之间，就经常需要修改网络地址。如果我去的每一个地方都安装了DHCP，那么我就可以把 eth0设定成为DHCP的方式，然而我的情况却是：在家可以使用DHCP，在办公室和实验室都要使用固定地址。 为了解决这个问题，我们可以使用一种mapping机制，这种方法的基本原理是通过运行一个程序来确定目前所处的环境，并为这个环境选择一套配置。我现在使用的就是通过ping一个网络的网关来确定当前网卡究竟连接在哪个网络上，然后再选择这个网络的配置。 首先，在/usr/share/doc/ifupdown/examples中有一个文件ping-places.sh，把它复制到/etc/network目录中，然后chmod +x /etc/network/ping-places.sh。下面就是编辑/etc/network/interfaces文件，下面是一个例子： 例子 2. mapping eth0 ① script /etc/network/ping-places.sh map 192.168.0.107/24 192.168.0.1 home map 10.1.133.165/24 10.1.133.1 office map 10.1.0.107/24 10.1.0.1 lab iface home inet dhcp ② iface office inet static ③ address 10.1.133.165 netmask 255.255.255.0 gateway 10.1.133.1 up cp /etc/resolv.conf.school /etc/resolv.conf ④ iface lab inet static address 10.1.0.107 netmask 255.255.255.0 gateway 10.1.0.1 up cp /etc/resolv.conf.school /etc/resolv.conf ① 表示对于网络设备调用脚本/etc/network/ping-places.sh，如果能够用地址192.168.0.107/24 ping通地址192.168.0.1，则将eth0映射为设备home，即启动home的配置。后面的office和lab与其类似。 ② 表示虚拟设备home使用DHCP分配的地址。 ③ 表示虚拟设备office使用固定地址。 ④ 表示在启动这个网络设备后还要执行cp命令，从而指定一个域名解析方法。除了up以外，还有pre-up、down和post-down可以用来指定在启动或停止网络设备前后执行的命令。 在/usr/share/doc/ifupdown/examples中有一些配置网络的例子和需要的脚本。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"debian","slug":"debian","permalink":"https://hero.triple.net.cn/tags/debian/"},{"name":"网络","slug":"网络","permalink":"https://hero.triple.net.cn/tags/网络/"},{"name":"dhcp","slug":"dhcp","permalink":"https://hero.triple.net.cn/tags/dhcp/"}]},{"title":"EmEditor 17.2.3 官方正式版本及激活密钥","slug":"emeditor-17-2-3-e5-ae-98-e6-96-b9-e6-ad-a3-e5-bc-8f-e7-89-88-e6-9c-ac-e5-8f-8a-e6-bf-80-e6-b4-bb-e5-af-86-e9-92-a5","date":"2017-10-30T01:33:25.000Z","updated":"2018-12-12T09:19:14.568Z","comments":true,"path":"2017/10/30/emeditor-17-2-3-e5-ae-98-e6-96-b9-e6-ad-a3-e5-bc-8f-e7-89-88-e6-9c-ac-e5-8f-8a-e6-bf-80-e6-b4-bb-e5-af-86-e9-92-a5/","link":"","permalink":"https://hero.triple.net.cn/2017/10/30/emeditor-17-2-3-e5-ae-98-e6-96-b9-e6-ad-a3-e5-bc-8f-e7-89-88-e6-9c-ac-e5-8f-8a-e6-bf-80-e6-b4-bb-e5-af-86-e9-92-a5/","excerpt":"","text":"EmEditor 17.2.3 官方正式版本及激活密钥终身授权在线激活密钥 DMAZM-WHY52-AX222-ZQJXN-79JXH EmEditor v17.2.3 / v14.8.1 官方正式版 安装版 + 绿色版 + 破解补丁 https://pan.baidu.com/s/1hsQU5VI &gt; 注：14.8.1 版本支持WinXP，14.9.0 版本之后支持Windows7或更高版。 EmEditor 17.2.3 (x86/x64) 官方下载地址安装版： http://files.emeditor.com/emed32\\_17.2.3.exe http://files.emeditor.com/emed64\\_17.2.3.exe 绿色版： http://files.emeditor.com/emed32\\_17.2.3\\_portable.zip http://files.emeditor.com/emed64\\_17.2.3\\_portable.zip EmEditor v14.8.1 (x86/x64) for WinXP 官方下载地址安装版： http://files.emeditor.com/emed32\\_14.8.1.exe http://files.emeditor.com/emed64\\_14.8.1.exe 绿色版： http://files.emeditor.com/emed32\\_14.8.1\\_portable.zip http://files.emeditor.com/emed64\\_14.8.1\\_portable.zip EmEditor 破解为专业版授权通用补丁 by addhaloka ** https://pan.lanzou.com/b105840 https://zdfans.ctfile.com/dir/16343-24913607-9a4e61 本文来源：http://www.safecn.net/13796.html","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[]},{"title":"[shadowsocks error ] undefined symbol: EVP_CIPHER_CTX_cleanup","slug":"ssundefined-symbol-evp-cipher-ctx-cleanup","date":"2017-10-28T15:54:52.000Z","updated":"2018-12-12T09:27:29.851Z","comments":false,"path":"2017/10/28/ssundefined-symbol-evp-cipher-ctx-cleanup/","link":"","permalink":"https://hero.triple.net.cn/2017/10/28/ssundefined-symbol-evp-cipher-ctx-cleanup/","excerpt":"","text":"Installed ss , when I try start with sslocal -c ss.json, its catch an error : undefined symbol: EVP_CIPHER_CTX_cleanup Using compalie to install ss, and, try using python-pip &amp; pip install shadowscks did not work, python version: Python, 2.7.13 the answer from : http://www.cnblogs.com/lzhd24/p/6686803.html 修改方法： 用vi打开文件：vi /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py 跳转到52行（shadowsocks2.8.2版本，其他版本搜索一下cleanup） 进入编辑模式 将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,) 改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,) 再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx) 改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx) 保存并退出 启动shadowsocks服务：service shadowsocks start 或 sslocal -c ss配置文件目录","categories":[{"name":"互联网","slug":"互联网","permalink":"https://hero.triple.net.cn/categories/互联网/"}],"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://hero.triple.net.cn/tags/shadowsocks/"},{"name":"代理","slug":"代理","permalink":"https://hero.triple.net.cn/tags/代理/"},{"name":"python","slug":"python","permalink":"https://hero.triple.net.cn/tags/python/"},{"name":"openssl","slug":"openssl","permalink":"https://hero.triple.net.cn/tags/openssl/"}]},{"title":"通过子查询获取最小值然后分组","slug":"get-minimum-value-and-grouping-in-mysql","date":"2017-10-26T08:23:09.000Z","updated":"2018-12-18T04:38:51.984Z","comments":true,"path":"2017/10/26/get-minimum-value-and-grouping-in-mysql/","link":"","permalink":"https://hero.triple.net.cn/2017/10/26/get-minimum-value-and-grouping-in-mysql/","excerpt":"","text":"通过子查询获取最小值然后分组实际业务中有这样一个需求: 订单表里有一些订单,现在想要知道每个用户最早下单的时间. 也就是说, 想找到每个用户的第一笔订单及其详情! 表结构123456789101112 mysql&gt; describe ord; +---------+-------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +---------+-------------+------+-----+---------+----------------+ | id | int(11) | NO | PRI | NULL | auto_increment | | usr | varchar(20) | NO | | | | | sid | varchar(50) | YES | | | | | orddate | datetime | YES | | NULL | | +---------+-------------+------+-----+---------+----------------+``` ## 测试数据 insert into ord (usr,sid,orddate) values (&apos;AAA&apos;,&apos;Ser2007.1.1-001&apos;,&apos;2007-1-1&apos;), (&apos;AAA&apos;,&apos;Ser2007.1.2-001&apos;,&apos;2007-1-2&apos;), (&apos;AAA&apos;,&apos;Ser2007.10.1-001&apos;,&apos;2007-10-1&apos;), (&apos;AAA&apos;,&apos;Ser2007.10.2-001&apos;,&apos;2007-10-2&apos;), (&apos;AAA&apos;,&apos;Ser2007.10.3-001&apos;,&apos;2007-10-3&apos;), (&apos;BBB&apos;,&apos;Ser2007.1.2-001&apos;,&apos;2007-1-2&apos;), (&apos;BBB&apos;,&apos;Ser2008.10.1-001&apos;,&apos;2008-10-1&apos;), (&apos;BBB&apos;,&apos;Ser2008.10.2-001&apos;,&apos;2008-10-2&apos;), (&apos;CCC&apos;,&apos;Ser2001.1.2-001&apos;,&apos;2001-1-2&apos;), (&apos;CCC&apos;,&apos;Ser2017.8.8-001&apos;,&apos;2017-8-8&apos;); 12## 查看数据 mysql&gt; select * from ord; +----+-----+------------------+---------------------+ | id | usr | sid | orddate | +----+-----+------------------+---------------------+ | 1 | AAA | Ser2007.1.1-001 | 2007-01-01 00:00:00 | | 2 | AAA | Ser2007.1.2-001 | 2007-01-02 00:00:00 | | 3 | AAA | Ser2007.10.1-001 | 2007-10-01 00:00:00 | | 4 | AAA | Ser2007.10.2-001 | 2007-10-02 00:00:00 | | 5 | AAA | Ser2007.10.3-001 | 2007-10-03 00:00:00 | | 6 | BBB | Ser2007.1.2-001 | 2007-01-02 00:00:00 | | 7 | BBB | Ser2008.10.1-001 | 2008-10-01 00:00:00 | | 8 | BBB | Ser2008.10.2-001 | 2008-10-02 00:00:00 | | 9 | CCC | Ser2001.1.2-001 | 2001-01-02 00:00:00 | | 10 | CCC | Ser2017.8.8-001 | 2017-08-08 00:00:00 | +----+-----+------------------+---------------------+ 10 rows in set (0.00 sec) 12## 查询语句及结果: mysql&gt; select a.* from ord a -&gt; inner join (select min(id) id,usr from ord group by usr) b -&gt; on a.id=b.id; +----+-----+-----------------+---------------------+ | id | usr | sid | orddate | +----+-----+-----------------+---------------------+ | 1 | AAA | Ser2007.1.1-001 | 2007-01-01 00:00:00 | | 6 | BBB | Ser2007.1.2-001 | 2007-01-02 00:00:00 | | 9 | CCC | Ser2001.1.2-001 | 2001-01-02 00:00:00 | +----+-----+-----------------+---------------------+ 3 rows in set (0.00 sec) `","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"}]},{"title":"让终端走代理的几种方法","slug":"e8-ae-a9-e7-bb-88-e7-ab-af-e8-b5-b0-e4-bb-a3-e7-90-86-e7-9a-84-e5-87-a0-e7-a7-8d-e6-96-b9-e6-b3-95","date":"2017-10-08T13:54:59.000Z","updated":"2018-12-12T09:13:19.486Z","comments":false,"path":"2017/10/08/e8-ae-a9-e7-bb-88-e7-ab-af-e8-b5-b0-e4-bb-a3-e7-90-86-e7-9a-84-e5-87-a0-e7-a7-8d-e6-96-b9-e6-b3-95/","link":"","permalink":"https://hero.triple.net.cn/2017/10/08/e8-ae-a9-e7-bb-88-e7-ab-af-e8-b5-b0-e4-bb-a3-e7-90-86-e7-9a-84-e5-87-a0-e7-a7-8d-e6-96-b9-e6-b3-95/","excerpt":"","text":"方法1:在终端中直接运行命令 export http_proxy=http://proxyAddress:port 这个办法的好处是简单直接，并且影响面很小（只对当前终端有效，退出就不行了）。 如果你用的是ss代理，在当前终端运行以下命令，那么wget curl 这类网络命令都会经过ss代理 export ALL_PROXY=socks5://127.0.0.1:1080 方法2:把代理服务器地址写入shell配置文件.bashrc或者.zshrc 直接在.bashrc或者.zshrc添加下面内容 export http_proxy=&quot;http://localhost:port&quot; export https_proxy=&quot;http://localhost:port&quot; 以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为 export http_proxy=&quot;socks5://127.0.0.1:1080&quot; export https_proxy=&quot;socks5://127.0.0.1:1080&quot; 或者直接设置ALL_PROXY export ALL_PROXY=socks5://127.0.0.1:1080 localhost就是一个域名，域名默认指向 127.0.0.1，两者是一样的。 然后ESC后:wq保存文件，接着在终端中执行 source ~/.bashrc 或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。 或者通过设置alias简写来简化操作，每次要用的时候输入setproxy，不用了就unsetproxy。 alias setproxy=&quot;export ALL_PROXY=socks5://127.0.0.1:1080&quot; alias unsetproxy=&quot;unset ALL_PROXY&quot; alias ip=&quot;curl -i http://ip.cn&quot; 方法3:改相应工具的配置，比如apt的配置 sudo vim /etc/apt/apt.conf 在文件末尾加入下面这行 Acquire::http::Proxy &quot;http://proxyAddress:port&quot; 保存apt.conf文件即可。 关于apt的代理设置可以参考这里 关于git的代理设置看这里:用shadowsocks加速git clone 方法4(推荐):利用proxychains在终端使用socks5代理 补充： 如果代理服务器需要登陆，这时可以直接把用户名和密码写进去 http_proxy=http://userName:password@proxyAddress:port","categories":[{"name":"互联网","slug":"互联网","permalink":"https://hero.triple.net.cn/categories/互联网/"}],"tags":[{"name":"终端","slug":"终端","permalink":"https://hero.triple.net.cn/tags/终端/"},{"name":"proxy","slug":"proxy","permalink":"https://hero.triple.net.cn/tags/proxy/"},{"name":"代理","slug":"代理","permalink":"https://hero.triple.net.cn/tags/代理/"}]},{"title":"PHP 的工厂模式","slug":"php-e7-9a-84-e5-b7-a5-e5-8e-82-e6-a8-a1-e5-bc-8f","date":"2017-10-07T15:29:52.000Z","updated":"2018-12-12T09:22:01.283Z","comments":true,"path":"2017/10/07/php-e7-9a-84-e5-b7-a5-e5-8e-82-e6-a8-a1-e5-bc-8f/","link":"","permalink":"https://hero.triple.net.cn/2017/10/07/php-e7-9a-84-e5-b7-a5-e5-8e-82-e6-a8-a1-e5-bc-8f/","excerpt":"","text":"简单至极的代码，适合 abc。。 在大型系统中，许多代码依赖于少数几个关键类。需要更改这些类时，可能会出现困难。例如，假设您有一个从文件读取的 User 类。您希望将其更改为从数据库读取的其他类，但是，所有的代码都引用从文件读取的原始类。这时候，使用工厂模式会很方便。 看代码： 源码： &lt;?php interface IUser{ function getName(); } class User implements IUser{ private static $userID=0; public function __construct($user_id){ self::$userID=$user_id; } function getName(){ if (self::$userID === 1) { return &quot;No.1 !&quot;; } else { return &quot;Line up! &quot;; } } } class UserFactory{ public static function createUser($id){ return new User($id); } } // test ... $uf1 = UserFactory::createUser(1); echo &apos;No.1 : &apos;, $uf1-&gt;getName() , &quot;&lt;br /&gt;&quot;; $uf2 = UserFactory::createUser(2); echo &apos;No.2 : &apos;, $uf2-&gt;getName(), &quot;&lt;br /&gt;&quot;;","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"工厂模式","slug":"工厂模式","permalink":"https://hero.triple.net.cn/tags/工厂模式/"},{"name":"设计模式","slug":"设计模式","permalink":"https://hero.triple.net.cn/tags/设计模式/"}]},{"title":"Ubuntu Server 14.04搭建OpenVPN服务器保护你的隐私生活","slug":"ubuntu-server-setting-openvpn","date":"2017-09-27T09:11:50.000Z","updated":"2018-12-12T10:44:50.499Z","comments":false,"path":"2017/09/27/ubuntu-server-setting-openvpn/","link":"","permalink":"https://hero.triple.net.cn/2017/09/27/ubuntu-server-setting-openvpn/","excerpt":"","text":"我们支持保护隐私，不为我们有自己的秘密需要保护，只是我们认为保护隐私应该成为一项基本人权。所以我们坚信无论谁在什么时候行使这项权利，都应该不受拘束的获取必须的工具和服务。OpenVPN就是这样一种服务并且有多种工具(客户端) 来让我们利用并享受这种服务。 通过与一个OpenVPN服务器建立连接，我们基本上在我们的设备和远端运行OpenVPN的主机之间建立了一个安全的通信通道。尽管在两个端点之间的通信可能被截获，但是信息是经过高强度加密的所以实际上它对于攻击者没什么用。OpenVPN除了扮演加密通信通道的调解人，我们也可以通过设置使服务器扮演互联网网关的角色。通过这种方式，我们可以连接任何不安全的Wifi，然后迅速的链接到远程的OpenVPN服务器，然后在不需要考虑偷窥的人或者无聊的管理员的情况下运行需要上网的程序。(注意:OpenVPN服务器旁还是需要信任的管理员的。)这篇文章将一步一步的教会你如何在Ubuntu Server 14.04 LTS上安装OpenVPN。 OpenVPN所在的主机可能是云上的一台VPS，一台在我们家里某台电脑上运行的虚拟机，或者是一个老到你都快忘了的设备。Ubuntu下OpenVPN客户端配置教程 http://www.linuxidc.com/Linux/2013-06/86562.htm Ubuntu 10.04搭建OpenVPN http://www.linuxidc.com/Linux/2012-11/74790.htm Ubuntu 13.04 VPN (OpenVPN) 配置和连接不能同时访问内外网的问题 http://www.linuxidc.com/Linux/2013-07/86899.htm 如何在Linux上用OpenVPN搭建安全的远程网络架构 http://www.linuxidc.com/Linux/2013-11/92646.htm 第一步 准备系统我们需要Ubuntu Server主机的一个命令行终端，比如通过SSH从远程访问它。首先需要更新它的本地仓库数据:1sub0@delta:~$ sudo apt-get update 进行操作系统和已安装的包的升级，输入:1sub0@delta:~$ sudo apt-get dist-upgrade 如果升级了新内核，那就需要重启。当更新完成后，就该安装OpenVPN了:1sub0@delta:~$ sudo apt-get-y install openvpn easy-rsa dnsmasq 注意，我们用apt-get安装了三个包: openvpn提供了OpenVPN的核心 easy-rsa包含了一些有用的密钥管理脚本 dnsmasq是当我们的OpenVPN所在的主机将扮演客户端的路由器时会用到的域名服务器 第二步 生成证书和私钥这是安装OpenVPN中最重要和最关键的一步，目的是建立公钥基础设施(PKI)。包括如下内容: 为OpenVPN服务器创建一个证书(公钥)和一个私钥 为每个OpenVPN客户端创建证书和私钥 建立一个证书颁发机构(CA)并创建证书和私钥。这个私钥用来给OpenVPN服务器和客户端的证书签名 从最后一个做起，我们先建立一个目录:1sub0@delta:~$ sudo mkdir /etc/openvpn/easy-rsa 然后把easy-rsa的文件拷过去:1sub0@delta:~$ sudo cp -r /usr/share/easy-rsa/\\* /etc/openvpn/easy-rsa 在我们创建CA的私钥之前，我们先编辑/etc/openvpn/easy-rsa/vars(我们喜欢用nano编辑器，不过这只是我们的喜好，你爱用什么用什么):1sub0@delta:~$ sudo nano /etc/openvpn/easy-rsa/vars 在文件的尾部，我们设置主证书和密钥的信息:123456789export KEY_COUNTRY=&quot;GR&quot;export KEY_PROVINCE=&quot;Central Macedonia&quot;export KEY_CITY=&quot;Thessaloniki&quot;export KEY_ORG=&quot;Parabing Creations&quot;export KEY_EMAIL=&quot;nobody@parabing.com&quot;export KEY_CN=&quot;VPNsRUS&quot;export KEY_NAME=&quot;VPNsRUS&quot;export KEY_OU=&quot;Parabing&quot;export KEY_ALTNAMES=&quot;VPNsRUS&quot; 你可以根据自己的情况设置不同的值。特别注意最后 KEY_ALTNAMES 这一行，尽管这不是原本 vars 文件中有的但是我们还是把它加到文件的尾部，不然build-ca脚本会运行失败。保存更改，我们得按\\[CTRL+O\\]然后按\\[Enter\\]。 想退出 nano，请按\\[CTRL+X\\]。 现在，我们要获得root访问权限，继续生成主证书和私钥(LCTT译注:请注意命令行账户发生了改变):1234567891011121314151617181920212223242526271. sub0@delta:~$ sudo su2. root@delta:/home/sub0\\# cd /etc/openvpn/easy-rsa3. root@delta:/etc/openvpn/easy-rsa\\# source vars4. NOTE:If you run ./clean-all, I will be doing a rm -rf on /etc/openvpn/easy-rsa/keys5. root@delta:/etc/openvpn/easy-rsa\\# sh clean-all6. root@delta:/etc/openvpn/easy-rsa\\# sh build-ca7. Generating a 1024 bit RSA private key8. ...++++++9. ................++++++10. writing newprivate key to &apos;ca.key&apos;11. \\-\\-\\-\\-\\-12. You are about to be asked to enter information that will be incorporated13. into your certificate request.14. What you are about to enter is what is called a DistinguishedNameor a DN.15. There are quite a few fields but you can leave some blank16. For some fields there will be a default value,17. If you enter &apos;.&apos;, the field will be left blank.18. \\-\\-\\-\\-\\-19. CountryName(2 letter code)\\[GR\\]:20. StateorProvinceName(full name)\\[CentralMacedonia\\]:21. LocalityName(eg, city)\\[Thessaloniki\\]:22. OrganizationName(eg, company)\\[ParabingCreations\\]:23. OrganizationalUnitName(eg, section)\\[Parabing\\]:24. CommonName(eg, your name or your server&apos;s hostname) \\[VPNsRUS\\]:25. Name \\[VPNsRUS\\]:26. Email Address \\[nobody@parabing.com\\]:27. root@delta:/etc/openvpn/easy-rsa# 在我们的例子中，所有问题的答案都选择了默认的。在运行了build-ca脚本后，我们就获得了主证书文件(keys/ca.crt)和对应的私钥(keys/ca.key)。私钥必须不计代价的保密。 第三步 生成OpenVPN服务器的证书和私钥在我们为OpenVPN服务器生成证书和密钥之前，我们得给他起个名。我决定把它叫”delta”，然后运行build-key-server脚本来获取证书和密钥:123456789101112131415161718192021222324252627282930313233343536373839404142431. root@delta:/etc/openvpn/easy-rsa\\# sh build-key-server delta2. Generating a 1024 bit RSA private key3. ....++++++4. ...++++++5. writing newprivate key to &apos;delta.key&apos;6. \\-\\-\\-\\-\\-7. You are about to be asked to enter information that will be incorporated8. into your certificate request.9. What you are about to enter is what is called a DistinguishedNameor a DN.10. There are quite a few fields but you can leave some blank11. For some fields there will be a default value,12. If you enter &apos;.&apos;, the field will be left blank.13. \\-\\-\\-\\-\\-14. CountryName(2 letter code)\\[GR\\]:15. StateorProvinceName(full name)\\[CentralMacedonia\\]:16. LocalityName(eg, city)\\[Thessaloniki\\]:17. OrganizationName(eg, company)\\[ParabingCreations\\]:18. OrganizationalUnitName(eg, section)\\[Parabing\\]:19. CommonName(eg, your name or your server&apos;s hostname) \\[delta\\]:20. Name \\[VPNsRUS\\]:deltaVPN21. Email Address \\[nobody@parabing.com\\]:22. Please enter the following &apos;extra&apos; attributes23. to be sent with your certificate request24. A challenge password \\[\\]:25. An optional company name \\[\\]:26. Using configuration from /etc/openvpn/easy-rsa/openssl-1.0.0.cnf27. Check that the request matches the signature28. Signature ok29. The Subject&apos;s DistinguishedNameisas follows30. countryName :PRINTABLE:&apos;GR&apos;31. stateOrProvinceName :PRINTABLE:&apos;Central Macedonia&apos;32. localityName :PRINTABLE:&apos;Thessaloniki&apos;33. organizationName :PRINTABLE:&apos;Parabing Creations&apos;34. organizationalUnitName:PRINTABLE:&apos;Parabing&apos;35. commonName :PRINTABLE:&apos;delta&apos;36. name :PRINTABLE:&apos;deltaVPN&apos;37. emailAddress :IA5STRING:&apos;nobody@parabing.com&apos;38. Certificateis to be certified untilApr708:06:022024 GMT (3650 days)39. Sign the certificate?\\[y/n\\]:y40. 1out of 1 certificate requests certified, commit?\\[y/n\\]y41. Writeout database with1new entries42. DataBaseUpdated43. root@delta:/etc/openvpn/easy-rsa# 当脚本成功运行完的时候，我们就得到了服务器的证书(keys/delta.crt)和私钥(keys/delta.key)。注意服务器证书被CA的私钥签名了。 第四步 生成Diffie-Hellman参数幸亏有了Diffie-Hellman参数，我们才能在不安全的通信通道里安全的交换密钥。为了生成它我们需要键入:123456789101. root@delta:/etc/openvpn/easy-rsa\\# sh build-dh2. Generating DH parameters,2048 bit long safe prime, generator 23. Thisis going to take a long time4. .......................+.....................................+..5. ...........................+..+.....................+...........6. ..............................................+.................7. .......................+........................................8. ................................................+...............9. .......................................++*++*++*10. root@delta:/etc/openvpn/easy-rsa# 证书，私钥和包含Diffie-Hellman参数的文件已生成，它们都储存在/etc/openvpn/easy-rsa/keys，所以我们到现在为止已经有如下五个文件了:123451. **ca.crt** – 证书颁发机构(CA)的证书2. **ca.key** – CA的私钥3. **delta.crt** – OpenVPN服务器的证书4. **delta.key** – OpenVPN服务器的私钥5. **dh2048.pem** – Diffie-Hellman参数文件 你自己的OpenVPN服务器命名可能和我们的不同。现在我们需要拷贝除了ca.key的文件到/etc/openvpn:12341. root@delta:/etc/openvpn/easy-rsa\\# cd keys2. root@delta:/etc/openvpn/easy-rsa/keys\\# cp ca.crt delta.crt delta.key dh2048.pem /etc/openvpn3. root@delta:/etc/openvpn/easy-rsa/keys\\# cd ..4. root@delta:/etc/openvpn/easy-rsa# 第五步 为OpenVPN客户端生成证书和私钥试想我们的笔记本要连接OpenVPN服务器。为了实现这个很常见的情况，我们首先需要为客户端(比如:我们的笔记本)生成证书和私钥，在/etc/openvpn/easy-rsa有一个脚本帮我们完成这项工作:1234567891011121314151617181920212223242526272829303132333435363738394041424344451. root@delta:/etc/openvpn/easy-rsa\\# source vars2. NOTE:If you run ./clean-all, I will be doing a rm -rf on /etc/openvpn/easy-rsa/keys3. root@delta:/etc/openvpn/easy-rsa\\# ./build-key laptop4. Generating a 1024 bit RSA private key5. .......................................++++++6. ...................................................................................................++++++7. writing newprivate key to &apos;laptop.key&apos;8. \\-\\-\\-\\-\\-9. You are about to be asked to enter information that will be incorporated10. into your certificate request.11. What you are about to enter is what is called a DistinguishedNameor a DN.12. There are quite a few fields but you can leave some blank13. For some fields there will be a default value,14. If you enter &apos;.&apos;, the field will be left blank.15. \\-\\-\\-\\-\\-16. CountryName(2 letter code)\\[GR\\]:17. StateorProvinceName(full name)\\[CentralMacedonia\\]:18. LocalityName(eg, city)\\[Thessaloniki\\]:19. OrganizationName(eg, company)\\[ParabingCreations\\]:20. OrganizationalUnitName(eg, section)\\[Parabing\\]:21. CommonName(eg, your name or your server&apos;s hostname) \\[laptop\\]:22. Name \\[VPNsRUS\\]:23. Email Address \\[nobody@parabing.com\\]:24. Please enter the following &apos;extra&apos; attributes25. to be sent with your certificate request26. A challenge password \\[\\]:27. An optional company name \\[\\]:28. Using configuration from /etc/openvpn/easy-rsa/openssl-1.0.0.cnf29. Check that the request matches the signature30. Signature ok31. The Subject&apos;s DistinguishedNameisas follows32. countryName :PRINTABLE:&apos;GR&apos;33. stateOrProvinceName :PRINTABLE:&apos;Central Macedonia&apos;34. localityName :PRINTABLE:&apos;Thessaloniki&apos;35. organizationName :PRINTABLE:&apos;Parabing Creations&apos;36. organizationalUnitName:PRINTABLE:&apos;Parabing&apos;37. commonName :PRINTABLE:&apos;laptop&apos;38. name :PRINTABLE:&apos;VPNsRUS&apos;39. emailAddress :IA5STRING:&apos;nobody@parabing.com&apos;40. Certificateis to be certified untilApr718:00:512024 GMT (3650 days)41. Sign the certificate?\\[y/n\\]:y42. 1out of 1 certificate requests certified, commit?\\[y/n\\]y43. Writeout database with1new entries44. DataBaseUpdated45. root@delta:/etc/openvpn/easy-rsa# 我们为密钥选取的名字是”laptop”，当build-key脚本运行完之后，我们就得到了在keys/laptop.crt的证书和在keys/laptop.key的私钥。有了这两个文件和CA的证书，我们得把这三个文件拷贝到用户有(比如用户sub0)权访问的地方。比如我们可以在用户的home目录中新建一个目录并把三个文件拷贝过去:1234561. root@delta:/etc/openvpn/easy-rsa\\# mkdir /home/sub0/ovpn-client2. root@delta:/etc/openvpn/easy-rsa\\# cd keys3. root@delta:/etc/openvpn/easy-rsa/keys\\# cp ca.crt laptop.crt laptop.key /home/sub0/ovpn-client4. root@delta:/etc/openvpn/easy-rsa/keys\\# chown -R sub0:sub0 /home/sub0/ovpn-client5. root@delta:/etc/openvpn/easy-rsa/keys\\# cd ..6. root@delta:/etc/openvpn/easy-rsa# ovpn-client文件夹必须安全的拷贝到我们的笔记本电脑上。我们可以给多个客户端分发这三个文件。当然了，等我们需要一个不一样的证书-私钥对的时候只要再次运行build-key脚本即可。 第六步 -- OpenVPN服务器设置等会我们的OpenVPN服务器就要启动并运行了。但是开始的时候，我们需要更改一些设置。在/usr/share/doc/openvpn/examples/sample-config-files中有一个示例配置文件，它很适合我们的教程，这个文件叫server.conf.gz:123451. root@delta:/etc/openvpn/easy-rsa\\# cd /etc/openvpn2. root@delta:/etc/openvpn\\# cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz .3. root@delta:/etc/openvpn\\# gunzip -d server.conf.gz4. root@delta:/etc/openvpn\\# mv server.conf delta.conf5. root@delta:/etc/openvpn# 如你所见，我们把server.conf.gz拷贝到/etc/openvpn，解压并重命名到delta.conf。你可以按个人喜好给OpenVPN服务器配置文件取名字，但是它必须有”.conf”扩展名。我们现在用nano打开配置文件:11. root@delta:/etc/openvpn\\# nano delta.conf 下面是我们应该做出的更改。 首先，定位到这一行 cert server.crt key server.key 确认OpenVPN服务器证书和私钥的位置和名称，在我们的例子中，这两行要改成121. cert delta.crt2. key delta.key 然后定位到这一行 dh dh1024.pem 用”2048”代替”1024”: dh dh2048.pem 在配置文件的末尾，我们添加下面这两行: push “redirect-gateway def1” push “dhcp-option DNS 10.8.0.1” 最后这两行指示客户端用OpenVPN作为默认的网关，并用10.8.0.1作为DNS服务器。注意10.8.0.1是OpenVPN启动时自动创建的隧道接口的IP。如果客户用别的域名解析服务，那么我们就得提防不安全的DNS服务器。为了避免这种泄露，我们建议所有OpenVPN客户端使用10.8.0.1作为DNS服务器。我们以这种方式来开始运行OpenVPN服务器:11. root@delta:/etc/openvpn\\# service openvpn start 默认的，OpenVPN服务器监听1194/UDP端口。一种查看的方法是使用netstat工具:1234567891. root@delta:/etc/openvpn\\# netstat -anup2. ActiveInternet connections (servers and established)3. ProtoRecv-Q Send-Q LocalAddressForeignAddressState PID/Program name4. udp 000.0.0.0:541490.0.0.0:*555/dhclient5. udp 000.0.0.0:11940.0.0.0:*3024/openvpn6. udp 000.0.0.0:530.0.0.0:*2756/dnsmasq7. udp 000.0.0.0:680.0.0.0:*555/dhclient8. udp6 00:::60622:::*555/dhclient9. udp6 00:::53:::*2756/dnsmasq 看起来一切运行的不错，但是我们还没设置DNS服务器呢。 第七步 为OpenVPN客户端搭建DNS这就是为什么我们要安装dnsmasq的原因，打开它的配置文件。11. root@delta:/etc/openvpn\\# nano /etc/dnsmasq.conf 定位到这行:11. #listen-address= 把它换成下面这样:11. listen-address=127.0.0.1,10.8.0.1 然后定位到这行:11. #bind-interfaces 把”#”删了:11. bind-interfaces 为了让dnsmasq应用这些更改，我们重启它:1231. root@delta:/etc/openvpn\\# service dnsmasq restart2. *Restarting DNS forwarder and DHCP server dnsmasq \\[ OK \\]3. root@delta:/etc/openvpn# 现在，dnamasq在本地回环(lo)和隧道(tun0)接口监听DNS请求。netstat的输出看起来是这个样子的:1234567891. root@delta:/etc/openvpn\\# netstat -anup2. ActiveInternet connections (servers and established)3. ProtoRecv-Q Send-Q LocalAddressForeignAddressState PID/Program name4. udp 000.0.0.0:572190.0.0.0:*638/dhclient5. udp 000.0.0.0:11940.0.0.0:*911/openvpn6. udp 00127.0.0.1:530.0.0.0:*1385/dnsmasq7. udp 0010.8.0.1:530.0.0.0:*1385/dnsmasq8. udp 000.0.0.0:680.0.0.0:*638/dhclient9. udp6 00:::39148:::*638/dhclient 第八步 路由功能我们希望在一些机器或虚拟机上运行的OpneVPN有路由的功能，这意味着要开启IP转发。为了打开它，我们用root账户键入:11. root@delta:/etc/openvpn\\# echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward 为了让这个设置重启也好用，我们编辑 /etc/sysctl.conf:11. root@delta:/etc/openvpn\\# nano /etc/sysctl.conf 编辑这行:11. #net.ipv4.ip_forward=1 把”#”删了:11. net.ipv4.ip_forward=1 还需要激活一些iptables相关的规则:123451. root@delta:/etc/openvpn\\# iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT2. root@delta:/etc/openvpn\\# iptables -A FORWARD -s 10.8.0.0/24 -j ACCEPT3. root@delta:/etc/openvpn\\# iptables -A FORWARD -j REJECT4. root@delta:/etc/openvpn\\# iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE5. root@delta:/etc/openvpn# 当然了，我们希望每次启动的时候，这些规则都好用。所以我们得把它们加到/etc/rc.local里:1234567891011121314151617181. #!/bin/sh -e2. #3. \\# rc.local4. #5. \\# This script is executed at the end of each multiuser runlevel.6. \\# Make sure that the script will &quot;exit 0&quot; on success or any other7. \\# value on error.8. #9. \\# In order to enable or disable this script just change the execution10. \\# bits.11. #12. \\# By default this script does nothing.13. iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT14. iptables -A FORWARD -s 10.8.0.0/24-j ACCEPT15. iptables -A FORWARD -j REJECT16. iptables -t nat -A POSTROUTING -s 10.8.0.0/24-o eth0 -j MASQUERADE17. service dnsmasq restart18. exit0 请注意倒数第二行: service dnsmasq restart 这非常重要:在系统启动时，dnsmasq 会尝试在 OpenVPN 之前启动。但是 OpenVPN 启动之前是没有隧道(tun0)接口的，所以dnsmasq自然就挂了。过了一阵，当 /etc/rc.local 读到隧道(tun0)接口出现时，它会在这时重启dnsmasq然后就一切如你所愿了。 第九步 客户端设置在第五步，我们在用户的home目录里我们建立了ovpn-client文件夹(在我们的例子里是/home/sub0)。在哪里有CA的证书和客户端证书和私钥。现在只缺客户端配置文件了，在 /usr/share/doc/openvpn/examples/sample-config-files 有一个示例配置文件:123451. root@delta:/etc/openvpn\\# exit2. exit3. sub0@delta:~$ cd ~/ovpn-client4. sub0@delta:~/ovpn-client$ cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf .5. sub0@delta:~/ovpn-client$ 我们需要编辑 client.conf，定位到这一行:11. remote my-server-11194 “my-server-1”是一个占位符，现在我们要把它换成我们自己服务器的公网域名或IP。如果我们已经给服务器分配域名了，那只要把它填到my-server-1的位置。如果没有域名，那么得获取公网IP。如何获取呢?一种方式是键入下列命令:11. sub0@delta:~/ovpn-client$ curl ipecho.net/plain ; echo (如果不是一个数字的IP地址， 或是发生错误，那就等会再试。)所以我们现在知道我们的服务器公网IP了，但是它是动态的还是静态的呢?当我们把服务器架设在家或者办公室的时候，极有可能就是动态IP。如果是动态IP的话，可以用免费的动态域名服务(DDNS)，比如No-IP的服务。 如果使用No-IP，假设我们选择了免费的域名dnsalias.net，那么这一行应该像这样填写:11. remote ovpn.dnsalias.net 1194 “ovpn”是我们给服务器起的主机名。如果我们的服务器在云上，那么它可能有一个静态IP。如果有静态IP的话，那么这一行应该是这样的:11. remote 1.2.3.41194 还要修改两行:121. cert client.crt2. key client.key 在我们的例子里，客户端的证书和密钥的名字分别是laptop.crt 和 laptop.key 所以我们的 client.conf 要包含下面这两行:121. cert laptop.crt2. key laptop.key 在确认保存 client.conf 的修改之后，我们需要安全的把整个 ovpn-client 文件夹传输到客户端。一种方式是使用 scp 命令(安全拷贝或在SSH上拷贝)。另一种方式由优秀而免费的软件 FileZilla 提供，使用在SSH上运行的FTP(SFTP)。 第十步 连接并测试 所以我们到底怎么样才能链接到远程的OpenVPN服务器的呢?它完全取决于我们手中现有的设备类型，当然也取决于所运行的操作系统。我们将在四种不同类别的操作系统上运行，Linux， Windows， OS X和iOS/[Android]。注意，无论在什么设备和系统上，我们都得在OpenVPN服务器的本地网络外才能连接成功。i此外，如果在服务器前有防火墙，我们需要增加一条这样的规则: 把所有从1194/UDP端口收到的包转发到服务器公网接口的1194/UDP端口。 这是一个简单的防火墙规则。事不宜迟，让我们与我们难以置信的OpenVPN服务器建立第一个连接吧。 Linux: 我们只需安装 openvpn 包。一种连接远程 OpenVPN 服务器的方式是新建一个终端，切换到ovpn-client文件夹并以root身份或使用sudo来键入下列命令:11. /usr/sbin/openvpn --config client.conf 任何时候如果我们需要终止OpenVPN，按[CTRL+C]就行了。 Windows: 有一个免费的OpenVPN客户端软件叫做OpenVPN Desktop Client。 配置文件client.conf需要重命名成client.ovpn，这就是我们需要提供给OpenVPN Desktop Client的文件。 程序会读取client.ovpn并给OpenVPN服务器生成一个新的连接配置。 OS X: tunnelblick是一款可以连接OpenVPN的免费开源OS X软件。 Viscosity也可以但它是商业软件，不过我们喜欢。Viscosity会读取client.conf并给OpenVPN服务器生成一个新的连接配置。 iOS/Android: OpenVPN connect是绝佳的选择。它是免费的且可以从App Store和Google Play store获得 不管是什么平台，有时我们想检验我们是否真的使用OpenVPN连接了。 一种检验方法是完成下面这简单的4步: 在连接到OpenVPN服务器前我们需要… 打开whatip.com记录我们的公网IP 打开[dnsleaktest.com][10]，运行标准测试(standard test)，记录我们的域名解析服务器 在连接到OpenVPN服务器后重复这两部。如果我们获取到两个不同的公网IP，这意味着我们的网络出口已在远端OpenVPN服务器那。 此外，如果获取了两个不同的域名解析服务器，那么就不存在DNS泄露的问题了。 感言我用了三个不同的OpenVPN服务器，都是定制的。 一个运行在希腊Thessaloniki的家庭办公室的pfSense路由。 当我不在办公室时，我用这个服务器安全的连接到局域网。 剩下的两个服务器在两个不同的VPS上，一个在冰岛雷克雅未克，另一个在美国纽泽西州。 当我在外面且需要任意用一个WiFi热点的时候，我不必考虑安全问题:我只需简单的连接到雷克雅未克的服务器然后正常上网。 有时我想看看那些限制用户地理位置在美国的服务。 在这种不太常见的情况下，新泽西的服务器就派上用场了，当我连接时，我就获得了美国的一个公网IP，这样就可以访问有地理位置限制的服务了。 值得注意的是，一些服务会把一些知名的VPN公司的IP列入黑名单。 这是在你选的VPS提供商建立自己的OpenVPN_十分重要_的一个优点:这不大可能被列入黑名单。 无论你的物理位置在哪， OpenVPN确保客户端和服务器之间的数据流是高度加密的。 没有OpenVPN的数据则是另一种情况。 取决于不同的应用层协议，它可能仍然是加密的，但它也可能是未加密的。 所以除非你对OpenVPN服务器和它的本地网络有绝对的控制权，你不能完全相信另一端的管理员。 这种精神是显而易见的:如果你真的在乎你自己的隐私，那么你需要注意你的行为可能在破坏它。 一个例子是我们希望点对点传输。我们有一个在云上配置好的OpenVPN服务器。当需要任意用一个WiFi热点的时候，你没有丝毫的担心，因为你连在OpenVPN服务器上。然后你打开你最喜欢的电子邮件客户端从一个依然使用SMTP的老服务器收信。你猜会发生什么?你的用户名和密码以未加密的纯文本格式离���OpenVPN服务器。与此同时一个在你OpenVPN服务器附近的鬼鬼祟祟的管理员很容易就嗅探出你的证书并记录到他们越来越长的名叫”random happy people.txt”的列表。 所以你该做什么?很简单。你应该继续使用OpenVPN服务器，但不要使用应用了旧的或不安全的协议的应用程序。 享受你的OpenVPN服务器吧!","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"openvpn","slug":"openvpn","permalink":"https://hero.triple.net.cn/tags/openvpn/"}]},{"title":"Ubuntu ocserv搭建","slug":"ubuntu-ocserv-e6-90-ad-e5-bb-ba","date":"2017-09-26T23:18:35.000Z","updated":"2018-12-12T09:24:02.249Z","comments":false,"path":"2017/09/27/ubuntu-ocserv-e6-90-ad-e5-bb-ba/","link":"","permalink":"https://hero.triple.net.cn/2017/09/27/ubuntu-ocserv-e6-90-ad-e5-bb-ba/","excerpt":"","text":"Ubuntu ocserv搭建Android上上推，用shadowsocks那是一个舒心。可是换了iOS，就没那么方便的自动切换代理了，比较普遍的是pac或apn。 pac就wifi下还说得过去，搞个树莓派什么的玩玩，也挺geek的，4G网络别想了。apn这货不是很安全，http代理那尿性也知道了＝＝。 后来发现Cisco AnyConnect，Cisco的VPN肯定比其他代理靠谱多了，要的就是安全、稳定与高效。另外一个好处就是，可以按需连接，不用全局开代理。全局就是国内的站点又绕了地球一圈，又回来，蛋疼＝＝。 要搭建AnyConnect的VPN，需要ocserv。截止到今天，最新的版本是0.10.7，可以在官方的changelog页面，找到版本相关信息。 ocserv的配置还是比较变态的，虽然官方的文档说得很清楚，但还是有点晕晕的，涉及方方面面的知识挺杂的。网上的中文教程也是质量不高，普遍的技术类的中文教程貌似都这样。怕自己以后忘了，或者也有同样想搭建ocserv的童鞋，所以纪录下。 以下教程基于: Ubuntu 14.04 x64 ocserv 0.10.7 首先，你需要一个女朋友(大雾，不是，需要一台Ubuntu 14.04 x64的VPS。 就最近来说，digitalocean的速度好慢好慢?，新加坡或旧金山都慢出翔?了，福州电信或联通是这样。 vultr东京??的速度还不错。 有需要的童鞋，可以用我的邀请码，猛戳?http://www.vultr.com/?ref=6829224。还是那么想要digitalocean，咱也有邀请码?，猛戳?https://www.digitalocean.com/?refcode=bd778c035a7e。 小广告打完了，不废话啦，开始正题。 准备工作下载 ocserv 最新的包:wget ftp://ftp.infradead.org/pub/ocserv/ocserv-0.10.7.tar.xz 解压tar -xf ocserv-0.10.7.tar.xz 安装依赖apt-get install build-essential pkg-config libgnutls28-dev libwrap0-dev libpam0g-dev libseccomp-dev libreadline-dev libnl-route-3-dev 编译&amp;安装cd ocserv-0.10.7/ ./configure make make install 安装nginx(后续下载user.p12，需要用到)apt-get install nginx 证书相关创建一个新的目录，放ocserv相关的配置文件、秘钥与证书mkdir /etc/ocserv cd /etc/ocserv 创建 ca.tmplcn = &quot;fff&quot; organization = &quot;fff&quot; serial = 1 expiration_days = 3650 ca signing_key cert_signing_key crl_signing_key 生成 ca 秘钥与证书certtool --generate-privkey --outfile ca-key.pem certtool --generate-self-signed --load-privkey ca-key.pem --template ca.tmpl --outfile ca-cert.pem 创建 server.tmpl，111.111.111.111替换成你自己VPS的ipcn = &quot;111.111.111.111&quot; organization = &quot;fff&quot; expiration_days = 3650 signing_key encryption_key tls_www_server 生成 server 秘钥与证书certtool --generate-privkey --outfile server-key.pem certtool --generate-certificate --load-privkey server-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template server.tmpl --outfile server-cert.pem 创建 user.tmpl, uid这个很多教程都忽略了，没这个，证书验证登陆就不能用了，这边自己也是浪费了好多时间。cn = &quot;fff&quot; unit = &quot;fff&quot; uid = &quot;fff&quot; expiration_days = 3650 signing_key tls_www_client 生成 user 秘钥与证书certtool --generate-privkey --outfile user-key.pem certtool --generate-certificate --load-privkey user-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template user.tmpl --outfile user-cert.pem 将证书转换为 PKCS12，会提示输入两次密码，随便输，一样就可以咯。待会iOS客户端导入证书的时候，会提示输入密码，这个密码就是现在要输的密码。openssl pkcs12 -export -inkey user-key.pem -in user-cert.pem -certfile ca-cert.pem -out user.p12 将生成好的user.p12，拷贝到nginx的http服务目录，方便下载cp user.p12 /usr/share/nginx/html 拷贝默认配置文件cp ~/ocserv-0.10.7/doc/sample.config config 证书配置相关说明fff 是神马，它是一个很神秘的组织，每个人都举着火把?。 expiration_days 是证书过期的时间，时间单位：天。 配置相关修改 config，auth改为证书认证的方式，注释掉其他 auth =开头的auth = &quot;certificate&quot; 配置 server 秘钥与证书server-cert = /etc/ocserv/server-cert.pem server-key = /etc/ocserv/server-key.pem 配置 ca 证书ca-cert = /etc/ocserv/ca-cert.pem 配置端口号tcp-port = 2333 udp-port = 2333 修改dnsdns = 8.8.8.8 dns = 8.8.4.4 确保以下两个都是 true，貌似默认就是了try-mtu-discovery = true cisco-client-compat = true 修改route，咱这边是都注释掉，按需修改。可以参考 kevinzhow 童鞋的配置。修改no route，咱这边是保持默认配置，这个添加完，貌似就不走代理，不过客户端那边也可以配置，就没去动它，按需修改修改/etc/sysctl.conf，把下面注释去掉net.ipv4.ip_forward=1 重新加载下，让 /etc/sysctl.conf 生效sysctl -p /etc/sysctl.conf 打开 TCP 和 UDP 端口，比如刚才的端口是2333，那么现在也要是2333iptables -t filter -A INPUT -p tcp -m tcp --dport 2333 -j ACCEPT iptables -t filter -A INPUT -p udp -m udp --dport 2333 -j ACCEPT iptables -t nat -A POSTROUTING -j MASQUERADE debug模式打开ocserv --config=/etc/ocserv/config -f -d 1 查看端口占用，比如查看2333端口lsof -i:2333 干掉占用端口的进程，假设刚才占用2333端口的pid是12345kill 9 12345 iOS客户端配置安装Cisco AnyConnectApp Stroe地址https://itunes.apple.com/cn/app/cisco-anyconnect/id392790924 导入证书诊断 &gt; 证书 > 导入用户证书，会提示你输入URL，记得加http://，假设你的VPS的ip 是 111.111.111.111 ,拷贝到nginx目录的是user.p12，就应该输入 http://111.111.111.111/user.p12 添加连接连接 > 添加VPN连接 说明，随便填 服务器地址，假设你的VPS的ip 是 111.111.111.111，端口是 2333，那么就是 111.111.111.111:2333，这边就不需要前面加http://了。 高级 &gt; 证书，选择你刚才导入的那个证书 高级 &gt; 按需连接，打开，出现 域列表，永不连接 那边可以添加一下常用的国内站点 ####设置 设置 &gt; 阻止不信任的服务器，这个关掉，不然使用自己颁发的证书会有问题 设置 > VPN FIPS模式，这个打开，貌似会比较稳定，心里作用吧(¬_¬)","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"anyconnect","slug":"anyconnect","permalink":"https://hero.triple.net.cn/tags/anyconnect/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://hero.triple.net.cn/tags/ubuntu/"},{"name":"ocserv","slug":"ocserv","permalink":"https://hero.triple.net.cn/tags/ocserv/"},{"name":"思科","slug":"思科","permalink":"https://hero.triple.net.cn/tags/思科/"}]},{"title":"centos7 mysql数据库安装和配置","slug":"centos7-mysql-e6-95-b0-e6-8d-ae-e5-ba-93-e5-ae-89-e8-a3-85-e5-92-8c-e9-85-8d-e7-bd-ae","date":"2017-09-26T02:55:58.000Z","updated":"2018-12-12T08:59:08.086Z","comments":true,"path":"2017/09/26/centos7-mysql-e6-95-b0-e6-8d-ae-e5-ba-93-e5-ae-89-e8-a3-85-e5-92-8c-e9-85-8d-e7-bd-ae/","link":"","permalink":"https://hero.triple.net.cn/2017/09/26/centos7-mysql-e6-95-b0-e6-8d-ae-e5-ba-93-e5-ae-89-e8-a3-85-e5-92-8c-e9-85-8d-e7-bd-ae/","excerpt":"","text":"一、系统环境yum update升级以后的系统版本为 [root@yl-web yl]# cat /etc/redhat-releaseCentOS Linux release 7.1.1503 (Core) 二、mysql安装一般网上给出的资料都是 #yum install mysql #yum install mysql-server #yum install mysql-devel 安装mysql和mysql-devel都成功，但是安装mysql-server失败，如下： [root@yl-web yl]# yum install mysql-serverLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: mirrors.sina.cn * extras: mirrors.sina.cn * updates: mirrors.sina.cnNo package mysql-server available.Error: Nothing to do 查资料发现是CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。 有两种解决办法： 1、方法一：安装mariadbMariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。 安装mariadb，大小59 M。 [root@yl-web yl]# yum install mariadb-server mariadb mariadb数据库的相关命令是： systemctl start mariadb #启动MariaDB systemctl stop mariadb #停止MariaDB systemctl restart mariadb #重启MariaDB systemctl enable mariadb #设置开机启动 所以先启动数据库 [root@yl-web yl]# systemctl start mariadb 然后就可以正常使用mysql了 [root@yl-web yl]# mysql -u root -pEnter password:Welcome to the MariaDB monitor. Commands end with ; or g.Your MariaDB connection id is 3Server version: 5.5.41-MariaDB MariaDB Server Copyright (c) 2000, 2014, Oracle, MariaDB Corporation Ab and others. Type ‘help;’ or ‘h’ for help. Type ‘c’ to clear the current input statement. MariaDB [(none)]&gt; show databases;+——————–+| Database |+——————–+| information_schema || mysql || performance_schema || test |+——————–+4 rows in set (0.00 sec) MariaDB [(none)]&gt; 安装mariadb后显示的也是 MariaDB [(none)]&gt; ，可能看起来有点不习惯。下面是第二种方法。 2、方法二：官网下载安装mysql-server# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm# rpm -ivh mysql-community-release-el7-5.noarch.rpm# yum install mysql-community-server 安装成功后重启mysql服务。 # service mysqld restart 初次安装mysql，root账户没有密码。 [root@yl-web yl]# mysql -u rootWelcome to the MySQL monitor. Commands end with ; or g.Your MySQL connection id is 3Server version: 5.6.26 MySQL Community Server (GPL) Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners. Type ‘help;’ or ‘h’ for help. Type ‘c’ to clear the current input statement. mysql&gt; show databases;+——————–+| Database |+——————–+| information_schema || mysql || performance_schema || test |+——————–+4 rows in set (0.01 sec) mysql&gt; 设置密码 mysql&gt; set password for ‘root‘@’localhost’ =password(‘password’);Query OK, 0 rows affected (0.00 sec) mysql&gt; 不需要重启数据库即可生效。 在mysql安装过程中如下内容： Installed: mysql-community-client.x86_64 0:5.6.26-2.el7 mysql-community-devel.x86_64 0:5.6.26-2.el7 mysql-community-libs.x86_64 0:5.6.26-2.el7 mysql-community-server.x86_64 0:5.6.26-2.el7 Dependency Installed: mysql-community-common.x86_64 0:5.6.26-2.el7 Replaced: mariadb.x86_64 1:5.5.41-2.el7_0 mariadb-devel.x86_64 1:5.5.41-2.el7_0 mariadb-libs.x86_64 1:5.5.41-2.el7_0 mariadb-server.x86_64 1:5.5.41-2.el7_0 所以安装完以后mariadb自动就被替换了，将不再生效。 [root@yl-web yl]# rpm -qa |grep mariadb[root@yl-web yl]# 三、配置mysql1、编码mysql配置文件为/etc/my.cnf 最后加上编码配置 [mysql]default-character-set =utf8 这里的字符编码必须和/usr/share/mysql/charsets/Index.xml中一致。 2、远程连接设置把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。 mysql&gt; grant all privileges on . to root@’%’identified by ‘password’; 如果是新用户而不是root，则要先新建用户 mysql&gt;create user ‘username‘@’%’ identified by ‘password’; 此时就可以进行远程连接了。","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"},{"name":"centos","slug":"centos","permalink":"https://hero.triple.net.cn/tags/centos/"},{"name":"mariadb","slug":"mariadb","permalink":"https://hero.triple.net.cn/tags/mariadb/"},{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/tags/数据库/"}]},{"title":"kernel headers for versions not found 解决","slug":"kernel-headers-for-versions-not-found-e8-a7-a3-e5-86-b3","date":"2017-09-25T02:57:28.000Z","updated":"2018-12-12T09:19:37.290Z","comments":true,"path":"2017/09/25/kernel-headers-for-versions-not-found-e8-a7-a3-e5-86-b3/","link":"","permalink":"https://hero.triple.net.cn/2017/09/25/kernel-headers-for-versions-not-found-e8-a7-a3-e5-86-b3/","excerpt":"","text":"现在主要工作环境是 Linux，有时候需要一些测试环境， 于是乎安装了VMware，遇到了一个什么 kernel header version not found 什么的错误 以前记得解决过一次的， 什么命令忘记了，怕麻烦，不想再去Google，转而安装 virtual box 发现一样需要。。。 好吧， 命令如下（Ubuntu or Debian 系列）： sudo apt-get install linux-headers-$(uname -r) 在 CSDN 上找的， 比老外的解决方式快捷多了。。、（拿来即用，不用纠结什么版本，系统，Debug 模式。。。） 其他方式参考这里 http://blog.csdn.net/change518/article/details/8977238","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"kernel version","slug":"kernel-version","permalink":"https://hero.triple.net.cn/tags/kernel-version/"},{"name":"virutal box","slug":"virutal-box","permalink":"https://hero.triple.net.cn/tags/virutal-box/"},{"name":"VMware","slug":"VMware","permalink":"https://hero.triple.net.cn/tags/VMware/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://hero.triple.net.cn/tags/虚拟机/"}]},{"title":"【转】利用反向ssh从外网访问内网主机","slug":"use-reverse-SSH-to-access-intranet-hosts-from-the-external-network","date":"2017-09-15T10:41:06.000Z","updated":"2018-12-18T08:42:16.244Z","comments":true,"path":"2017/09/15/use-reverse-SSH-to-access-intranet-hosts-from-the-external-network/","link":"","permalink":"https://hero.triple.net.cn/2017/09/15/use-reverse-SSH-to-access-intranet-hosts-from-the-external-network/","excerpt":"","text":"前言最近遇到一个问题，就是过几天我需要离开学校，而且到时候仍然想登陆校园网里的一台服务器进行工作；但是我又没有校园网网关的操作权限，不能做端口映射，也不能搞到校园网内部主机的外网 ip，而且学校自己提供的 vpn 又根本没法用。研究了半天，总算找到了一个比较不错的利用反向ssh(reverse ssh tunnel)进行内网登陆的解决方案。 工作原理之所以很多转发的方法无法应用在这里，就是因为内网主机对外网其实是不可见的，也就是说外部主机不能用一般的方法访问到内部主机。那么我们就想了，能不能用内网主机找外网主机，找到之后再把这条内网主机登陆外网的信道转换成外网主机登陆内网的信道呢？辛运的是，这个方法的确是可行的，这也就是所谓反向 ssh 最通俗的理解，这就像寄信一样：虽然我不知道你的地址，但是你知道我的地址，那么你就先给我写封信，告诉我你的地址，然后我不就可以回信给你了么？ 操作步骤由于我们自己使用的电脑未必有外网 ip，因此我们需要一个有固定外网ip的服务器(随便搞个腾讯云阿里云的小机子就行)，然后用这台服务器与内网的机子进行通信，我们到时候要先登陆自己的服务器，然后再利用这个服务器去访问内网的主机。 1、准备好有固定 ip 的服务器 A，以及待访问的内网机器 B。 两者都开着 sshd 服务，端口号默认都是 22。顺便做好 ssh 免密码登陆。2、内网主机B主动连接服务器A，执行以下命令： 1$ ssh -NfR 1111:localhost:22 username@servername -p 22 这条命令的意思是在后台执行(-f)，不实际连接而是做 port forwarding(-N)，做反向 ssh(-R) ，将远程服务器的 1111 端口映射成连接本机(B)与该服务器的反向 ssh 的端口。附：这里有必要加强一下记忆，这个端口号一不小心就容易搞混。。man文档中的参数命令是这样的： 1-R \\[bind_address:\\]port:host:hostport bind_address 以及其后面的 port 是指远程主机的 ip 以及端口，host 以及其后的 hostport 是指本机的 ip 和端口。由于 ssh 命令本身需要远程主机的 ip(上上条命令中的 servername)，因此这个 bind_address 原则上是可以省略的。 执行完这条命令，我们可以在服务器A上看到他的 1111 端口已经开始监听：123$ ss -ant |grep 1111LISTEN 0 128 127.0.0.1:1111 *:* 3、在上面的操作中，这个 1111 端口就已经映射成了内网 主机 B 的 22 端口了，现在我们只要ssh到自己的这个端口就行了。 在服务器A中执行： 1$ ssh username@localhost -p1111 这样就成功的登陆了内网的主机了。 功能优化上面的做法其实有一个问题，就是反向ssh可能会不稳定，主机B对服务器A的端口映射可能会断掉，那么这时候就需要主机B重新链接，而显然远在外地的我无法登陆B。。。 这其实有一个非常简单的解决方案，就是用 autossh 替代步骤2中的 ssh： 1$ autossh -M 2222 -NfR 1111:localhost:22 username@servername -p 22 后面的参数跟ssh都一样，只是多了一个 -M 参数，这个参数的意思就是用本机的 2222 端口来监听 ssh，每当他断了就重新把他连起来。。。不过man文档中也说了，这个端口又叫 echo port，他其实是有一对端口的形式出现，第二个端口就是这个端口号加一。因此我们要保证这个端口号和这个端口号加一的端口号不被占用。 参考资料SSH反向连接及Autossh","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"}]},{"title":"mysql导入 txt,csv文件","slug":"mysql-e5-af-bc-e5-85-a5-txtcsv-e6-96-87-e4-bb-b6","date":"2017-09-15T07:56:09.000Z","updated":"2018-12-12T09:20:50.374Z","comments":true,"path":"2017/09/15/mysql-e5-af-bc-e5-85-a5-txtcsv-e6-96-87-e4-bb-b6/","link":"","permalink":"https://hero.triple.net.cn/2017/09/15/mysql-e5-af-bc-e5-85-a5-txtcsv-e6-96-87-e4-bb-b6/","excerpt":"","text":"mysql有一个高效导入方法，经测可以轻松导入数千万级的数据～ 那就是 load data infile LOAD DATA INFILE 一直被认为是MySQL很强大的一个数据导入工具，因为他速度非常的快。 基本语法：load data [low_priority] [local] infile &apos;file_name txt&apos; [replace | ignore] into table tbl_name [fields [terminated by&apos;t&apos;] [OPTIONALLY] enclosed by &apos;&apos;] [escaped by&apos;&apos; ]] [lines terminated by&apos;n&apos;] [ignore number lines] [(col_name, )] load data infile 语句从一个文本文件中以很高的速度读入一个表中。 使用这个命令之前，mysqld进程（服务）必须已经在运行。 为了安全原因，当读取位于服务器上的文本文件时，文件必须处于数据库目录或可被所有人读取。 另外，为了对服务器上文件使用load data infile，在服务器主机上你必须有file的权限。 如果你指定关键词low_priority，那么MySQL将会等到没有其他人读这个表的时候，才把插入数据。可以使用如下的命令： load data low_priority infile &quot;/home/mark/data sql&quot; into table Orders; 如果指定local关键词，则表明从客户主机读文件。如果local没指定，文件必须位于服务器上。 replace和ignore关键词控制对现有的唯一键记录的重复的处理。如果你指定replace，新行将代替有相同的唯一键值的现有行。 如果你指定ignore，跳过有唯一键的现有行的重复行的输入。如果你不指定任何一个选项，当找到重复键时，出现一个错误，并且文本文件的余下部分被忽略。例如： load data low_priority infile &quot;/home/mark/data sql&quot; replace into table Orders; 分隔符 （1） fields关键字指定了文件记段的分割格式，如果用到这个关键字，MySQL剖析器希望看到至少有下面的一个选项： terminated by 分隔符：意思是以什么字符作为分隔符 enclosed by ： 字段括起字符 escaped by ： 转义字符 terminated by ： 描述字段的分隔符，默认情况下是tab字符（t） enclosed by ： 描述的是字段的括起字符。 escaped by ： 描述的转义字符。默认的是反斜杠（backslash： ）例如： load data infile “/home/mark/Orders txt” replace into table Orders fields terminated by’,’ enclosed by ‘“‘; （2）`lines` 关键字指定了每条记录的分隔符默认为`n`即为换行符 如果两个字段都指定了那 `fields` 必须在 `lines` 之前。如果不指定 `fields` 关键字缺省值与如果你这样写的相同： fields terminated by&apos;t&apos; enclosed by ’ &apos;&apos; ‘ escaped by&apos;&apos; 如果你不指定一个lines子句，缺省值与如果你这样写的相同： lines terminated by&apos;n&apos; 例如： load data infile &quot;/jiaoben/load.txt&quot; replace into table test fields terminated by &apos;,&apos; lines terminated by &apos;/n&apos;; load data infile 可以按指定的列把文件导入到数据库中。 当我们要把数据的一部分内容导入的时候，，需要加入一些栏目（列/字段/field）到MySQL数据库中，以适应一些额外的需要。比方说，我们要从Access数据库升级到MySQL数据库的时候 下面的例子显示了如何向指定的栏目(field)中导入数据： load data infile &quot;/home/Order txt&quot; into table Orders(Order_Number, Order_Date, Customer_ID); 当在服务器主机上寻找文件时，服务器使用下列规则： （1）如果给出一个绝对路径名，服务器使用该路径名。 （2）如果给出一个有一个或多个前置部件的相对路径名，服务器相对服务器的数据目录搜索文件。（3）如果给出一个没有前置部件的一个文件名，服务器在当前数据库的数据库目录寻找文件。 例如： /myfile txt 给出的文件是从服务器的数据目录读取，而作为 “myfile txt” 给出的一个文件是从当前数据库的数据库目录下读取。 注意：字段中的空值用N表示 有几个问题一定要注意1、编码。 2、灵活导入导出。 一个例子： 先创建一个表： CREATE TABLE Salary( Id_P INT, Salary INT ); 然后在D盘根目录下创建了一个data.txt文本文件。 data.txt的内容： 1,10000 2,8000 3,12000 4,9000 5,12000 6,10000 7,1000 然后执行： load data local infile &quot;D:/data.txt&quot; into table salary fields terminated by &apos;,&apos;; 执行之后data.txt中的数据就全部插入到Salary表中了。 注意： terminated by ‘,’制定了data.txt中的数据字段间的分割符为’,’。","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"mysql load data","slug":"mysql-load-data","permalink":"https://hero.triple.net.cn/tags/mysql-load-data/"},{"name":"海量数据导入","slug":"海量数据导入","permalink":"https://hero.triple.net.cn/tags/海量数据导入/"}]},{"title":"追加内容到文件末尾的几种常用方法","slug":"Append-content-to-the-end-of-the-file","date":"2017-09-15T04:26:22.000Z","updated":"2018-12-21T06:25:47.178Z","comments":true,"path":"2017/09/15/Append-content-to-the-end-of-the-file/","link":"","permalink":"https://hero.triple.net.cn/2017/09/15/Append-content-to-the-end-of-the-file/","excerpt":"使用 FileOutputStream 或者 FileWriter 时，将方法的第二个参数设置为 true 即可使用追加的方式写文件 下面是示例代码：","text":"使用 FileOutputStream 或者 FileWriter 时，将方法的第二个参数设置为 true 即可使用追加的方式写文件 下面是示例代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import java.io.BufferedWriter; import java.io.FileOutputStream; import java.io.FileWriter; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.RandomAccessFile; /** * 描述：追加内容到文件末尾 * @author Administrator * */ public class WriteStreamAppend &#123; /** * 追加文件：使用FileOutputStream，在构造FileOutputStream时，把第二个参数设为true * * @param fileName * @param content */ public static void method1(String file, String conent) &#123; BufferedWriter out = null; try &#123; out = new BufferedWriter(new OutputStreamWriter( new FileOutputStream(file, true))); out.write(conent); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; out.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /** * 追加文件：使用FileWriter * * @param fileName * @param content */ public static void method2(String fileName, String content) &#123; try &#123; // 打开一个写文件器，构造函数中的第二个参数true表示以追加形式写文件 FileWriter writer = new FileWriter(fileName, true); writer.write(content); writer.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; /** * 追加文件：使用RandomAccessFile * * @param fileName * 文件名 * @param content * 追加的内容 */ public static void method3(String fileName, String content) &#123; try &#123; // 打开一个随机访问文件流，按读写方式 RandomAccessFile randomFile = new RandomAccessFile(fileName, \"rw\"); // 文件长度，字节数 long fileLength = randomFile.length(); // 将写文件指针移到文件尾。 randomFile.seek(fileLength); randomFile.writeBytes(content); randomFile.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; System.out.println(\"start\"); method1(\"c:/test.txt\", \"追加到文件的末尾\"); System.out.println(\"end\"); &#125; &#125;","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"}]},{"title":"Kafka集群无法外网访问问题解决攻略","slug":"kafka-e9-9b-86-e7-be-a4-e6-97-a0-e6-b3-95-e5-a4-96-e7-bd-91-e8-ae-bf-e9-97-ae-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3-e6-94-bb-e7-95-a5","date":"2017-09-14T05:18:57.000Z","updated":"2018-12-12T09:19:37.272Z","comments":true,"path":"2017/09/14/kafka-e9-9b-86-e7-be-a4-e6-97-a0-e6-b3-95-e5-a4-96-e7-bd-91-e8-ae-bf-e9-97-ae-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3-e6-94-bb-e7-95-a5/","link":"","permalink":"https://hero.triple.net.cn/2017/09/14/kafka-e9-9b-86-e7-be-a4-e6-97-a0-e6-b3-95-e5-a4-96-e7-bd-91-e8-ae-bf-e9-97-ae-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3-e6-94-bb-e7-95-a5/","excerpt":"","text":"http://blog.csdn.net/luoww1/article/details/71514776","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[]},{"title":"Ubuntu 系统下安装 Cisco AnyConnect VPN","slug":"Ubuntu-系统下安装-Cisco-AnyConnect-VPN","date":"2017-09-13T04:54:48.000Z","updated":"2018-12-21T07:53:15.639Z","comments":true,"path":"2017/09/13/Ubuntu-系统下安装-Cisco-AnyConnect-VPN/","link":"","permalink":"https://hero.triple.net.cn/2017/09/13/Ubuntu-系统下安装-Cisco-AnyConnect-VPN/","excerpt":"","text":"打算在公司 IDC 机房部署一套VPN环境，经过考虑，最终决定采用 Cisco 下的开源技术 AnyConnect AnyConnect的优势： 长连接，待机不会断开； 速度快，稳定性好； 安全性好，全程加密；另外，支持freeradius认证功能； 能够下发路由表给客户端，这个功能是最激动人心的。因为如果长期连接，那么肯定是某些服务走 VPN，而国内的网站可以走自己的网络体验最好。 耗电量较低； AnyConnect 是思科的安全远程接入解决方案，部署 Anyconnect 需要安装 ocserv(OpenConnect server)， 它是一个OpenConnect SSL协议服务端，0.3.0版后兼容使用AnyConnect SSL 协议的终端。ocserv（OpenConnect Server）是由 GnuTLS 的作者 Nikos Mavrogiannopoulos 开发的一个能够兼容 Cisco Anyconnect 的开源服务端（ SSL VPN），支持*nix/BSD 平台，最早是作为 OpenConnect（Linux下的兼容Cisco ASA的开源客户端）对应的服务端，在后续版本（ 0.3.0 开始）中加入了对 Cisco Anyconnect 客户端的支持。下面介绍在ubuntu系统下安装Anyconnect的操作记录： 安装过程如下（采用一键安装方式）1root@localhost:~# apt-get update &amp;&amp; apt-get upgrade -y root@localhost:~# apt-get install wget root@localhost:~# wget http://git.io/p9r8 --no-check-certificate -O ocservauto.sh //下载地址:https://pan.baidu.com/s/1i59e2hB （提取密码:bp4w） 如果以前使用了该脚本进行安装，只需要输入下面命令更新（只更新相关脚本，服务器不会更新） 123root@localhost:~# wget http://git.io/ocservauto -O- --no-check-certificate|bashroot@localhost:~# bash ocservauto.sh 接着会进行一段时间的安装，如果顺利的话，出现下面信息则说明安装成功了！ 如果安装失败可以查阅安装日志文件ocinstall.log，日志文件在脚本所在文件夹下，可以使用下面命令逐步阅读一般情况下安装成功之后，服务器就在启动状态了。我的部署机器由于是虚拟机(没有外网ip)，采用 squid 代理方式对外访问，导致脚本中定义的 ftp 方式对 freeradius-client-1.1.7.tar.gz 和 ocserv-0.10.8.tar.xz 安装包下载失败。 解决办法：将上面这两个包单独下载下来，放在和ocservauto.sh脚本同一目录路径下，然后再重新执行脚本进行安装 这里可以简单使用本地浏览器查看服务器信息，在本地浏览器输入 https://IP 或域名:（英文冒号）端口 ocserv的默认安装目录是 /etc/ocserv，相关文件都在这个路径下，如配置文件 ocserv.conf 等 1234567891011121314root@localhost:~``# cd /etc/ocserv/root@localhost:``/etc/ocserv``# lsca-cert.pem config-per-group dh.pem ocserv.conf ocserv-up.sh server-cert.pemCAforOC defaults ocpasswd ocserv-down.sh profile.xml server-key.pem ocserv服务在安装后默认就启动了，安装中选择证书登陆方式，即https方式，所以tcp端口选择的是443 12345678root@localhost:~# ps -ef|grep ocservroot 726 1 0 01:22 ? 00:00:00 ocserv-mainroot 728 726 0 01:22 ? 00:00:00 ocserv-secmroot 865 849 0 01:26 pts/1 00:00:00 grep &lt;code--&lt;color=auto ocservroot@localhost:~# lsof -i:443COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEocserv-ma 726 root 4u IPv4 10406026 0t0 TCP *:https (LISTEN)ocserv-ma 726 root 5u IPv6 10406027 0t0 TCP *:https (LISTEN) ocserv服务启动命令：12/etc/init.d/ocserv start/stop/restart/status ocserv服务启动过程中若是出现下面两个小报错：** /usr/sbin/ocserv: error while loading shared libraries: libtspi.so.1: cannot open shared object file:No such file or directory 解决办法： 1root@localhost:~# apt-get install libtspi-dev 2）/usr/sbin/ocserv: error while loading shared libraries: libgnutls.so.28: cannot open shared objectfile: No such file or directory 解决办法： 安装 libgnutls 下载地址：https://pan.baidu.com/s/1skJxpI9提取密码：ic3y 123root@localhost:~# dpkg -i gnutls\\_3.3.8-13\\_amd64.debroot@localhost:~# find / -name libgnutls.so.28/usr/lib64/libgnutls.so.28root@localhost:~# ln -s /usr/lib64/libgnutls.so.28 /usr/lib/ 可以在 ocserv.conf 文件里修改 ocserv 服务端口和域名等信息，修改后重启 ocserv 服务即可12root@localhost:~# /etc/init.d/ocserv restart[ ok ] Restarting ocserv (via systemctl): ocserv.service. Anyconnect 客户端工具下载地址：https://pan.baidu.com/s/1eSvDvEi提取密码：ckdi 安装Anyconnect客户端工具，安装后，就可以使用上面安装ocserv过程中定义的信息连接了： 特别注意：由于安装过程中选择的是自签证书，是不受信任的证书，所以客户端连接时需要关掉设置中的“阻止不信任的服务器”，即下面截图中的第四项 Block connection to untrusted servers不要勾选!不管采不采用证书验证，都不要勾选第四项！。然后勾选第三项（第二项勾选与否都不要紧） 点击“connect”，接着点击提示窗口中点击“Connect Anyway”，接着按照提示输入用户名和密码，正常连接就ok了。 连接成功后，点击右下角的 Anyconnect 标志图，图上有一把钥匙的状态就说明已经连上了。 1）用户名和密码验证（客户端登陆时默认肯定会有的验证方式）12345root@localhost:~# cat /etc/ocserv/ocserv.conf........auth = plain[passwd=/etc/ocserv/ocpasswd] //默认用户名和密码验证enable-auth = certificate //用户名和密码验证同时，允许证书验证auth-timeout = 40 创建用户名和密码命令（或重置用户密码）：12345678910root@localhost:~# ocpasswd -c /etc/ocserv/ocpasswd guohuihuiEnter password:Re-enter password:root@localhost:~# ocpasswd -c /etc/ocserv/ocpasswd liumengnanEnter password:Re-enter password:root@localhost:~# cat /etc/ocserv/ocpasswdwangshibo:*:$5$.GQf1omiKmvGElhU$q1yNyUxPRAHygEGaG98cwVGfYuJjSarsTkXROinhBX8guohuihui:*:$5$z.H5ipnHSJCSigFU$30mseKwk13ZG9MuD3QSeBtYmX6xLOcafVPpioXkulA2liumengnan:*:$5$mVSHMbBekX9vofxV$n7bc8LkJB9kjXl6OADGWySfTqkIBeyIGJRvk5A/ehHC 证书验证除了用户名和密码验证之外，还可以进行证书验证。用户在 AnyConnect 客户端第一次登陆时会提示加载证书。首次登陆加载后，后面再登陆就不会提示加载证书了！所有用户的 p12 证书文件可以在放置脚本的目录下找到，导入证书时需要输入证书创建时设定的密码。 新建用户证书命令：1root@localhost:~# bash ocservauto.sh gc 用户证书创建后会保存到和脚本同一路径下：12root@localhost:~# lshuanqiu.p12 ocinstall.log ocservauto.sh vars_ocservauto 吊销客户证书命令1root@localhost:~# bash ocservauto.sh rc 脚本其他参数说明 查看帮助 1root@localhost:~# bash ocservauto.sh help 平滑升级ocserv（升级后原来的用户数据都会保留） 1root@localhost:~# bash ocservauto.sh ug 强制重装ocserv（注意这样会丢失之前的用户数据和配置）root@localhost:~# bash ocservauto.sh ri 同时开启证书登录和用户名密码登录（请务必首先选择任意一种登录方式来完成安装，接着再使用下面命令） 1234567root@localhost:~# bash ocservauto.sh pc 4. 关于相同客户端证书可以登录多个服务器的方案 假定有三台服务器ABC: ```bash # bash ocservauto.sh rc 吊销所有想要吊销的证书。由于不支持在线吊销证书列表，所以必须还要把A服务器上的/etc/ocserv/crl.pem文件同时复制到BC服务器相同位置，且修改ocserv的配置文件： 1crl = /etc/ocserv/crl.pem 登陆方式在上面一键安装过程中，选择了自签CA，安装后产生pem文件，如下： 1234567891011121314root@localhost:~# cd /etc/ocserv/root@localhost:/etc/ocserv``# ll *.pem-rw-r--r-- 1 root root 1793 Jan 16 23:34 ca-cert.pem-rw-r--r-- 1 root root 1003 Jan 17 02:46 crl.pem-rw-r--r-- 1 root root 2406 Jan 16 23:34 dh.pem-rw-r--r-- 1 root root 3322 Jan 16 23:34 server-cert.pem-rw-r--r-- 1 root root 1675 Jan 16 23:34 server-key.pemroot@localhost:/etc/ocserv# cat ocserv.conf |grep pemserver-cert = /etc/ocserv/server-cert.pemserver-key = /etc/ocserv/server-key.pemdh-params = /etc/ocserv/dh.pemca-cert = /etc/ocserv/ca-cert.pemcrl = /etc/ocserv/crl.pem# http_anchors = FILE:/etc/ocserv-ca.pem 用户名密码登录 -自签CA（证书授权中心），取得ca-cert.pem（不需要保密，类比公钥）和ca-key.pem（需要保密，类比私钥）。 -CA签发信任服务器证书，取得server-cert.pem（不需要保密，类比公钥）、server-key.pem（需要保密，类比私钥）。 -该模式下，密码库是/etc/ocserv/ocpasswd文件。 -如果想使用购买的服务器证书，请参考Nginx服务器证书配置，只需将对应的crt、key 文件重命名为server-cert.pem、server-key.pem，并覆盖到/etc/ocserv/文件夹下面。 证书登录 -自签CA（证书授权中心），取得ca-cert.pem（不需要保密，类比公钥）和ca-key.pem（需要保密，类比私钥）。 -CA签发信任服务器证书，取得server-cert.pem（不需要保密，类比公钥）、server-key.pem（需要保密，类比私钥）。 -CA签发信任客户端证书，最终取得username.p12。 -这里证书授权中心的ca-cert.pem既当作服务器证书的根证书，也当作客户端证书的验证证书。 -由于CA证书当作验证证书，签发客户端证书就需要这个ca-key.pem，可以比同为密码库。 -如果想使用购买的服务器证书，请参考Nginx服务器证书配置（cnblogs.com），只需将对应的 crt、key 文件重命名为 server-cert.pem、server-key.pem，并覆盖到 /etc/ocserv/ 文件夹下面。 改善优化修改的参数都在 /etc/ocserv/ocserv.conf 文件中。a. 对于某些移动宽带、长城带宽等，往往经过了很多重 NAT，容易出现连接成功但是无法打开网页情况，请改小 dpd、mobile-dpd 数值。b. 如果 vps 对于本地延迟甚高，取消注释 output-buffer 项。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://hero.triple.net.cn/tags/Linux/"},{"name":"anyconnect","slug":"anyconnect","permalink":"https://hero.triple.net.cn/tags/anyconnect/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://hero.triple.net.cn/tags/Ubuntu/"},{"name":"VPN","slug":"VPN","permalink":"https://hero.triple.net.cn/tags/VPN/"}]},{"title":"新鲜出炉一份完整AnyConnect教程！","slug":"e6-96-b0-e9-b2-9c-e5-87-ba-e7-82-89-e4-b8-80-e4-bb-bd-e5-ae-8c-e6-95-b4anyconnect-e6-95-99-e7-a8-8b-ef-bc-81","date":"2017-09-13T04:53:07.000Z","updated":"2018-12-12T09:11:08.950Z","comments":false,"path":"2017/09/13/e6-96-b0-e9-b2-9c-e5-87-ba-e7-82-89-e4-b8-80-e4-bb-bd-e5-ae-8c-e6-95-b4anyconnect-e6-95-99-e7-a8-8b-ef-bc-81/","link":"","permalink":"https://hero.triple.net.cn/2017/09/13/e6-96-b0-e9-b2-9c-e5-87-ba-e7-82-89-e4-b8-80-e4-bb-bd-e5-ae-8c-e6-95-b4anyconnect-e6-95-99-e7-a8-8b-ef-bc-81/","excerpt":"","text":"一周年零一个月更新： 因为StartCom全家爆炸所以删除了相关的证书内容。 经过测试以后更改了Let’s Encrypt签发证书的内容。 新增了未打开IPv4转发（表现：可以连上服务器但是不能打开网页）的解决方法。 给你们找了一个你们喜欢的一键脚本。 GitHub有一个项目叫Streisand，要是搞不明白的可以尝试一下。自己没测试过。请注意如果**直接编译按照步骤走的话**这个程序似乎是会帮你开新服务器的，我建议参考README.md#running-streisand-on-other-providers来做。 说实话吧，其实我搞AnyConnect搞了好几天，一直碰到一个很鬼畜的Google不到的 getaddrinfo() failed: Name or service not known Cannot listen to specified ports 这个报错…吓得我iptables rule重写了好几遍w 后面再提啦。先走主线。 1. AnyConnect概述简而言之，AnyConnect是Cisco的新一代黑科技。鬼畜的协议可以让它在UDP/TCP之间切换，从而增强稳定性；（和其他VPN相比略微）复杂的部署让非企业用户使用AnyConnect的概率大大降低，基本上只剩下企业用户（这才是关键）。企业用户是什么，是GDP啊（笑）。 更何况今年某大新闻过后，坚挺许久的IPSec和他的小伙伴（PPTP和L2TP）一起见了马克思。 加上AnyConnect提供了独特的证书验证功能（这倒是次要的…反正自签名的证书都会报错根本防不了MITM），所以还是值得各位从各种IPSec啦PPTP啦L2TP啦跑过来的。 2.安装环境准备一贯的，我用的是Debian Jessie，KVM架构。OpenVZ的话…应该也是可以的吧。 2.1 安装依赖包AnyConnect要很多依赖包（喂别跑啊！还没到编译的部分呢）。这些东西可以在后面的README里面找到。Debian和Fedora有所不同，因为我用Debian，所以Fedora的各位就自己去readme里找咯… apt-get install libgnutls28-dev libwrap0-dev libpam0g-dev liblz4-dev libseccomp-dev libreadline-dev libnl-route-3-dev libkrb5-dev build-essential pkg-config gnutls-bin -y development package理论上是用不着的。 2.2 编译ocservocserv就是我们需要的东西了。什么？OpenConnect和AnyConnect不一样？…别急啊。 但是由于官方没有最新版本的固定链接，所以我们得去他们的网站自己扒…看不懂没关系，第一个链接就是了。下载命令格式是： curl -O 下载链接 下载下来以后解压，进入文件夹： tar xvf ocserv*.tar.xz./configuremakemake install 2.3 创建证书AnyConnect需要一个证书来建立安全连接。理论上倒是可以用Let’s Encrypt来给服务器签发证书，但是！LE并不支持针对IP地址签发。如果你在域名中填了IP地址的话就会出现以下错误： Requested name ... is an IP address. The Let’s Encrypt certificate authority will not issue certificates for a bare IP address. 请求的域名...是一个IP地址。Let’s Encrypt证书签发机构将不会对IP地址签发证书。 所以要是你不想买域名的话，还是乖乖用自签名证书吧。反正只要后面把自签名的证书从服务器上导入到本地也是一样的效果。 2.3.1 创建证书模板首先我们得新建一个文件夹，把东西到处乱丢可不是什么好习惯… mkdir certcd certtouch ca.tmplnano ca.tmpl 文本编辑器我用的是nano，各位要是不爽的话也可以用vi，这就不是重点了。总之复制上： cn = “随便填，你开心就好”organization = “同开心就好”serial = 1expiration_days = 365casigning_keycert_signing_keycrl_signing_key 保存退出。 生成密钥和证书。 certtool –generate-privkey –outfile ca-key.pemcerttool –generate-self-signed –load-privkey ca-key.pem –template ca.tmpl –outfile ca-cert.pem 警告：任何东西都不能丢！任何东西都不能丢！任何东西都不能丢！重要的话说三遍 2.3.2 创建服务器证书cn = “这里必须填域名或IP”organization = “同开心就好”expiration_days = 365signing_keyencryption_keytls_www_server 保存。 certtool –generate-privkey –outfile server-key.pem certtool –generate-certificate –load-privkey server-key.pem –load-ca-certificate ca-cert.pem –load-ca-privkey ca-key.pem –template server.tmpl –outfile server-cert.pem certtool –generate-certificate –load-privkey server-key.pem –load-ca-certificate ca-cert.pem –load-ca-privkey ca-key.pem –template server.tmpl –outfile server-cert.pem 然后我们把证书放到一个你喜欢的文件夹，我们假设是/etc/ssl/selfsigned。存放路径可以自己改。 cp ca-cert.pem /etc/ssl/selfsigned/ca-cert.pemcp server-cert.pem /etc/ssl/selfsigned/server-cert.pemcp server-key.pem /etc/ssl/selfsigned/server-key.pem 3.配置ocserv我们在ocserv-x.x.x下操作。 把配置样本复制到/etc/ocserv中进行修改： mkdir ocservcp doc/sample.config /etc/ocserv/ocserv.confnano /etc/ocserv/ocserv.conf 然后添加一个用户名和密码： ocpasswd -c /etc/ocserv/ocpasswd 你喜欢的用户名 接着会让你添加密码，输两遍（一遍用来验证）就行了 找到以下几行（友情提示：nano使用Ctrl+w可以进行搜索）并按照#后面的提示改动（如果你不知道怎么改就不要动了） # 选择喜欢的登录方式，如果想使用证书登录的话应该把auth=”certificate”前的井号删掉并在下面这行的前面加上井号。第5点会提到auth = “plain[/etc/ocserv/ocpasswd]“ # 允许同时连接的总客户端数量，比如下面的4就是最多只能4台设备同时使用max-clients = 4 #不同用户用同一个用户名可以同时登录，下面限制的是多少同名用户可以同时使用。改成0就是不作限制max-same-clients = 2 # ocserv监听的IP地址，千万别动动了就爆炸 #listen-host = [IP|HOSTNAME] # 服务监听的TCP/UDP端口，如果没有搭网站的话就用TCP443/UDP80好了tcp-port = 443udp-port = 80 # 开启以后可以增强VPN性能try-mtu-discovery = true # 让服务器读取用户证书（后面会用到用户证书）cert-user-oid = 2.5.4.3 # 服务器证书与密钥server-cert = /etc/ssl/selfsigned/server-cert.pemserver-key = /etc/ssl/selfsigned/server-key.pem # 服务器所使用的dns，我们使用Google提供的DNSdns = 8.8.8.8dns = 8.8.4.4 #把route = *全注释掉就是了 #route = 192.168.1.0/255.255.255.0 # 使ocserv兼容AnyConnectcisco-client-compat = true # 选择喜欢的登录方式，如果想使用证书登录的话应该把auth=”certificate”前的井号删掉并在下面这行的前面加上井号。第5点会提到auth = “plain[/etc/ocserv/ocpasswd]“ # 允许同时连接的总客户端数量，比如下面的4就是最多只能4台设备同时使用max-clients = 4 #不同用户用同一个用户名可以同时登录，下面限制的是多少同名用户可以同时使用。改成0就是不作限制max-same-clients = 2 # ocserv监听的IP地址，千万别动动了就爆炸 #listen-host = [IP|HOSTNAME] # 服务监听的TCP/UDP端口，如果没有搭网站的话就用TCP443/UDP80好了tcp-port = 443udp-port = 80 # 开启以后可以增强VPN性能try-mtu-discovery = true # 让服务器读取用户证书（后面会用到用户证书）cert-user-oid = 2.5.4.3 # 服务器证书与密钥server-cert = /etc/ssl/selfsigned/server-cert.pemserver-key = /etc/ssl/selfsigned/server-key.pem # 服务器所使用的dns，我们使用Google提供的DNSdns = 8.8.8.8dns = 8.8.4.4 #把route = *全注释掉就是了 #route = 192.168.1.0/255.255.255.0 # 使ocserv兼容AnyConnectcisco-client-compat = true Ctrl+x保存退出。 好了我们来聊聊开头提到的 getaddrinfo() failed。其实只要把listen-host那一行用#注释掉保存就可以了。然后ocserv就会自己进行扫描，多棒啊（ 4.扫尾工作4.1 防火墙设置有些骚年的端口可能被iptables挡住了，现在我们就在iptables上开个洞： iptables -A INPUT -p tcp -m state –state NEW –dport 443 -j ACCEPTiptables -A INPUT -p udp -m state –state NEW –dport 80 -j ACCEPT 然后再开个NAT： iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE 顺便说一下有人问“能够正常连接但是上不了网”是什么情况，原因很可能是因为没有开启IPv4转发。IPv4转发的相关参数在/etc/sysctl.conf中，进入后找到net.ipv4.ip_forward=1并把前面的注释（“#”）删掉并保存（保存文件并且sysctl -p）即可。或者也可以使用echo来在文件尾添加上这一参数： echo “net.ipv4.ip_forward=1” &gt;&gt; /etc/sysctl.confsysctl -p 哦对了。看到analytics说有一个“anyconnet不能改端口”的搜索跳转，这里就补充一下：其实把tcp-port和udp-port改掉就好了… 4.2 测试洋洋洒洒写了这么多终于写到了测试，真是泪流满面… ocserv -f -d 1 要是没有报错退出的话，那就可以用了。然而，只是可以用而已。 5.可选操作——添加守护进程（Debian）或使用证书认证5.1 添加守护进程添加守护进程这个是Debian多出来的一步。在CentOS下直接yum install ocserv然后就可以用service ocserv start或者service ocserv stop了。所以其实我新开了一台CentOS服务器，下面的内容是我从其他地方复制的 cd /etc/init.d sudo ln -s /lib/init/upstart-job ocserv cd /etc/init sudo nano ocserv.conf 在新文件中加入以下几行： #!upstartdescription “OpenConnect Server” start on runlevel [2345]stop on runlevel [06] respawnrespawn limit 20 5 scriptexec start-stop-daemon –start –pidfile /var/run/ocserv.pid –exec /usr/local/sbin/ocserv – -f &gt;&gt; /dev/null 2&gt;&amp;1end script 然后Debian党也可以使用service ocserv start/stop了。 补充：CentOS上systemctl start ocserv.service后可能会返回 Job for ocserv.service failed because the control process exited with error code. See “systemctl status ocserv.service” and “journalctl -xe” for details. 这时候敲systemctl status ocserv.service查看上一次的运行过程中发生了什么。一般来说这个日志中会显示配置错误(Syntax error，配置文件中的参数错误，一般会显示执行到第几行)或者是地址已经被使用[bind() failed: Address already in use]。对于第一种情况请检查相关配置文件，对于第二种情况可以lsof -i:ocserv使用的端口 查看端口调用情况。如果看到ocserv-ma则表示已经有一个ocserv服务在运行中，如果没有的话就需要调整到空端口或者手动杀掉占用此端口的进程然后重新启动ocserv。 5.2 客户端使用证书登录既然服务器需要提供证书来验证身份，那么客户端也可以提供身份证书进行登录。那么，我们开始咯我开始感到不耐烦了你们看出来了吗 现在证书推荐使用let’s encrypt生成，具体的方法各位可以参照这一篇文章。用户使用自签名证书作为身份验证凭据的话会因为issuer unknown被拒绝（使用ocserv -f -d 1可以看到debug信息），所以自签名的用户证书是没有用的各位不要再折腾了。 首先我们要回到之前我们创建证书的地方（参见2.3.1），因为路径是阁下选的这里就给不出命令了明明就是偷懒 touch user-cert.tmplnano user-cert.tmpl cn = “随便填”unit = “也是随便填”expiration_days = 365signing_keytls_www_client 生成密钥 certtool –generate-privkey –outfile user-key.pem 生成证书 certtool –generate-certificate –load-privkey user-key.pem –load-ca-certificate ca-cert.pem –load-ca-privkey ca-key.pem –template user-cert.tmpl –outfile user-cert.pem 这里多一步格式转换： certtool –to-p12 –load-privkey user-key.pem –pkcs-cipher 3des-pkcs12 –load-certificate user-cert.pem –outfile user.p12 –outder 然后各位可以把证书弄到自己设备上。怎么弄呢？可以用SFTP/FTP（如：filezilla），也可以直接用Apache/Nginx，本来文章就够长了就不增加各位心理负担了（笑 最后回去编辑/etc/ocserv/ocserv.conf，把auth = “plain[/etc/ocserv/ocpasswd]”用 # 注释掉，把auth = “certificate” 的注释删除，注释掉 listen-clear-file = /var/run/ocserv-conn.socket，把ca-cert = 改成下面的 ca-cert = /etc/ssl/selfsigned/ca-cert.pem ，重启服务，大功告成！","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"anyconnect","slug":"anyconnect","permalink":"https://hero.triple.net.cn/tags/anyconnect/"},{"name":"cisco","slug":"cisco","permalink":"https://hero.triple.net.cn/tags/cisco/"}]},{"title":"用树莓派3挖矿赚钱","slug":"e7-94-a8-e6-a0-91-e8-8e-93-e6-b4-be3-e6-8c-96-e7-9f-bf-e8-b5-9a-e9-92-b1","date":"2017-09-12T18:44:35.000Z","updated":"2018-12-12T09:11:32.269Z","comments":true,"path":"2017/09/13/e7-94-a8-e6-a0-91-e8-8e-93-e6-b4-be3-e6-8c-96-e7-9f-bf-e8-b5-9a-e9-92-b1/","link":"","permalink":"https://hero.triple.net.cn/2017/09/13/e7-94-a8-e6-a0-91-e8-8e-93-e6-b4-be3-e6-8c-96-e7-9f-bf-e8-b5-9a-e9-92-b1/","excerpt":"","text":"前言: 两年前买矿机挖矿赔掉七八万人纸,前几天看到比特币又狂涨,又开始傻逼一次… 不过这次不投钱了,买来给儿子做遥控车,气象站,离线下载卡通的树莓3还四片躺著,拿来挖矿赚点烟钱… 反正树莓3耗电低又有四核,一个月算下来也才几块钱电费,不玩白不玩 几种人不要往下看 1.睁眼瞎 2.彻底的懒 3.太认真看待树莓3挖矿赚钱这回事 准备工作,注意事项: 1.如果要全速挖矿,一定要给树莓装风扇~ 2.去这里下树莓系统集成好的镜像,下载好按教程用Putty进入树莓 https://www.cellsystech.cn/docs/?p=2099 开工.. 1.进入树莓,切换成root权限 su 输入密码1234 2.因为没有现成基于ARM CPU的挖矿程序,自己从源代码编译挖矿程序 git clone https://github.com/pooler/cpuminer.git cd cpuminer ./autogen.sh ./configure CFLAGS=”-mfpu=neon” make &amp;&amp; make install 3.挖矿程序有了,得有个矿场.我选择的是老牌的矿场,貌似靠谱些,去https://www.litecoinpool.org注册一个帐号 4.进入my account,会看到Workers,记住,这个Worker其实就是你的”帐户名.1″ 5.测试挖矿程序与矿场的联通及效能(worker不用再多说,密码别填错,就在Worker的后面一拦Password里面,对应著你的worker,别搞错) 最重要的是,-t 1这个参数,1代表一个执行序,经过测试,一个执行序不断地跑,树莓温度在55度左右,如果要全速挖矿,那就直接不要-t 1这个参数 不加风扇的状况下,温度会高到86度,早晚会报废,请慎重 ./minerd –url=stratum+tcp://us.litecoinpool.org:3333 –userpass=你的worker:密码 -t 1 6.一切顺利的话,会出现这个画面,表示挖到了… 7.让挖矿变成背景程序,开机启动. 7.1.把系统盘最消耗资源的Kodi播放程序给禁用了 systemctl mask kodi 7.2.创建挖矿服务 nano /etc/systemd/system/lite.service 7.3.填入服务内容 [Unit] Description=LiteCoin service After=syslog.target network.target auditd.service [Service] Type=simple User=root ExecStart=/usr/local/bin/minerd –url=stratum+tcp://us.litecoinpool.org:3333 –userpass=你的worker:密码 -t 1 ExecReload=/bin/kill -HUP $MAINPID ExecStop=/bin/kill -s QUIT $MAINPID PrivateTmp=true Restart=always RestartSec=120s [Install] WantedBy=multi-user.target 7.3.激活挖矿服务 systemctl enable lite.service systemctl restart lite.service systemcrl status lite.service 好了,去刷刷矿场看收益… 最后备注：这个树莓系统集成镜像自带SS科学上网功能,挖矿前先把SS科学上网调通.","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"树莓派","slug":"树莓派","permalink":"https://hero.triple.net.cn/tags/树莓派/"},{"name":"bitcoin","slug":"bitcoin","permalink":"https://hero.triple.net.cn/tags/bitcoin/"},{"name":"挖矿","slug":"挖矿","permalink":"https://hero.triple.net.cn/tags/挖矿/"},{"name":"比特币","slug":"比特币","permalink":"https://hero.triple.net.cn/tags/比特币/"}]},{"title":"【转】使用owncloud+oss搭建属于自己的私有云盘","slug":"e3-80-90-e8-bd-ac-e3-80-91-e4-bd-bf-e7-94-a8owncloudoss-e6-90-ad-e5-bb-ba-e5-b1-9e-e4-ba-8e-e8-87-aa-e5-b7-b1-e7-9a-84-e7-a7-81-e6-9c-89-e4-ba-91-e7-9b-98","date":"2017-09-12T06:26:30.000Z","updated":"2018-12-12T08:59:53.198Z","comments":true,"path":"2017/09/12/e3-80-90-e8-bd-ac-e3-80-91-e4-bd-bf-e7-94-a8owncloudoss-e6-90-ad-e5-bb-ba-e5-b1-9e-e4-ba-8e-e8-87-aa-e5-b7-b1-e7-9a-84-e7-a7-81-e6-9c-89-e4-ba-91-e7-9b-98/","link":"","permalink":"https://hero.triple.net.cn/2017/09/12/e3-80-90-e8-bd-ac-e3-80-91-e4-bd-bf-e7-94-a8owncloudoss-e6-90-ad-e5-bb-ba-e5-b1-9e-e4-ba-8e-e8-87-aa-e5-b7-b1-e7-9a-84-e7-a7-81-e6-9c-89-e4-ba-91-e7-9b-98/","excerpt":"","text":"之前使用的云盘 坚果云个人认为是现在市面上最好的同步盘了，支持增量同步，多平台有linux版本，可以使用webdav。美中不足的免费版每个月限制上传下载流量，收费版不限制流量有空间限制。有段时间突然有大量文件需要备份导致流量不足，但是平时又用不了太多，开一个月专业版的空间又不够，用的有点憋屈所以就弃用了。 ps： 其实现在本博主还是在用坚果云的，商用产品有他的优势，不可全盘否定，一年300多也不算贵，我一年的服务器费用都2000多了。。。【捂脸】自己维护也不错，但是服务跟不上～～客户端，速度，版本历史等等 百度云等在使用坚果云之前的主力网盘，同步盘功能竟然要会员才能用，而且同步盘做的很不好用，不过用来做资源分享之类的还不错 为什么使用oss 数据的稳定性，我比较喜欢折腾所以服务器有时候就会重装这时候对于文件就非常的不好管理和备份，放在oss上面能够更好的管理 第二个就是便宜，不和其他几家的云服务对比仅仅和阿里云的云盘，就是买服务器的时候的一个选项，便宜很多。40g的话一年也就差不多10多块的样子。而且和ECS搭配使用没有流量费用 准备工作安装lnmp架构 其实owncloud官方更加推荐lamp，但是我个人更喜欢nginx，要比Apache省资源一些，能够用Apache的也很不错，可以少踩很多配置的坑，owncloud的nginx官方示例配置很多坑，之后会说到 安装ossfs 注意：在这之前你需要先开通oss，最好是和你的ECS是一个地区的，当然不是用的ECS也可以用，只是速度会慢一些，还有就是下载会使用公网流量，上传没有 1.点击打开ossfs的下载页面下载对应系统的安装包 2.我已Ubuntu为例，安装ossfs，其他系统看官方的文档就行 sudo apt-get update sudo apt-get install gdebi-core sudo gdebi your_ossfs_package 3.将my-bucket这个bucket挂载到/data/cloud目录下，AccessKeyId是faint， AccessKeySecret是123，oss endpoint是http://oss-cn-hangzhou.aliyuncs.com echo my-bucket:faint:123 &gt; /etc/passwd-ossfs chmod 640 /etc/passwd-ossfs mkdir /data/cloud 最后一步很重要，不能直接照官方文档上面的来，不然安装owncloud的时候可能会出现没有访问权限的问题 首先先看一下nginx的用户id，以我的是www为例 id www 会返回给你用户的uid和gid等等,我假设返回的uid和gid都为1001 ossfs my-bucket /data/cloud -ourl=http://oss-cn-hangzhou-internal.aliyuncs.com -ouid=1001 -ogid=1001 -o allow_other -o umask=007 这里面allow_other是允许其他用户访问，但是默认设置的是777权限这样owncloud会提示不安全，用umask=007挂载为770权限，不知道为啥这里0代表7,7表示0 到这里ossfs就安装完毕了下面开始安装owncloud 安装OWNCLOUD owncloud的安装网上已经有很多的教程我就不多说了 先打开owncloud的官网的服务器端的安装地址，我安装的时候最新稳定版是9.0.2建议国内主机用迅雷之类的下载软件先下载下来上传到服务器，直接wget比较慢 1.下载并解压 wget https://download.owncloud.org/community/owncloud-9.0.2.tar.bz2 //手动上传这一步就不用了 tar xvf owncloud-9.0.2.tar.bz2 //以实际的文件名为准 2.移动到站点目录,假设站点目录为/data/wwwroot mv owncloud/ /data/wwwroot/ 3.设置目录权限，这一步很重要 chown -R www:www /data/wwwroot/owncloud/ chmod 777 /data/wwwroot/owncloud//config/ 设置nginx规则（Apache基本不用改，只需要自己去设置一下ssl，和常规的设置就行了）注意规则设置好之后，安装的时候点高级设置，使用mysql或者其他数据库，sqllite的性能不够，然后就是数据文件目录填写之前你ossfs的挂载目录，我之前挂载的是/data/cloud 后面有9.x官方的示例，我这儿提示一下有些坑的地方 1.本身的设置里面没有log的设置，不方便debug，access_log可以不用，error_log还是需要加上的 2.里面没有index的设置，如果打开首页一片空白，加上index.php之后没有问题的话， location / { index index.php #加上这一句 rewrite ^ /index.php$uri; } 3.如果你进入安装页面，按照提示安装好了之后出现说找不到文件目录之类的话，那么很有可能是你没有开启pathinfo，owncloud需要pathinfo的支持(示例的配置里面是有pathinfo的设置的) NEXT 到这里基本上owncloud的安装应该就结束了，使用也没有什么问题，我建议开启ssl，不知道为什么，我开了ssl之后访问的速度提升了好几倍 附送官方插件的地址点我点我,国内主机在线安装插件可能装不上，可以FQ之后在这里面下载相应插件包，上传到apps目录下即可，下一篇说一下用owncloud实现离线下载功能，现在9.0.2版本的使用owncloud的离线下载插件有问题，但是看了一下这个bug很早就有，只是好像一直没有修复。之后我改一下能够用了再写下一篇吧 9.x官方示例 upstream php-handler { server 127.0.0.1:9000; #注意一下你自己的php服务设置，这一行可能需要自己调整 #server unix:/var/run/php5-fpm.sock; } server { listen 80; server_name cloud.example.com; # enforce https return 301 https://$server_name$request_uri; } server { listen 443 ssl; server_name cloud.example.com; #ssl证书的位置 ssl_certificate /etc/ssl/nginx/cloud.example.com.crt; ssl_certificate_key /etc/ssl/nginx/cloud.example.com.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # 安装好之后，后台可能会提示相应错误，把这一段的注释去掉就行 # add_header Strict-Transport-Security &quot;max-age=15768000; # includeSubDomains; preload;&quot;; #后面安装好了之后后台可能会提示header的错误，把这一短删除掉即可 add_header X-Content-Type-Options nosniff; add_header X-Frame-Options &quot;SAMEORIGIN&quot;; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; # Path to the root of your installation root /var/www/owncloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you&apos;re planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } location /.well-known/acme-challenge { } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_page 403 /core/templates/403.php; error_page 404 /core/templates/404.php; location / { rewrite ^ /index.php$uri; } location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ { deny all; } location ~ ^/(?:.|autotest|occ|issue|indie|db_|console) { deny all; } location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater /.+|ocs-provider/.+|core/templates/40[34]).php(?:$|/) { include fastcgi_params; fastcgi_split_path_info ^(.+.php)(/.+)$; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param HTTPS on; #Avoid sending the security headers twice fastcgi_param modHeadersAvailable true; fastcgi_param front_controller_active true; fastcgi_pass php-handler; fastcgi_intercept_errors on; fastcgi_request_buffering off; } location ~ ^/(?:updater|ocs-provider)(?:$|/) { try_files $uri/ =404; index index.php; } # Adding the cache control header for js and css files # Make sure it is BELOW the PHP block location ~* .(?:css|js)$ { try_files $uri /index.php$uri$is_args$args; add_header Cache-Control &quot;public, max-age=7200&quot;; # Add headers to serve security related headers (It is intended to # have those duplicated to the ones above) # Before enabling Strict-Transport-Security headers please read into # this topic first. # add_header Strict-Transport-Security &quot;max-age=15768000; # includeSubDomains; preload;&quot;; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options &quot;SAMEORIGIN&quot;; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; # Optional: Don&apos;t log access to assets access_log off; } location ~* .(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ { try_files $uri /index.php$uri$is_args$args; # Optional: Don&apos;t log access to other assets access_log off; } }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"oss","slug":"oss","permalink":"https://hero.triple.net.cn/tags/oss/"},{"name":"owncloud","slug":"owncloud","permalink":"https://hero.triple.net.cn/tags/owncloud/"},{"name":"阿里云","slug":"阿里云","permalink":"https://hero.triple.net.cn/tags/阿里云/"}]},{"title":"介绍Java中的Log4j","slug":"e4-bb-8b-e7-bb-8djava-e4-b8-ad-e7-9a-84log4j","date":"2017-09-11T11:04:50.000Z","updated":"2018-12-12T09:05:36.286Z","comments":true,"path":"2017/09/11/e4-bb-8b-e7-bb-8djava-e4-b8-ad-e7-9a-84log4j/","link":"","permalink":"https://hero.triple.net.cn/2017/09/11/e4-bb-8b-e7-bb-8djava-e4-b8-ad-e7-9a-84log4j/","excerpt":"","text":"log4j ,是java中使用的最多的日志记录工具了，虽然现在随着各种更加优秀的服务不断的涌现， 比如kafka等 但是对于小的项目Log4k无疑仍然是最强大的记录日志的方式。 虽然Log4J小组曾竭力游说JCP（Java Community Process）采用Log4J作为JDK 1.4的“标准”日志API，但是最终因Sun的日志API规范的负责人Graham Hamilton的一句“Merlin的开发已经到了最后阶段，这时不允许再对主要API做出改变”而没有被采纳。 但Log4J还是对新的日志API产生 了重要影响。我们来了解下，怎么使用。 ##Log4j的配置文件 log4j.rootLogger=debug,to_stdout,to_logfile log4j.appender.to_stdout=org.apache.log4j.ConsoleAppender log4j.appender.to_stdout.layout=org.apache.log4j.PatternLayout log4j.appender.to_stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n log4j.appender.to_logfile=org.apache.log4j.RollingFileAppender log4j.appender.to_logfile.File=/var/log/java/logfile.log log4j.appender.to_logfile.MaxFileSize=512KB log4j.appender.to_logfile.MaxBackupIndex=3 log4j.appender.to_logfile.layout=org.apache.log4j.PatternLayout log4j.appender.to_logfile.layout.ConversionPattern=%d %p [%c] - %m%n ##第一种方法：从src中读取 ###示例代码： public class TestLog4j { public static void main(String [] args){ // 1. Create log Logger log = Logger.getLogger(TestLog4j.class); // 2. Get log config PropertyConfigurator.configure(&quot;src/log4j.properties&quot;); // 3. Start log log.debug(&quot;Here is some DEBUG&quot;); log.info(&quot;Here is some INFO&quot;); log.warn(&quot;Here is some WARN&quot;); log.error(&quot;Here is some ERROR&quot;); log.fatal(&quot;Here is some FATAL&quot;); } } ###需要注意的地方：### 1. 关于配置文件内容仔细的同学应该已经发现了，我故意把配置文件中的 rootLogger 属性名做了一些改动：“to_stdout”、“to_logfile”用逗号分割的参数，第一个是日志级别，后面两个实际上是日志输出的目的地（名称而已） 2. 关于 log4j.properties 放置的路径如下图所示，log4j.properties 放在红色的地方是错误的，应该放置在绿色区域，也就是项目的根目录（src的目录中） 参考网站这里：stackoverflow 虽然网上很多教程都说 resources 是用来放置一些配置文件。但是，代码中的这种方式，不是放这里。 ##第二种方法：从资源文件夹中读取 ###示例代码： public class TestLog4j { public static void main(String [] args){ // 1. Create log Logger log = Logger.getLogger(TestLog4j.class); // 2. Get log config ClassLoader loader = Thread.currentThread().getContextClassLoader(); URL url = loader.getResource(&quot;log4j.properties&quot;); PropertyConfigurator.configure(url); // 3. Start log log.debug(&quot;====== debug info below ======&quot;); log.debug(&quot;Here is some DEBUG&quot;); log.info(&quot;Here is some INFO&quot;); log.warn(&quot;Here is some WARN&quot;); log.error(&quot;Here is some ERROR&quot;); log.fatal(&quot;Here is some FATAL&quot;); } } 配置文件路径 resources/log4j.properties 这种方式通过先读取当前上下文的执行路径， 然后获取配置文件对应的路径 这样才可以顺利的读取到 resources 中的配置文件， 我个人更喜欢第种方式，虽然写的代码多了一点， 但是看起来比较整洁～配置文件放在了该放置的地方。。。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"log4j","slug":"log4j","permalink":"https://hero.triple.net.cn/tags/log4j/"},{"name":"日志","slug":"日志","permalink":"https://hero.triple.net.cn/tags/日志/"}]},{"title":"用Exception异常还是if判断","slug":"e7-94-a8exception-e5-bc-82-e5-b8-b8-e8-bf-98-e6-98-afif-e5-88-a4-e6-96-ad","date":"2017-09-11T05:50:34.000Z","updated":"2018-12-12T09:11:32.282Z","comments":true,"path":"2017/09/11/e7-94-a8exception-e5-bc-82-e5-b8-b8-e8-bf-98-e6-98-afif-e5-88-a4-e6-96-ad/","link":"","permalink":"https://hero.triple.net.cn/2017/09/11/e7-94-a8exception-e5-bc-82-e5-b8-b8-e8-bf-98-e6-98-afif-e5-88-a4-e6-96-ad/","excerpt":"","text":"一个方法的参数,C 里面好像是一堆的if else判断参数是否合法,不合法就返回一个没有实际意义的值 但在java里面有异常机制,当参数不合法的时候,究竟是if else 一样判断后返回一个值 还是直接来个Exception ? 如果是 if else 的话,有什么好处 ? 如果是 exception 的话,又有什么好处 ? 或者是根据不同情况来定 ? sam_chi: 看情况吧，如果能在方法里面处理不影响方法功能的话使用if else处理，如果参数错误导致方法不能正常工作，那么就得抛异常了, Java提供了java.lang.IllegalArgumentException，可以直接new一个抛出去，这是一个RuntimeException,不需要try..catch mathfox: 使用断言. hxbot: if else 面向过程 exception 面向对象 coolzyt: 这就是个编程风格问题 java风格就是throw IllegalArgumentException(); wpfwupengfeiwpf: 呵呵，个人喜欢用if else 这样可以给用户更好的提示，throw难道要抛出异常给用户看 mercyblitz: @mathfox 断言是错误，不是java.lang.Exception，它是java.lang.AssertionError。 很多框架使用的自定义断言，很少使用JVM断言机制。 @wpfwupengfeiwpf if else不好的地方在不能通过OO的继承和多态来实现功能。 if-else 方式的好处在于更贴近与逻辑思维，性能优于Exception。 相对于Exception，其缺点是，不适合OOP，语义不明显，不易于错误错误跟踪或错误提示较少， 并且类型比较单一（比如利用C语言的原生类型）或者难以统一（比如C语言结构和宏定义）。 exception方法的好处在于是业务逻辑和异常处理分离（代码相对清晰），try中处理业务，catch中处理异常情况。 在API设计中，可以设计Exception Handler来处理异常，使得层次分明。 同时，更好的OOP的封装和多态性。缺点在于性能相对差。 ldbjakyo: @hxbot 很对~~正解，补充一句，exception性能劣于if else，纯面向对象设计的话很多exception设计，但性能很差 清晨阳光: 我觉得是看业务逻辑了， 如果是要验证输入等的，可以if判断后，手工抛出IllegalXXXException， 或者抛出自定义继承自RuntimeException的异常。 比如在Spring的DataAccessUtils里面的singleResult()方法，就包含如下的代码: if (results.size() &gt; 1) { throw new IncorrectResultSizeDataAccessException(1, size); } 值得说明的是，这些都是RuntimeException。 还有，对于那些必须显式抛出的Exception，例如SQLException、IOException等， 写代码的时候，要么将其转换为RuntimeException，要么就显式抛出。 最后的方法处理，有可能还是抛出，就像Struts2的Action一样，抛出异常，自定义异常页面。 除了上面的情况，尽量使用if else判断。肤浅理解，不知正确与否。 longhua828: 由性能来决定吧，最好用if else，控制尽可能多错误，不要是错误就往上抛 tianmo2008: 这个看情况吧,有明确处理方式的,用if,如果没有明确怎么处理的,直接抛出exception终止运行, 至于RuntimeException和exception的选择,我觉得尽量用RuntimeException吧,但要在方法注释里说明什么情况下抛出的, exception带有很强的强制性,影响代码结构,除非你的代码带有很强的警告信息,否则一般不要用 IcedCoffee: java规范的定义是说异常不要参与控制流程，你不能把异常作为一种正常的控制流程作为程序的一部分，这样是不对的. 面试官正真要考的就是这个.. 没有哪个公司会用异常来处理参数验证.. liupopo: 先要明确异常是做什么的，异常是程序执行时的一些非正常的情况，如果有不正确的数据、逻辑等会抛出异常。 if else是逻辑判断，控制程序流程。 断言是预先决断应该是什么样的值，不应该是什么类型等明确的条件 从定义上不太好区分这些怎么去用，但可以从使用场景去考虑，下面的可能不十分准确，但大家可以参考一下： 异常：是程序员写给其他程序员的，比方说我写了一个方法，如果其他人使用我这个方法的时候有可能不按我想的路子使用， 可能会引起我的方法产生不正常的处理，这时候&gt; 我要使用异常，而且可以决定产生异常了是由我这个方法本身进行处理(catch语句中处理)还是交给调用者进行处理(直接把异常抛出) if else 就是我写的方法，要进行逻辑判断，就用它，没什么好说的吧。 断言可用处大了，是我在调用别人写的方法，或者我处理程序时对通过其他途径得到的数据(如调用别人方法的返回值(好象不建议用断言)，通过参数传入的值)等进行假设它就是某值时使用的。是方便开发、调试提供的一个语法元素 JonyUabka: 对可预见的运行时异常当进行捕捉并处理，比如空指针等。 > 通常，对空指针的判断不是使用捕捉NullPointException的方式，而是在调用该对象之前使用判断语句进行直接判断，如： //若不对list是否为null进行检查，则在其为null时会抛出空指针异常 if(null != list &amp;&amp; 0 &lt; list.size()){ for(int i = 0; i &lt; list.size(); i++){ } } 对于经常发生的可预计事件不要采用异常 不要使用异常实现控制结构。 通常的思想是只对错误采用异常处理：逻辑和编程错误，设置错误，被破坏的数据，资源耗尽，等等。 对于java的编码规范，有具体描述。我想考官希望得到的是这个方向的答案。 抛出异常的爱: 再次提示对于参数验证使用断言. 对于入力参数应该是全部被考虑到的 (录入错误也应该在逻辑之内, 属于鲁棒性编程方法) 如有不正确那需要防御编程方法 防御编程目的是找出代码出问题的点 而不是业务需要. 在jvm中还有关闭断言的方法. 正式环境下关闭断言. 开发测试下打开断言 参数不合法有两种可能 1.设计必须冗余错误参数 …. 2.使用此方法的地方参数录入错误. 对于2.你冗余了那么bug就会被隐藏. 所以不必要的冗余需要去掉. 一个方法只干一件事. 对于发现错误需要定位. 所以需要断言来产生定位信息 在正式环境下启动参数可以选反不使用断言. (当然你要确定此方法使用的正确性,断言永远不会被运行到.) Andrew1945: 何时需要使用断言 1.可以在预计正常情况下程序不会到达的地方放置断言 2.断言可以用于检查传递给私有方法的参数。（对于公有方法，因为是提供给外部的接口，所以必须在方法中有相应的参数检验才能保证代码的健壮性） 3.使用断言测试方法执行的前置条件和后置条件 4.使用断言检查类的不变状态，确保任何情况下，某个变量的状态必须满足。（如age属性应大于0小于某个合适值） 什么地方不要使用断言 断言语句不是永远会执行，可以屏蔽也可以启用 因此： 1.不要使用断言作为公共方法的参数检查，公共方法的参数永远都要执行 2.断言语句不可以有任何边界效应，不要使用断言语句去修改变量和改变方法的返回值 更多内容请移步链接：iteye.com","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"exception","slug":"exception","permalink":"https://hero.triple.net.cn/tags/exception/"},{"name":"异常","slug":"异常","permalink":"https://hero.triple.net.cn/tags/异常/"}]},{"title":"java static final 初始化","slug":"java-static-final-e5-88-9d-e5-a7-8b-e5-8c-96","date":"2017-09-11T03:15:36.000Z","updated":"2018-12-12T09:19:37.217Z","comments":true,"path":"2017/09/11/java-static-final-e5-88-9d-e5-a7-8b-e5-8c-96/","link":"","permalink":"https://hero.triple.net.cn/2017/09/11/java-static-final-e5-88-9d-e5-a7-8b-e5-8c-96/","excerpt":"","text":"###static修饰属性 public修饰为共有的,可以在类的外部来访问;在类内部任何地方可以使用. 如果被修饰为private私有,那么只能在类内部使用. public class Test{ public static int a;//类连接时，默认初始为0，而又无类变量初始化语句或者静态初始化语句，故此类无类初始化方法&lt;clinit&gt; private Test(){ a=0;//类实例化时候调用 } } 如果属性被修饰为static静态类资源,那么这个字段永远只有一个, 也就是说不管你new test()多少个类的对象,操作的永远都只是属于类的那一块内存资源. 例如: Test t1=new Test(); t1.a=10; Test t2=new Test(); System.out.println(t1.a); System.out.println(t2.a); System.out.println(Test.a); 代码 结果是3个10 ###final 用于声明属性（常量），方法和类， 分别表示属性一旦被分配内存空间就必须初始化（不会有默认初始化）类变量，类连接时候有默认初始化， 对象引用初始化后不会引用错误的内存空间,并且以后不可变; 方法一旦定义必须有实现代码并且子类里不可被覆盖， * 类一旦定义不能被定义为抽象类或是接口,因为不可被继承。 被final修饰而没有被static修饰的类的属性变量只能在两种情况下初始化:(必须初始化）对于接口，由于只能包含常量和方法 a.在它被声明的时候赋值例: public class Test{ public final int a=0; private Test(){ } } b.在构造函数里初始化 例如： public class Test{ public final int a; private Test(){ a=0; } } c、在非静态块里 public class Test{ private final int a; { a=9; } } 解释： 当这个属性被修饰为final,而非static的时候,它属于类的实例对象的资源(实例常量）, 当类被加载进内存的时候这个属性并没有给其分配内存空间,而只是 定义了一个变量a, 只有当类被实例化的时候这个属性才被分配内存空间, 而实例化的时候同时执行了构造函数, 所以属性被初始化了,也就符合了当它被分配内存 空间的时候就需要初始化,以后不再改变的条件. ###被static修饰而没有被final修饰的类的属性变量只能在两种情况下初始化:(可以不初始化） 如果初始化，就生成类初始化函数,否则没有 a.在它被声明的时候赋值 例: public class Test{ public static l int a=8; private Test(){ } } b.在静态或非静态快里初始化 public class Test{ public static l int a; static{a=50;} private Test(){ } } 解释：当类的属性被同时被修饰为static时候，他属于类的资源（类变量）,在类加载后，进行连接时候，分三步： 先验证；然后准备，准备时，先分配内存，接着默认初始化；可以进行解析。最后，进行类初始化，类初始化前，必须保证它的父类已经初始化了，所以最先初始化的是超类，对于接口，不必初始其父接口。类初始化时，它把类变量初始化语句及静态初始化语句放到类初始化方法中，所以，如果无此两种语句，也就没类初始化方法,而构造函数是在当类 被实例化的时候才会执行,所以用构造函数,这时候这个属性没有被初始化.程序就会报错.而static块是类被加载的时候执行,且只执行这一次,所以在 static块中可以被初始化. ###同时被final和static修饰的类的属性变量只能在两种情况下初始化:（必须初始化） a.在它被定义的时候 例: public class Test{ public final static int a=5; private Test(){ } } b在类的静态块里初始化例: public class Test{ public final static int a; static{ a=0; } } c、特别对于初始化时候调用抛出异常的构造函数，初始时候注意特别是在实现单例模式时(只能这么初始化） 如： class A { private final static A a; static { try { a=new A(); }catch(Exception e) { throws new RuntimeException(e); //必须有，不然不能完成常量的正确初始化 } } private A() throws Exception{} } 解释：当类的属性被同时被修饰为static和final的时候，他属于类的资源（类常量）, 那么就是类在被加载进内存的时候, 也就是应用程 序启动的时候, 就要已经为此属性分配了内存,所以此时属性已经存在, 它又被final修饰,所以必须在属性定义了以后就给其初始化值. 而构造函数是在当类 被实例化的时候才会执行,所以用构造函数,这时候这个属性没有被初始化.程序就会报错. 而static块是类被加载的时候执行,且只执行这一次,所以在 static块中可以被初始化.","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"final","slug":"final","permalink":"https://hero.triple.net.cn/tags/final/"},{"name":"static","slug":"static","permalink":"https://hero.triple.net.cn/tags/static/"}]},{"title":"linux下查看和添加PATH环境变量","slug":"linux-e4-b8-8b-e6-9f-a5-e7-9c-8b-e5-92-8c-e6-b7-bb-e5-8a-a0path-e7-8e-af-e5-a2-83-e5-8f-98-e9-87-8f","date":"2017-09-01T04:57:45.000Z","updated":"2018-12-18T04:14:13.983Z","comments":true,"path":"2017/09/01/linux-e4-b8-8b-e6-9f-a5-e7-9c-8b-e5-92-8c-e6-b7-bb-e5-8a-a0path-e7-8e-af-e5-a2-83-e5-8f-98-e9-87-8f/","link":"","permalink":"https://hero.triple.net.cn/2017/09/01/linux-e4-b8-8b-e6-9f-a5-e7-9c-8b-e5-92-8c-e6-b7-bb-e5-8a-a0path-e7-8e-af-e5-a2-83-e5-8f-98-e9-87-8f/","excerpt":"","text":"linux下查看和添加PATH环境变量$PATH：决定了shell将到哪些目录中寻找命令或程序， PATH的值是一系列目录，当您运行一个程序时，Linux在这些目录下进行搜寻编译链接。 编辑你的 PATH 声明，其格式为： PATH=$PATH:...: 你可以自己加上指定的路径，中间用冒号隔开。 环境变量更改后，在用户下次登陆时生效，如果想立刻生效，则可执行下面的语句： $ source .bash_profile 需要注意的是，最好不要把当前路径 ./ 放到 PATH 里，这样可能会受到意想不到的攻击。 完成后，可以通过 $ echo $PATH 查看当前的搜索路径。 这样定制后，就可以避免频繁的启动位于 shell 搜索的路径之外的程序了。 可用 export 命令查看PATH值 单独查看PATH环境变量，可用： echo $PATH 添加PATH环境变量，可用： export PATH=/opt/java/java-1.80_144/bin:$PATH 再次查看： echo $PATH 上述方法的 PATH 在终端关闭 后就会消失。 所以 还是建议通过编辑 /etc/profile 来改 PATH，也可以改家目录下的 .bashrc (即：~/.bashrc)。 # vim /etc/profile 在文档最后，添加: export PATH=&quot;/opt/java/java-1.80_144/bin:$PATH&quot;保存，退出，然后运行： #source /etc/profile 不报错则成功。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"}]},{"title":"Kafka入门经典教程-Kafka-about云开发","slug":"kafka-e5-85-a5-e9-97-a8-e7-bb-8f-e5-85-b8-e6-95-99-e7-a8-8b-kafka-about-e4-ba-91-e5-bc-80-e5-8f-91","date":"2017-08-31T17:23:59.000Z","updated":"2018-12-12T09:19:37.275Z","comments":false,"path":"2017/09/01/kafka-e5-85-a5-e9-97-a8-e7-bb-8f-e5-85-b8-e6-95-99-e7-a8-8b-kafka-about-e4-ba-91-e5-bc-80-e5-8f-91/","link":"","permalink":"https://hero.triple.net.cn/2017/09/01/kafka-e5-85-a5-e9-97-a8-e7-bb-8f-e5-85-b8-e6-95-99-e7-a8-8b-kafka-about-e4-ba-91-e5-bc-80-e5-8f-91/","excerpt":"","text":"问题导读 1.Kafka独特设计在什么地方？ 2.Kafka如何搭建及创建topic、发送消息、消费消息？ 3.如何书写Kafka程序？ 4.数据传输的事务定义有哪三种？ 5.Kafka判断一个节点是否活着有哪两个条件？ 6.producer是否直接将数据发送到broker的leader(主节点)？ 7.Kafa consumer是否可以消费指定分区消息？ 8.Kafka消息是采用Pull模式，还是Push模式？ 9.Procuder API有哪两种？ 10.Kafka存储在硬盘上的消息格式是什么？ 一、基本概念 介绍 Kafka是一个分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计。 这个独特的设计是什么样的呢？ 首先让我们看几个基本的消息系统术语： Kafka将消息以topic为单位进行归纳。 将向Kafka topic发布消息的程序成为producers. 将预订topics并消费消息的程序成为consumer. Kafka以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个broker. producers通过网络将消息发送到Kafka集群，集群向消费者提供消息，如下图所示： 客户端和服务端通过TCP协议通信。Kafka提供了Java客户端，并且对多种语言都提供了支持。 Topics 和Logs 先来看一下Kafka提供的一个抽象概念:topic. 一个topic是对一组消息的归纳。对每个topic，Kafka 对它的日志进行了分区，如下图所示： 每个分区都由一系列有序的、不可变的消息组成，这些消息被连续的追加到分区中。分区中的每个消息都有一个连续的序列号叫做offset,用来在分区中唯一的标识这个消息。 在一个可配置的时间段内，Kafka集群保留所有发布的消息，不管这些消息有没有被消费。比如，如果消息的保存策略被设置为2天，那么在一个消息被发布的两天时间内，它都是可以被消费的。之后它将被丢弃以释放空间。Kafka的性能是和数据量无关的常量级的，所以保留太多的数据并不是问题。 实际上每个consumer唯一需要维护的数据是消息在日志中的位置，也就是offset.这个offset有consumer来维护：一般情况下随着consumer不断的读取消息，这offset的值不断增加，但其实consumer可以以任意的顺序读取消息，比如它可以将offset设置成为一个旧的值来重读之前的消息。 以上特点的结合，使Kafka consumers非常的轻量级：它们可以在不对集群和其他consumer造成影响的情况下读取消息。你可以使用命令行来”tail”消息而不会对其他正在消费消息的consumer造成影响。 将日志分区可以达到以下目的：首先这使得每个日志的数量不会太大，可以在单个服务上保存。另外每个分区可以单独发布和消费，为并发操作topic提供了一种可能。 分布式 每个分区在Kafka集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使Kafka具备了容错能力。 每个分区都由一个服务器作为“leader”，零或若干服务器作为“followers”,leader负责处理消息的读和写，followers则去复制leader.如果leader down了，followers中的一台则会自动成为leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的leader，同时作为其他分区的followers，这样集群就会据有较好的负载均衡。 Producers Producer将消息发布到它指定的topic中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种。 Consumers 发布消息通常有两种模式：队列模式（queuing）和发布-订阅模式(publish-subscribe)。队列模式中，consumers可以同时从服务端读取消息，每个消息只被其中一个consumer读到；发布-订阅模式中消息被广播到所有的consumer中。Consumers可以加入一个consumer 组，共同竞争一个topic，topic中的消息将被分发到组中的一个成员中。同一组中的consumer可以在不同的程序中，也可以在不同的机器上。如果所有的consumer都在一个组中，这就成为了传统的队列模式，在各consumer中实现负载均衡。如果所有的consumer都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的consumer中。更常见的是，每个topic都有若干数量的consumer组，每个组都是一个逻辑上的“订阅者”，为了容错和更好的稳定性，每个组由若干consumer组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。 由两个机器组成的集群拥有4个分区 (P0-P3) 2个consumer组. A组有两个consumerB组有4个 相比传统的消息系统，Kafka可以很好的保证有序性。 传统的队列在服务器上保存有序的消息，如果多个consumers同时从这个服务器消费消息，服务器就会以消息存储的顺序向consumer分发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各consumer上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致顺序错乱。为了避免故障，这样的消息系统通常使用“专用consumer”的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。 在这方面Kafka做的更好，通过分区的概念，Kafka可以在多个consumer组并发的情况下提供较好的有序性和负载均衡。将每个分区分只分发给一个consumer组，这样一个分区就只被这个组的一个consumer消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多个consumer组之间进行负载均衡。注意consumer组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。 Kafka只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要topic中所有消息的有序性，那就只能让这个topic只有一个分区，当然也就只有一个consumer组消费它。 ########################################### 二、环境搭建 Step 1: 下载Kafka 点击下载最新的版本并解压. > tar -xzf kafka_2.9.2-0.8.1.1.tgz > cd kafka_2.9.2-0.8.1.1 复制代码 Step 2: 启动服务 Kafka用到了Zookeeper，所有首先启动Zookper，下面简单的启用一个单实例的Zookkeeper服务。可以在命令的结尾加个&amp;符号，这样就可以启动后离开控制台。 > bin/zookeeper-server-start.sh config/zookeeper.properties &amp; [2013-04-22 15:01:37,495] INFO Reading configuration from: config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig) … 复制代码 现在启动Kafka: > bin/kafka-server-start.sh config/server.properties [2013-04-22 15:01:47,028] INFO Verifying properties (kafka.utils.VerifiableProperties) [2013-04-22 15:01:47,051] INFO Property socket.send.buffer.bytes is overridden to 1048576 (kafka.utils.VerifiableProperties) … 复制代码 Step 3: 创建 topic 创建一个叫做“test”的topic，它只有一个分区，一个副本。 > bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test 复制代码 可以通过list命令查看创建的topic: > bin/kafka-topics.sh –list –zookeeper localhost:2181 test 复制代码 除了手动创建topic，还可以配置broker让它自动创建topic. Step 4:发送消息. Kafka 使用一个简单的命令行producer，从文件中或者从标准输入中读取消息并发送到服务端。默认的每条命令将发送一条消息。 运行producer并在控制台中输一些消息，这些消息将被发送到服务端： > bin/kafka-console-producer.sh –broker-list localhost:9092 –topic test This is a messageThis is another message 复制代码 ctrl+c可以退出发送。 Step 5: 启动consumer Kafka also has a command line consumer that will dump out messages to standard output. Kafka也有一个命令行consumer可以读取消息并输出到标准输出： > bin/kafka-console-consumer.sh –zookeeper localhost:2181 –topic test –from-beginning This is a message This is another message 复制代码 你在一个终端中运行consumer命令行，另一个终端中运行producer命令行，就可以在一个终端输入消息，另一个终端读取消息。 这两个命令都有自己的可选参数，可以在运行的时候不加任何参数可以看到帮助信息。 Step 6: 搭建一个多个broker的集群 刚才只是启动了单个broker，现在启动有3个broker组成的集群，这些broker节点也都是在本机上的： 首先为每个节点编写配置文件： > cp config/server.properties config/server-1.properties > cp config/server.properties config/server-2.properties 复制代码 在拷贝出的新文件中添加以下参数： config/server-1.properties: broker.id=1 port=9093 log.dir=/tmp/kafka-logs-1 复制代码 config/server-2.properties: broker.id=2 port=9094 log.dir=/tmp/kafka-logs-2 复制代码 broker.id在集群中唯一的标注一个节点，因为在同一个机器上，所以必须制定不同的端口和日志文件，避免数据被覆盖。 We already have Zookeeper and our single node started, so we just need to start the two new nodes: 刚才已经启动可Zookeeper和一个节点，现在启动另外两个节点： > bin/kafka-server-start.sh config/server-1.properties &amp; … > bin/kafka-server-start.sh config/server-2.properties &amp; … 复制代码 创建一个拥有3个副本的topic: > bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 3 –partitions 1 –topic my-replicated-topic 复制代码 现在我们搭建了一个集群，怎么知道每个节点的信息呢？运行“”describe topics”命令就可以了： > bin/kafka-topics.sh –describe –zookeeper localhost:2181 –topic my-replicated-topic 复制代码 Topic:my-replicated-topic PartitionCount:1 ReplicationFactor:3 Configs: Topic: my-replicated-topic Partition: 0 Leader: 1 Replicas: 1,2,0 Isr: 1,2,0 复制代码 下面解释一下这些输出。第一行是对所有分区的一个描述，然后每个分区都会对应一行，因为我们只有一个分区所以下面就只加了一行。 leader：负责处理消息的读和写，leader是从所有节点中随机选择的. replicas：列出了所有的副本节点，不管节点是否在服务中. isr：是正在服务中的节点. 在我们的例子中，节点1是作为leader运行。 向topic发送消息： > bin/kafka-console-producer.sh –broker-list localhost:9092 –topic my-replicated-topic 复制代码 … my test message 1my test message 2^C 复制代码 消费这些消息： > bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic 复制代码 … my test message 1 my test message 2 ^C 复制代码 测试一下容错能力.Broker 1作为leader运行，现在我们kill掉它： > ps | grep server-1.properties7564 ttys002 0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin/java… > kill -9 7564 复制代码 另外一个节点被选做了leader,node 1 不再出现在 in-sync 副本列表中： > bin/kafka-topics.sh –describe –zookeeper localhost:218192 –topic my-replicated-topic Topic:my-replicated-topic PartitionCount:1 ReplicationFactor:3 Configs: Topic: my-replicated-topic Partition: 0 Leader: 2 Replicas: 1,2,0 Isr: 2,0 复制代码 虽然最初负责续写消息的leader down掉了，但之前的消息还是可以消费的： > bin/kafka-console-consumer.sh –zookeeper localhost:2181 –from-beginning –topic my-replicated-topic … my test message 1 my test message 2 复制代码 看来Kafka的容错机制还是不错的。 ################################################ 三、搭建Kafka开发环境 我们搭建了kafka的服务器，并可以使用Kafka的命令行工具创建topic，发送和接收消息。下面我们来搭建kafka的开发环境。 添加依赖 搭建开发环境需要引入kafka的jar包，一种方式是将Kafka安装包中lib下的jar包加入到项目的classpath中，这种比较简单了。不过我们使用另一种更加流行的方式：使用maven管理jar包依赖。 创建好maven项目后，在pom.xml中添加以下依赖： org.apache.kafka kafka_2.10 0.8.0&lt;/ version&gt; 复制代码 添加依赖后你会发现有两个jar包的依赖找不到。没关系我都帮你想好了，点击这里下载这两个jar包，解压后你有两种选择，第一种是使用mvn的install命令将jar包安装到本地仓库，另一种是直接将解压后的文件夹拷贝到mvn本地仓库的com文件夹下，比如我的本地仓库是d:mvn,完成后我的目录结构是这样的： 配置程序 首先是一个充当配置文件作用的接口,配置了Kafka的各种连接参数： package com.sohu.kafkademon; public interface KafkaProperties { final static String zkConnect = “10.22.10.139:2181”; final static String groupId = “group1”; final static String topic = “topic1”; final static String kafkaServerURL = “10.22.10.139”; final static int kafkaServerPort = 9092; final static int kafkaProducerBufferSize = 64 * 1024; final static int connectionTimeOut = 20000; final static int reconnectInterval = 10000; final static String topic2 = “topic2”; final static String topic3 = “topic3”; final static String clientId = “SimpleConsumerDemoClient”; } 复制代码 producer package com.sohu.kafkademon; import java.util.Properties; import kafka.producer.KeyedMessage; import kafka.producer.ProducerConfig; /** * @author leicui bourne_cui@163.com */ public class KafkaProducer extends Thread { private final kafka.javaapi.producer.Producer&lt;Integer, String&gt; producer; private final String topic; private final Properties props = new Properties(); public KafkaProducer(String topic) { props.put(“serializer.class”, “kafka.serializer.StringEncoder”); props.put(“metadata.broker.list”, “10.22.10.139:9092”); producer = new kafka.javaapi.producer.Producer&lt;Integer, String&gt;(new ProducerConfig(props)); this.topic = topic; } @Override public void run() { int messageNo = 1; while (true) { String messageStr = new String(“Message_” + messageNo); System.out.println(“Send:” + messageStr); producer.send(new KeyedMessage&lt;Integer, String&gt;(topic, messageStr)); messageNo++; try { sleep(3000); } catch (InterruptedException e) { // TODO Auto-generated catch block e.printStackTrace(); } } } } 复制代码 consumer package com.sohu.kafkademon; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Properties; import kafka.consumer.ConsumerConfig; import kafka.consumer.ConsumerIterator; import kafka.consumer.KafkaStream; import kafka.javaapi.consumer.ConsumerConnector; /** * @author leicui bourne_cui@163.com */ public class KafkaConsumer extends Thread { private final ConsumerConnector consumer; private final String topic; public KafkaConsumer(String topic) { consumer = kafka.consumer.Consumer.createJavaConsumerConnector( createConsumerConfig()); this.topic = topic; } private static ConsumerConfig createConsumerConfig() { Properties props = new Properties(); props.put(“zookeeper.connect”, KafkaProperties.zkConnect); props.put(“group.id”, KafkaProperties.groupId); props.put(“zookeeper.session.timeout.ms”, “40000”); props.put(“zookeeper.sync.time.ms”, “200”); props.put(“auto.commit.interval.ms”, “1000”); return new ConsumerConfig(props); } @Override public void run() { Map&lt;String, Integer&gt; topicCountMap = new HashMap&lt;String, Integer&gt;(); topicCountMap.put(topic, new Integer(1)); Map&lt;String, List&lt;KafkaStream&lt;byte[], byte[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap); KafkaStream&lt;byte[], byte[]&gt; stream = consumerMap.get(topic).get(0); ConsumerIterator&lt;byte[], byte[]&gt; it = stream.iterator(); while (it.hasNext()) { System.out.println(“receive：” + new String(it.next().message())); try { sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } } } } 复制代码 简单的发送接收 运行下面这个程序，就可以进行简单的发送接收消息了： package com.sohu.kafkademon; /** * @author leicui bourne_cui@163.com */ public class KafkaConsumerProducerDemo { public static void main(String[] args) { KafkaProducer producerThread = new KafkaProducer(KafkaProperties.topic); producerThread.start(); KafkaConsumer consumerThread = new KafkaConsumer(KafkaProperties.topic); consumerThread.start(); } } 复制代码 高级别的consumer 下面是比较负载的发送接收的程序： package com.sohu.kafkademon; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Properties; import kafka.consumer.ConsumerConfig; import kafka.consumer.ConsumerIterator; import kafka.consumer.KafkaStream; import kafka.javaapi.consumer.ConsumerConnector; /** * @author leicui bourne_cui@163.com */ public class KafkaConsumer extends Thread { private final ConsumerConnector consumer; private final String topic; public KafkaConsumer(String topic) { consumer = kafka.consumer.Consumer.createJavaConsumerConnector( createConsumerConfig()); this.topic = topic; } private static ConsumerConfig createConsumerConfig() { Properties props = new Properties(); props.put(“zookeeper.connect”, KafkaProperties.zkConnect); props.put(“group.id”, KafkaProperties.groupId); props.put(“zookeeper.session.timeout.ms”, “40000”); props.put(“zookeeper.sync.time.ms”, “200”); props.put(“auto.commit.interval.ms”, “1000”); return new ConsumerConfig(props); } @Override public void run() { Map&lt;String, Integer&gt; topicCountMap = new HashMap&lt;String, Integer&gt;(); topicCountMap.put(topic, new Integer(1)); Map&lt;String, List&lt;KafkaStream&lt;byte[], byte[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap); KafkaStream&lt;byte[], byte[]&gt; stream = consumerMap.get(topic).get(0); ConsumerIterator&lt;byte[], byte[]&gt; it = stream.iterator(); while (it.hasNext()) { System.out.println(“receive：” + new String(it.next().message())); try { sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } } } } 复制代码 ############################################################ 四、数据持久化 不要畏惧文件系统! Kafka大量依赖文件系统去存储和缓存消息。对于硬盘有个传统的观念是硬盘总是很慢，这使很多人怀疑基于文件系统的架构能否提供优异的性能。实际上硬盘的快慢完全取决于使用它的方式。设计良好的硬盘架构可以和内存一样快。 在6块7200转的SATA RAID-5磁盘阵列的线性写速度差不多是600MB/s，但是随即写的速度却是100k/s，差了差不多6000倍。现代的操作系统都对次做了大量的优化，使用了 read-ahead 和 write-behind的技巧，读取的时候成块的预读取数据，写的时候将各种微小琐碎的逻辑写入组织合并成一次较大的物理写入。对此的深入讨论可以查看这里，它们发现线性的访问磁盘，很多时候比随机的内存访问快得多。 为了提高性能，现代操作系统往往使用内存作为磁盘的缓存，现代操作系统乐于把所有空闲内存用作磁盘缓存，虽然这可能在缓存回收和重新分配时牺牲一些性能。所有的磁盘读写操作都会经过这个缓存，这不太可能被绕开除非直接使用I/O。所以虽然每个程序都在自己的线程里只缓存了一份数据，但在操作系统的缓存里还有一份，这等于存了两份数据。 另外再来讨论一下JVM,以下两个事实是众所周知的： •Java对象占用空间是非常大的，差不多是要存储的数据的两倍甚至更高。 •随着堆中数据量的增加，垃圾回收回变的越来越困难。 基于以上分析，如果把数据缓存在内存里，因为需要存储两份，不得不使用两倍的内存空间，Kafka基于JVM，又不得不将空间再次加倍,再加上要避免GC带来的性能影响，在一个32G内存的机器上，不得不使用到28-30G的内存空间。并且当系统重启的时候，又必须要将数据刷到内存中（ 10GB 内存差不多要用10分钟），就算使用冷刷新（不是一次性刷进内存，而是在使用数据的时候没有就刷到内存）也会导致最初的时候新能非常慢。但是使用文件系统，即使系统重启了，也不需要刷新数据。使用文件系统也简化了维护数据一致性的逻辑。 所以与传统的将数据缓存在内存中然后刷到硬盘的设计不同，Kafka直接将数据写到了文件系统的日志中。 常量时间的操作效率 在大多数的消息系统中，数据持久化的机制往往是为每个cosumer提供一个B树或者其他的随机读写的数据结构。B树当然是很棒的，但是也带了一些代价：比如B树的复杂度是O(log N)，O(log N)通常被认为就是常量复杂度了，但对于硬盘操作来说并非如此。磁盘进行一次搜索需要10ms，每个硬盘在同一时间只能进行一次搜索，这样并发处理就成了问题。虽然存储系统使用缓存进行了大量优化，但是对于树结构的性能的观察结果却表明，它的性能往往随着数据的增长而线性下降，数据增长一倍，速度就会降低一倍。 直观的讲，对于主要用于日志处理的消息系统，数据的持久化可以简单的通过将数据追加到文件中实现，读的时候从文件中读就好了。这样做的好处是读和写都是 O(1) 的，并且读操作不会阻塞写操作和其他操作。这样带来的性能优势是很明显的，因为性能和数据的大小没有关系了。 既然可以使用几乎没有容量限制（相对于内存来说）的硬盘空间建立消息系统，就可以在没有性能损失的情况下提供一些一般消息系统不具备的特性。比如，一般的消息系统都是在消息被消费后立即删除，Kafka却可以将消息保存一段时间（比如一星期），这给consumer提供了很好的机动性和灵活性，这点在今后的文章中会有详述。 ############################################################ 五、消息传输的事务定义 之前讨论了consumer和producer是怎么工作的，现在来讨论一下数据传输方面。数据传输的事务定义通常有以下三种级别： 最多一次: 消息不会被重复发送，最多被传输一次，但也有可能一次不传输。 最少一次: 消息不会被漏发送，最少被传输一次，但也有可能被重复传输. 精确的一次（Exactly once）: 不会漏传输也不会重复传输,每个消息都传输被一次而且仅仅被传输一次，这是大家所期望的。 大多数消息系统声称可以做到“精确的一次”，但是仔细阅读它们的的文档可以看到里面存在误导，比如没有说明当consumer或producer失败时怎么样，或者当有多个consumer并行时怎么样，或写入硬盘的数据丢失时又会怎么样。kafka的做法要更先进一些。当发布消息时，Kafka有一个“committed”的概念，一旦消息被提交了，只要消息被写入的分区的所在的副本broker是活动的，数据就不会丢失。关于副本的活动的概念，下节文档会讨论。现在假设broker是不会down的。 如果producer发布消息时发生了网络错误，但又不确定实在提交之前发生的还是提交之后发生的，这种情况虽然不常见，但是必须考虑进去，现在Kafka版本还没有解决这个问题，将来的版本正在努力尝试解决。 并不是所有的情况都需要“精确的一次”这样高的级别，Kafka允许producer灵活的指定级别。比如producer可以指定必须等待消息被提交的通知，或者完全的异步发送消息而不等待任何通知，或者仅仅等待leader声明它拿到了消息（followers没有必要）。 现在从consumer的方面考虑这个问题，所有的副本都有相同的日志文件和相同的offset，consumer维护自己消费的消息的offset，如果consumer不会崩溃当然可以在内存中保存这个值，当然谁也不能保证这点。如果consumer崩溃了，会有另外一个consumer接着消费消息，它需要从一个合适的offset继续处理。这种情况下可以有以下选择： consumer可以先读取消息，然后将offset写入日志文件中，然后再处理消息。这存在一种可能就是在存储offset后还没处理消息就crash了，新的consumer继续从这个offset处理，那么就会有些消息永远不会被处理，这就是上面说的“最多一次”。 consumer可以先读取消息，处理消息，最后记录offset，当然如果在记录offset之前就crash了，新的consumer会重复的消费一些消息，这就是上面说的“最少一次”。 “精确一次”可以通过将提交分为两个阶段来解决：保存了offset后提交一次，消息处理成功之后再提交一次。但是还有个更简单的做法：将消息的offset和消息被处理后的结果保存在一起。比如用Hadoop ETL处理消息时，将处理后的结果和offset同时保存在HDFS中，这样就能保证消息和offser同时被处理了。 ############################################################ 六、性能优化 Kafka在提高效率方面做了很大努力。Kafka的一个主要使用场景是处理网站活动日志，吞吐量是非常大的，每个页面都会产生好多次写操作。读方面，假设每个消息只被消费一次，读的量的也是很大的，Kafka也尽量使读的操作更轻量化。 我们之前讨论了磁盘的性能问题，线性读写的情况下影响磁盘性能问题大约有两个方面：太多的琐碎的I/O操作和太多的字节拷贝。I/O问题发生在客户端和服务端之间，也发生在服务端内部的持久化的操作中。 消息集（message set） 为了避免这些问题，Kafka建立了“消息集（message set）”的概念，将消息组织到一起，作为处理的单位。以消息集为单位处理消息，比以单个的消息为单位处理，会提升不少性能。Producer把消息集一块发送给服务端，而不是一条条的发送；服务端把消息集一次性的追加到日志文件中，这样减少了琐碎的I/O操作。consumer也可以一次性的请求一个消息集。 另外一个性能优化是在字节拷贝方面。在低负载的情况下这不是问题，但是在高负载的情况下它的影响还是很大的。为了避免这个问题，Kafka使用了标准的二进制消息格式，这个格式可以在producer,broker和producer之间共享而无需做任何改动。 zero copy Broker维护的消息日志仅仅是一些目录文件，消息集以固定队的格式写入到日志文件中，这个格式producer和consumer是共享的，这使得Kafka可以一个很重要的点进行优化：消息在网络上的传递。现代的unix操作系统提供了高性能的将数据从页面缓存发送到socket的系统函数，在linux中，这个函数是sendfile. 为了更好的理解sendfile的好处，我们先来看下一般将数据从文件发送到socket的数据流向： 操作系统把数据从文件拷贝内核中的页缓存中 应用程序从页缓存从把数据拷贝自己的内存缓存中 应用程序将数据写入到内核中socket缓存中 操作系统把数据从socket缓存中拷贝到网卡接口缓存，从这里发送到网络上。 这显然是低效率的，有4次拷贝和2次系统调用。Sendfile通过直接将数据从页面缓存发送网卡接口缓存，避免了重复拷贝，大大的优化了性能。 在一个多consumers的场景里，数据仅仅被拷贝到页面缓存一次而不是每次消费消息的时候都重复的进行拷贝。这使得消息以近乎网络带宽的速率发送出去。这样在磁盘层面你几乎看不到任何的读操作，因为数据都是从页面缓存中直接发送到网络上去了。 这篇文章详细介绍了sendfile和zero-copy技术在Java方面的应用。 数据压缩 很多时候，性能的瓶颈并非CPU或者硬盘而是网络带宽，对于需要在数据中心之间传送大量数据的应用更是如此。当然用户可以在没有Kafka支持的情况下各自压缩自己的消息，但是这将导致较低的压缩率，因为相比于将消息单独压缩，将大量文件压缩在一起才能起到最好的压缩效果。 Kafka采用了端到端的压缩：因为有“消息集”的概念，客户端的消息可以一起被压缩后送到服务端，并以压缩后的格式写入日志文件，以压缩的格式发送到consumer，消息从producer发出到consumer拿到都被是压缩的，只有在consumer使用的时候才被解压缩，所以叫做“端到端的压缩”。 Kafka支持GZIP和Snappy压缩协议。更详细的内容可以查看这里。 ########################################################## 七、Producer和Consumer Kafka Producer**消息发送 producer直接将数据发送到broker的leader(主节点)，不需要在多个节点进行分发。为了帮助producer做到这点，所有的Kafka节点都可以及时的告知:哪些节点是活动的，目标topic目标分区的leader在哪。这样producer就可以直接将消息发送到目的地了。 客户端控制消息将被分发到哪个分区。可以通过负载均衡随机的选择，或者使用分区函数。Kafka允许用户实现分区函数，指定分区的key，将消息hash到不同的分区上(当然有需要的话，也可以覆盖这个分区函数自己实现逻辑).比如如果你指定的key是user id，那么同一个用户发送的消息都被发送到同一个分区上。经过分区之后，consumer就可以有目的的消费某个分区的消息。 异步发送 批量发送可以很有效的提高发送效率。Kafka producer的异步发送模式允许进行批量发送，先将消息缓存在内存中，然后一次请求批量发送出去。这个策略可以配置的，比如可以指定缓存的消息达到某个量的时候就发出去，或者缓存了固定的时间后就发送出去（比如100条消息就发送，或者每5秒发送一次）。这种策略将大大减少服务端的I/O次数。 既然缓存是在producer端进行的，那么当producer崩溃时，这些消息就会丢失。Kafka0.8.1的异步发送模式还不支持回调，就不能在发送出错时进行处理。Kafka 0.9可能会增加这样的回调函数。见Proposed Producer API. Kafka Consumer Kafa consumer消费消息时，向broker发出”fetch”请求去消费特定分区的消息。consumer指定消息在日志中的偏移量（offset），就可以消费从这个位置开始的消息。customer拥有了offset的控制权，可以向后回滚去重新消费之前的消息，这是很有意义的。 推还是拉？ Kafka最初考虑的问题是，customer应该从brokes拉取消息还是brokers将消息推送到consumer，也就是pull还push。在这方面，Kafka遵循了一种大部分消息系统共同的传统的设计：producer将消息推送到broker，consumer从broker拉取消息。 一些消息系统比如Scribe和Apache Flume采用了push模式，将消息推送到下游的consumer。这样做有好处也有坏处：由broker决定消息推送的速率，对于不同消费速率的consumer就不太好处理了。消息系统都致力于让consumer以最大的速率最快速的消费消息，但不幸的是，push模式下，当broker推送的速率远大于consumer消费的速率时，consumer恐怕就要崩溃了。最终Kafka还是选取了传统的pull模式。 Pull模式的另外一个好处是consumer可以自主决定是否批量的从broker拉取数据。Push模式必须在不知道下游consumer消费能力和消费策略的情况下决定是立即推送每条消息还是缓存之后批量推送。如果为了避免consumer崩溃而采用较低的推送速率，将可能导致一次只推送较少的消息而造成浪费。Pull模式下，consumer就可以根据自己的消费能力去决定这些策略。 Pull有个缺点是，如果broker没有可供消费的消息，将导致consumer不断在循环中轮询，直到新消息到t达。为了避免这点，Kafka有个参数可以让consumer阻塞知道新消息到达(当然也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发送)。 消费状态跟踪 对消费消息状态的记录也是很重要的。 大部分消息系统在broker端的维护消息被消费的记录：一个消息被分发到consumer后broker就马上进行标记或者等待customer的通知后进行标记。这样也可以在消息在消费后立马就删除以减少空间占用。 但是这样会不会有什么问题呢？如果一条消息发送出去之后就立即被标记为消费过的，一旦consumer处理消息时失败了（比如程序崩溃）消息就丢失了。为了解决这个问题，很多消息系统提供了另外一个个功能：当消息被发送出去之后仅仅被标记为已发送状态，当接到consumer已经消费成功的通知后才标记为已被消费的状态。这虽然解决了消息丢失的问题，但产生了新问题，首先如果consumer处理消息成功了但是向broker发送响应时失败了，这条消息将被消费两次。第二个问题时，broker必须维护每条消息的状态，并且每次都要先锁住消息然后更改状态然后释放锁。这样麻烦又来了，且不说要维护大量的状态数据，比如如果消息发送出去但没有收到消费成功的通知，这条消息将一直处于被锁定的状态， Kafka采用了不同的策略。Topic被分成了若干分区，每个分区在同一时间只被一个consumer消费。这意味着每个分区被消费的消息在日志中的位置仅仅是一个简单的整数：offset。这样就很容易标记每个分区消费状态就很容易了，仅仅需要一个整数而已。这样消费状态的跟踪就很简单了。 这带来了另外一个好处：consumer可以把offset调成一个较老的值，去重新消费老的消息。这对传统的消息系统来说看起来有些不可思议，但确实是非常有用的，谁规定了一条消息只能被消费一次呢？consumer发现解析数据的程序有bug，在修改bug后再来解析一次消息，看起来是很合理的额呀！ 离线处理消息 高级的数据持久化允许consumer每个隔一段时间批量的将数据加载到线下系统中比如Hadoop或者数据仓库。这种情况下，Hadoop可以将加载任务分拆，拆成每个broker或每个topic或每个分区一个加载任务。Hadoop具有任务管理功能，当一个任务失败了就可以重启而不用担心数据被重新加载，只要从上次加载的位置继续加载消息就可以了。 ######################################################### 八、主从同步** Kafka允许topic的分区拥有若干副本，这个数量是可以配置的，你可以为每个topci配置副本的数量。Kafka会自动在每个个副本上备份数据，所以当一个节点down掉时数据依然是可用的。 Kafka的副本功能不是必须的，你可以配置只有一个副本，这样其实就相当于只有一份数据。 创建副本的单位是topic的分区，每个分区都有一个leader和零或多个followers.所有的读写操作都由leader处理，一般分区的数量都比broker的数量多的多，各分区的leader均匀的分布在brokers中。所有的followers都复制leader的日志，日志中的消息和顺序都和leader中的一致。flowers向普通的consumer那样从leader那里拉取消息并保存在自己的日志文件中。 许多分布式的消息系统自动的处理失败的请求，它们对一个节点是否 着（alive）”有着清晰的定义。Kafka判断一个节点是否活着有两个条件： 节点必须可以维护和ZooKeeper的连接，Zookeeper通过心跳机制检查每个节点的连接。 如果节点是个follower,他必须能及时的同步leader的写操作，延时不能太久。 符合以上条件的节点准确的说应该是“同步中的（in sync）”，而不是模糊的说是“活着的”或是“失败的”。Leader会追踪所有“同步中”的节点，一旦一个down掉了，或是卡住了，或是延时太久，leader就会把它移除。至于延时多久算是“太久”，是由参数replica.lag.max.messages决定的，怎样算是卡住了，怎是由参数replica.lag.time.max.ms决定的。 只有当消息被所有的副本加入到日志中时，才算是“committed”，只有committed的消息才会发送给consumer，这样就不用担心一旦leader down掉了消息会丢失。Producer也可以选择是否等待消息被提交的通知，这个是由参数request.required.acks决定的。 Kafka保证只要有一个“同步中”的节点，“committed”的消息就不会丢失。 Leader的选择 Kafka的核心是日志文件，日志文件在集群中的同步是分布式数据系统最基础的要素。 如果leaders永远不会down的话我们就不需要followers了！一旦leader down掉了，需要在followers中选择一个新的leader.但是followers本身有可能延时太久或者crash，所以必须选择高质量的follower作为leader.必须保证，一旦一个消息被提交了，但是leader down掉了，新选出的leader必须可以提供这条消息。大部分的分布式系统采用了多数投票法则选择新的leader,对于多数投票法则，就是根据所有副本节点的状况动态的选择最适合的作为leader.Kafka并不是使用这种方法。 Kafaka动态维护了一个同步状态的副本的集合（a set of in-sync replicas），简称ISR，在这个集合中的节点都是和leader保持高度一致的，任何一条消息必须被这个集合中的每个节点读取并追加到日志中了，才回通知外部这个消息已经被提交了。因此这个集合中的任何一个节点随时都可以被选为leader.ISR在ZooKeeper中维护。ISR中有f+1个节点，就可以允许在f个节点down掉的情况下不会丢失消息并正常提供服。ISR的成员是动态的，如果一个节点被淘汰了，当它重新达到“同步中”的状态时，他可以重新加入ISR.这种leader的选择方式是非常快速的，适合kafka的应用场景。 一个邪恶的想法：如果所有节点都down掉了怎么办？Kafka对于数据不会丢失的保证，是基于至少一个节点是存活的，一旦所有节点都down了，这个就不能保证了。 实际应用中，当所有的副本都down掉时，必须及时作出反应。可以有以下两种选择: 等待ISR中的任何一个节点恢复并担任leader。 选择所有节点中（不只是ISR）第一个恢复的节点作为leader. 这是一个在可用性和连续性之间的权衡。如果等待ISR中的节点恢复，一旦ISR中的节点起不起来或者数据都是了，那集群就永远恢复不了了。如果等待ISR意外的节点恢复，这个节点的数据就会被作为线上数据，有可能和真实的数据有所出入，因为有些数据它可能还没同步到。Kafka目前选择了第二种策略，在未来的版本中将使这个策略的选择可配置，可以根据场景灵活的选择。 这种窘境不只Kafka会遇到，几乎所有的分布式数据系统都会遇到。 副本管理 以上仅仅以一个topic一个分区为例子进行了讨论，但实际上一个Kafka将会管理成千上万的topic分区.Kafka尽量的使所有分区均匀的分布到集群所有的节点上而不是集中在某些节点上，另外主从关系也尽量均衡这样每个几点都会担任一定比例的分区的leader. 优化leader的选择过程也是很重要的，它决定了系统发生故障时的空窗期有多久。Kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller. ################################################### 九、客户端API Kafka Producer APIs Procuder API有两种：kafka.producer.SyncProducer和kafka.producer.async.AsyncProducer.它们都实现了同一个接口： class Producer { /* 将消息发送到指定分区 */ publicvoid send(kafka.javaapi.producer.ProducerData&lt;K,V&gt; producerData); /* 批量发送一批消息 */ publicvoid send(java.util.List&lt;kafka.javaapi.producer.ProducerData&lt;K,V&gt;&gt; producerData); /* 关闭producer */ publicvoid close(); } 复制代码 Producer API提供了以下功能： 可以将多个消息缓存到本地队列里，然后异步的批量发送到broker，可以通过参数producer.type=async做到。缓存的大小可以通过一些参数指定：queue.time和batch.size。一个后台线程（(kafka.producer.async.ProducerSendThread）从队列中取出数据并让kafka.producer.EventHandler将消息发送到broker，也可以通过参数event.handler定制handler，在producer端处理数据的不同的阶段注册处理器，比如可以对这一过程进行日志追踪，或进行一些监控。只需实现kafka.producer.async.CallbackHandler接口，并在callback.handler中配置。 自己编写Encoder来序列化消息，只需实现下面这个接口。默认的Encoder是kafka.serializer.DefaultEncoder。 interface Encoder { public Message toMessage(T data); } 提供了基于Zookeeper的broker自动感知能力，可以通过参数zk.connect实现。如果不使用Zookeeper，也可以使用broker.list参数指定一个静态的brokers列表，这样消息将被随机的发送到一个broker上，一旦选中的broker失败了，消息发送也就失败了。 通过分区函数kafka.producer.Partitioner类对消息分区。 interface Partitioner { int partition(T key, int numPartitions); }分区函数有两个参数：key和可用的分区数量，从分区列表中选择一个分区并返回id。默认的分区策略是hash(key)%numPartitions.如果key是null,就随机的选择一个。可以通过参数partitioner.class定制分区函数。 KafKa Consumer APIs Consumer API有两个级别。低级别的和一个指定的broker保持连接，并在接收完消息后关闭连接，这个级别是无状态的，每次读取消息都带着offset。 高级别的API隐藏了和brokers连接的细节，在不必关心服务端架构的情况下和服务端通信。还可以自己维护消费状态，并可以通过一些条件指定订阅特定的topic,比如白名单黑名单或者正则表达式。 低级别的API class SimpleConsumer { /向一个broker发送读取请求并得到消息集 / public ByteBufferMessageSet fetch(FetchRequest request); /向一个broker发送读取请求并得到一个相应集 / public MultiFetchResponse multifetch(List fetches); /** * 得到指定时间之前的offsets * 返回值是offsets列表，以倒序排序 * @param time: 时间，毫秒, * 如果指定为OffsetRequest$.MODULE$.LATIEST_TIME(), 得到最新的offset. * 如果指定为OffsetRequest$.MODULE$.EARLIEST_TIME(),得到最老的offset. */ publiclong[] getOffsetsBefore(String topic, int partition, long time, int maxNumOffsets); } 复制代码 低级别的API是高级别API实现的基础，也是为了一些对维持消费状态有特殊需求的场景，比如Hadoop consumer这样的离线consumer。 高级别的API /* 创建连接 */ ConsumerConnector connector = Consumer.create(consumerConfig); interface ConsumerConnector { /** * 这个方法可以得到一个流的列表，每个流都是MessageAndMetadata的迭代，通过MessageAndMetadata可以拿到消息和其他的元数据（目前之后topic） * Input: a map of &lt;topic, #streams&gt; * Output: a map of &lt;topic, list of message streams&gt; */ public Map&lt;String,List&gt; createMessageStreams(Map&lt;String,Int&gt; topicCountMap); /** * 你也可以得到一个流的列表，它包含了符合TopicFiler的消息的迭代， * 一个TopicFilter是一个封装了白名单或黑名单的正则表达式。 */ public List createMessageStreamsByFilter( TopicFilter topicFilter, int numStreams); /* 提交目前消费到的offset */ public commitOffsets() /* 关闭连接 */ public shutdown() } 复制代码 这个API围绕着由KafkaStream实现的迭代器展开，每个流代表一系列从一个或多个分区多和broker上汇聚来的消息，每个流由一个线程处理，所以客户端可以在创建的时候通过参数指定想要几个流。一个流是多个分区多个broker的合并，但是每个分区的消息只会流向一个流。 每调用一次createMessageStreams都会将consumer注册到topic上，这样consumer和brokers之间的负载均衡就会进行调整。API鼓励每次调用创建更多的topic流以减少这种调整。createMessageStreamsByFilter方法注册监听可以感知新的符合filter的tipic。 ####################################################### 十、消息和日志 消息由一个固定长度的头部和可变长度的字节数组组成。头部包含了一个版本号和CRC32校验码。 /** * 具有N个字节的消息的格式如下 * * 如果版本号是0 * * 1. 1个字节的 “magic” 标记 * * 2. 4个字节的CRC32校验码 * * 3. N - 5个字节的具体信息 * * 如果版本号是1 * * 1. 1个字节的 “magic” 标记 * * 2.1个字节的参数允许标注一些附加的信息比如是否压缩了，解码类型等 * * 3.4个字节的CRC32校验码 * * 4. N - 6 个字节的具体信息 * */ 复制代码 日志一个叫做“my_topic”且有两个分区的的topic,它的日志有两个文件夹组成，my_topic_0和my_topic_1,每个文件夹里放着具体的数据文件，每个数据文件都是一系列的日志实体，每个日志实体有一个4个字节的整数N标注消息的长度，后边跟着N个字节的消息。每个消息都可以由一个64位的整数offset标注，offset标注了这条消息在发送到这个分区的消息流中的起始位置。每个日志文件的名称都是这个文件第一条日志的offset.所以第一个日志文件的名字就是00000000000.kafka.所以每相邻的两个文件名字的差就是一个数字S,S差不多就是配置文件中指定的日志文件的最大容量。 消息的格式都由一个统一的接口维护，所以消息可以在producer,broker和consumer之间无缝的传递。存储在硬盘上的消息格式如下所示： 消息长度: 4 bytes (value: 1+4+n) 版本号: 1 byte CRC校验码: 4 bytes 具体的消息: n bytes 写操作消息被不断的追加到最后一个日志的末尾，当日志的大小达到一个指定的值时就会产生一个新的文件。对于写操作有两个参数，一个规定了消息的数量达到这个值时必须将数据刷新到硬盘上，另外一个规定了刷新到硬盘的时间间隔，这对数据的持久性是个保证，在系统崩溃的时候只会丢失一定数量的消息或者一个时间段的消息。 读操作 读操作需要两个参数：一个64位的offset和一个S字节的最大读取量。S通常比单个消息的大小要大，但在一些个别消息比较大的情况下，S会小于单个消息的大小。这种情况下读操作会不断重试，每次重试都会将读取量加倍，直到读取到一个完整的消息。可以配置单个消息的最大值，这样服务器就会拒绝大小超过这个值的消息。也可以给客户端指定一个尝试读取的最大上限，避免为了读到一个完整的消息而无限次的重试。 在实际执行读取操纵时，首先需要定位数据所在的日志文件，然后根据offset计算出在这个日志中的offset(前面的的offset是整个分区的offset),然后在这个offset的位置进行读取。定位操作是由二分查找法完成的，Kafka在内存中为每个文件维护了offset的范围。 下面是发送给consumer的结果的格式： MessageSetSend (fetch result) total length : 4 bytes error code : 2 bytes message 1 : x bytes … message n : x bytes MultiMessageSetSend (multiFetch result) total length : 4 bytes error code : 2 bytes messageSetSend 1 … messageSetSend n 复制代码 删除 日志管理器允许定制删除策略。目前的策略是删除修改时间在N天之前的日志（按时间删除），也可以使用另外一个策略：保留最后的N GB数据的策略(按大小删除)。为了避免在删除时阻塞读操作，采用了copy-on-write形式的实现，删除操作进行时，读取操作的二分查找功能实际是在一个静态的快照副本上进行的，这类似于Java的CopyOnWriteArrayList。 可靠性保证 日志文件有一个可配置的参数M，缓存超过这个数量的消息将被强行刷新到硬盘。一个日志矫正线程将循环检查最新的日志文件中的消息确认每个消息都是合法的。合法的标准为：所有文件的大小的和最大的offset小于日志文件的大小，并且消息的CRC32校验码与存储在消息实体中的校验码一致。如果在某个offset发现不合法的消息，从这个offset到下一个合法的offset之间的内容将被移除。 有两种情况必须考虑： 1，当发生崩溃时有些数据块未能写入。 2，写入了一些空白数据块。第二种情况的原因是，对于每个文件，操作系统都有一个inode（inode是指在许多“类Unix文件系统”中的一种数据结构。每个inode保存了文件系统中的一个文件系统对象,包括文件、目录、大小、设备文件、socket、管道, 等等），但无法保证更新inode和写入数据的顺序，当inode保存的大小信息被更新了，但写入数据时发生了崩溃，就产生了空白数据块。CRC校验码可以检查这些块并移除，当然因为崩溃而未写入的数据块也就丢失了。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"kafka","slug":"kafka","permalink":"https://hero.triple.net.cn/tags/kafka/"},{"name":"卡夫卡","slug":"卡夫卡","permalink":"https://hero.triple.net.cn/tags/卡夫卡/"},{"name":"消息队列","slug":"消息队列","permalink":"https://hero.triple.net.cn/tags/消息队列/"}]},{"title":"【pip】PyPI 镜像使用帮助","slug":"e3-80-90pip-e3-80-91pypi-e9-95-9c-e5-83-8f-e4-bd-bf-e7-94-a8-e5-b8-ae-e5-8a-a9","date":"2017-08-30T02:16:23.000Z","updated":"2018-12-12T08:59:53.208Z","comments":true,"path":"2017/08/30/e3-80-90pip-e3-80-91pypi-e9-95-9c-e5-83-8f-e4-bd-bf-e7-94-a8-e5-b8-ae-e5-8a-a9/","link":"","permalink":"https://hero.triple.net.cn/2017/08/30/e3-80-90pip-e3-80-91pypi-e9-95-9c-e5-83-8f-e4-bd-bf-e7-94-a8-e5-b8-ae-e5-8a-a9/","excerpt":"","text":"如何使用科大 mirrors 加速 pip？ 编辑 ~/.pip/pip.conf 文件（如果没有则创建之），将 index-url 开头的一行修改为下面一行： index-url = https://mirrors.ustc.edu.cn/pypi/web/simple 如果运行 pip 时, 提示如下错误 configparser.MissingSectionHeaderError: File contains no section headers. 请在 ~/.pip/pip.conf 最上方加上 [global] 这一 section header 如： [global] index-url = https://mirrors.ustc.edu.cn/pypi/web/simple format = columns &gt;同步方式 使用 bandersnatch，每4小时从 pypi.python.org 官方同步。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"pip","slug":"pip","permalink":"https://hero.triple.net.cn/tags/pip/"},{"name":"python-pip","slug":"python-pip","permalink":"https://hero.triple.net.cn/tags/python-pip/"},{"name":"中科大","slug":"中科大","permalink":"https://hero.triple.net.cn/tags/中科大/"}]},{"title":"Linux下同时解压多个文件.tar","slug":"Extract-multiple-files-at-the-sametime-under-Linux","date":"2017-08-30T02:04:57.000Z","updated":"2018-12-18T08:31:00.626Z","comments":true,"path":"2017/08/30/Extract-multiple-files-at-the-sametime-under-Linux/","link":"","permalink":"https://hero.triple.net.cn/2017/08/30/Extract-multiple-files-at-the-sametime-under-Linux/","excerpt":"","text":"大家都知道，tar 命令只能接受一个文件名作为参数，也就是说 tar 命令本身一次只能解压一个文件。 如果某个目录下有很多 .tar.gz 文件，一个一个去解压显然麻烦，能不能一条命令就把它们全解出来？ 答案是肯定的。 我们可以通过 for in 循环语句来实现，原理是将要解压的归档文件名逐一赋给一个变亮，通过循环语句让 tar 逐一引用这些变量即可。 说得这么复杂，其实很简单，我也不碎碎念了，下面就给出具体命令。 解压当前目录下的所有 .tar.gz 结尾的文件： for ARK in ./*.tar.gz; do tar xvf $ARK; done 原理就是上面说的，把当前目录下所有的 .tar.gz 文件的文件名逐一赋给变量 ARK，让 tar 来引用 ARK 变量。 转自：linuxdiyf.com","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"}]},{"title":"Centos7下安装pip","slug":"centos7-e4-b8-8b-e5-ae-89-e8-a3-85pip","date":"2017-08-30T01:50:55.000Z","updated":"2018-12-12T08:59:08.073Z","comments":true,"path":"2017/08/30/centos7-e4-b8-8b-e5-ae-89-e8-a3-85pip/","link":"","permalink":"https://hero.triple.net.cn/2017/08/30/centos7-e4-b8-8b-e5-ae-89-e8-a3-85pip/","excerpt":"","text":"pip简介 pip 是一个Python计算机程序语言写成的软件包管理系统，它可以安装和管理软件包 Centos 7 下安装pip 我的Python版本是2.7.5，所以需要安装pip，安装教程上说：如果从Python.org 上下载的python2版本&gt;= 2.7.9 或者 Python3 版本&gt;=3.4 已经安装了pip，只需update 下载get-pip.py wget https://bootstrap.pypa.io/get-pip.py 执行get-pip.py python get-pip.py 会自动安装pip需要的依赖包 查看pip命令 pip 修改~/.pip/pip.conf文件 这个文件如果没有就创建一个，为了让pip下载安装包速度快一点，做如下修改： [global] timeout = 60 index-url = https://mirrors.ustc.edu.cn/pypi/web/simple 参考地址 https://pip.pypa.io/en/stable/installing/","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://hero.triple.net.cn/tags/centos/"},{"name":"pip","slug":"pip","permalink":"https://hero.triple.net.cn/tags/pip/"},{"name":"python-pip","slug":"python-pip","permalink":"https://hero.triple.net.cn/tags/python-pip/"}]},{"title":"HTTP协议详解（真的很经典） - Hundre - 博客园","slug":"http-e5-8d-8f-e8-ae-ae-e8-af-a6-e8-a7-a3-ef-bc-88-e7-9c-9f-e7-9a-84-e5-be-88-e7-bb-8f-e5-85-b8-ef-bc-89-hundre-e5-8d-9a-e5-ae-a2-e5-9b-ad","date":"2017-08-29T22:15:38.000Z","updated":"2018-12-12T09:19:37.133Z","comments":true,"path":"2017/08/30/http-e5-8d-8f-e8-ae-ae-e8-af-a6-e8-a7-a3-ef-bc-88-e7-9c-9f-e7-9a-84-e5-be-88-e7-bb-8f-e5-85-b8-ef-bc-89-hundre-e5-8d-9a-e5-ae-a2-e5-9b-ad/","link":"","permalink":"https://hero.triple.net.cn/2017/08/30/http-e5-8d-8f-e8-ae-ae-e8-af-a6-e8-a7-a3-ef-bc-88-e7-9c-9f-e7-9a-84-e5-be-88-e7-bb-8f-e5-85-b8-ef-bc-89-hundre-e5-8d-9a-e5-ae-a2-e5-9b-ad/","excerpt":"","text":"转自：http://blog.csdn.net/gueter/archive/2007/03/08/1524447.aspx 引言 HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。 HTTP协议的主要特点可概括如下： 1.支持客户/服务器模式。 2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。 3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。 4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 一、HTTP协议详解之URL篇 http（超文本传输协议）是一个基于请求与响应模式的、无状态的、应用层的协议，常基于TCP的连接方式，HTTP1.1版本中给出一种持续连接的机制，绝大多数的Web开发，都是构建在HTTP协议之上的Web应用。 HTTP URL (URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息)的格式如下： http://host[“:”port][abs_path] http表示要通过HTTP协议来定位网络资源；host表示合法的Internet主机域名或者IP地址；port指定一个端口号，为空则使用缺省端口80；abs_path指定请求资源的URI；如果URL中没有给出abs_path，那么当它作为请求URI时，必须以“/”的形式给出，通常这个工作浏览器自动帮我们完成。 eg: 1、输入：www.guet.edu.cn 浏览器自动转换成：http://www.guet.edu.cn/ 2、http:192.168.0.116:8080/index.jsp 二、HTTP协议详解之请求篇 http请求由三部分组成，分别是：请求行、消息报头、请求正文 1、请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本，格式如下：Method Request-URI HTTP-Version CRLF 其中 Method表示请求方法；Request-URI是一个统一资源标识符；HTTP-Version表示请求的HTTP协议版本；CRLF表示回车和换行（除了作为结尾的CRLF外，不允许出现单独的CR或LF字符）。 请求方法（所有方法全为大写）有多种，各个方法的解释如下： GET 请求获取Request-URI所标识的资源 POST 在Request-URI所标识的资源后附加新的数据 HEAD 请求获取由Request-URI所标识的资源的响应消息报头 PUT 请求服务器存储一个资源，并用Request-URI作为其标识 DELETE 请求服务器删除Request-URI所标识的资源 TRACE 请求服务器回送收到的请求信息，主要用于测试或诊断 CONNECT 保留将来使用 OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求 应用举例： GET方法：在浏览器的地址栏中输入网址的方式访问网页时，浏览器采用GET方法向服务器获取资源，eg:GET /form.html HTTP/1.1 (CRLF) POST方法要求被请求服务器接受附在请求后面的数据，常用于提交表单。 eg：POST /reg.jsp HTTP/ (CRLF) Accept:image/gif,image/x-xbit,… (CRLF) … HOST:www.guet.edu.cn (CRLF) Content-Length:22 (CRLF) Connection:Keep-Alive (CRLF) Cache-Control:no-cache (CRLF) (CRLF) //该CRLF表示消息报头已经结束，在此之前为消息报头 user=jeffrey&amp;pwd=1234 //此行以下为提交的数据 HEAD方法与GET方法几乎是一样的，对于HEAD请求的回应部分来说，它的HTTP头部中包含的信息与通过GET请求所得到的信息是相同的。利用这个方法，不必传输整个资源内容，就可以得到Request-URI所标识的资源的信息。该方法常用于测试超链接的有效性，是否可以访问，以及最近是否更新。 2、请求报头后述 3、请求正文(略) 三、HTTP协议详解之响应篇 在接收和解释请求消息后，服务器返回一个HTTP响应消息。 HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文 1、状态行格式如下： HTTP-Version Status-Code Reason-Phrase CRLF 其中，HTTP-Version表示服务器HTTP协议的版本；Status-Code表示服务器发回的响应状态代码；Reason-Phrase表示状态代码的文本描述。 状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值： 1xx：指示信息–表示请求已接收，继续处理 2xx：成功–表示请求已被成功接收、理解、接受 3xx：重定向–要完成请求必须进行更进一步的操作 4xx：客户端错误–请求有语法错误或请求无法实现 5xx：服务器端错误–服务器未能实现合法的请求 常见状态代码、状态描述、说明： 200 OK //客户端请求成功 400 Bad Request //客户端请求有语法错误，不能被服务器所理解 401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 403 Forbidden //服务器收到请求，但是拒绝提供服务 404 Not Found //请求资源不存在，eg：输入了错误的URL 500 Internal Server Error //服务器发生不可预期的错误 503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常 eg：HTTP/1.1 200 OK （CRLF） 2、响应报头后述 3、响应正文就是服务器返回的资源的内容 四、HTTP协议详解之消息报头篇 HTTP消息由客户端到服务器的请求和服务器到客户端的响应组成。请求消息和响应消息都是由开始行（对于请求消息，开始行就是请求行，对于响应消息，开始行就是状态行），消息报头（可选），空行（只有CRLF的行），消息正文（可选）组成。 HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。 每一个报头域都是由名字+“：”+空格+值 组成，消息报头域的名字是大小写无关的。 1、普通报头 在普通报头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息。 eg： Cache-Control 用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的（一个消息的缓存指令不会影响另一个消息处理的缓存机制），HTTP1.0使用的类似的报头域为Pragma。 请求时的缓存指令包括：no-cache（用于指示请求或响应消息不能缓存）、no-store、max-age、max-stale、min-fresh、only-if-cached; 响应时的缓存指令包括：public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age、s-maxage. eg：为了指示IE浏览器（客户端）不要缓存页面，服务器端的JSP程序可以编写如下：response.sehHeader(“Cache-Control”,”no-cache”); //response.setHeader(“Pragma”,”no-cache”);作用相当于上述代码，通常两者//合用 这句代码将在发送的响应消息中设置普通报头域：Cache-Control:no-cache Date普通报头域表示消息产生的日期和时间 Connection普通报头域允许发送指定连接的选项。例如指定连接是连续，或者指定“close”选项，通知服务器，在响应完成后，关闭连接 2、请求报头 请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。 常用的请求报头 Accept Accept请求报头域用于指定客户端接受哪些类型的信息。eg：Accept：image/gif，表明客户端希望接受GIF图象格式的资源；Accept：text/html，表明客户端希望接受html文本。 Accept-Charset Accept-Charset请求报头域用于指定客户端接受的字符集。eg：Accept-Charset:iso-8859-1,gb2312.如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。 Accept-Encoding Accept-Encoding请求报头域类似于Accept，但是它是用于指定可接受的内容编码。eg：Accept-Encoding:gzip.deflate.如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。 Accept-Language Accept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言。eg：Accept-Language:zh-cn.如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。 Authorization Authorization请求报头域主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为401（未授权），可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。 Host（发送请求时，该报头域是必需的） Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的，eg： 我们在浏览器中输入：http://www.guet.edu.cn/index.html 浏览器发送的请求消息中，就会包含Host请求报头域，如下： Host：www.guet.edu.cn 此处使用缺省端口号80，若指定了端口号，则变成：Host：www.guet.edu.cn:指定端口号 User-Agent 我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息。User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。不过，这个报头域不是必需的，如果我们自己编写一个浏览器，不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。 请求报头举例： GET /form.html HTTP/1.1 (CRLF) Accept:image/gif,image/x-xbitmap,image/jpeg,application/x-shockwave-flash,application/vnd.ms-excel,application/vnd.ms-powerpoint,application/msword,/ (CRLF) Accept-Language:zh-cn (CRLF) Accept-Encoding:gzip,deflate (CRLF) If-Modified-Since:Wed,05 Jan 2007 11:21:25 GMT (CRLF) If-None-Match:W/“80b1a4c018f3c41:8317” (CRLF) User-Agent:Mozilla/4.0(compatible;MSIE6.0;Windows NT 5.0) (CRLF) Host:www.guet.edu.cn (CRLF) Connection:Keep-Alive (CRLF) (CRLF) 3、响应报头 响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。 常用的响应报头 Location Location响应报头域用于重定向接受者到一个新的位置。Location响应报头域常用在更换域名的时候。 Server Server响应报头域包含了服务器用来处理请求的软件信息。与User-Agent请求报头域是相对应的。下面是 Server响应报头域的一个例子： Server：Apache-Coyote/1.1 WWW-Authenticate WWW-Authenticate响应报头域必须被包含在401（未授权的）响应消息中，客户端收到401响应消息时候，并发送Authorization报头域请求服务器对其进行验证时，服务端响应报头就包含该报头域。 eg：WWW-Authenticate:Basic realm=”Basic Auth Test!” //可以看出服务器对请求资源采用的是基本验证机制。 4、实体报头 请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，可以只发送实体报头域。实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。 常用的实体报头 Content-Encoding Content-Encoding实体报头域被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容的编码，因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding这样用于记录文档的压缩方法，eg：Content-Encoding：gzip Content-Language Content-Language实体报头域描述了资源所用的自然语言。没有设置该域则认为实体内容将提供给所有的语言阅读 者。eg：Content-Language:da Content-Length Content-Length实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字来表示。 Content-Type Content-Type实体报头域用语指明发送给接收者的实体正文的媒体类型。eg： Content-Type:text/html;charset=ISO-8859-1 Content-Type:text/html;charset=GB2312 Last-Modified Last-Modified实体报头域用于指示资源的最后修改日期和时间。 Expires Expires实体报头域给出响应过期的日期和时间。为了让代理服务器或浏览器在一段时间以后更新缓存中(再次访问曾访问过的页面时，直接从缓存中加载，缩短响应时间和降低服务器负载)的页面，我们可以使用Expires实体报头域指定页面过期的时间。eg：Expires：Thu，15 Sep 2006 16:23:12 GMT HTTP1.1的客户端和缓存必须将其他非法的日期格式（包括0）看作已经过期。eg：为了让浏览器不要缓存页面，我们也可以利用Expires实体报头域，设置为0，jsp中程序如下：response.setDateHeader(“Expires”,”0”); 五、利用telnet观察http协议的通讯过程 实验目的及原理： 利用MS的telnet工具，通过手动输入http请求信息的方式，向服务器发出请求，服务器接收、解释和接受请求后，会返回一个响应，该响应会在telnet窗口上显示出来，从而从感性上加深对http协议的通讯过程的认识。 实验步骤： 1、打开telnet 1.1 打开telnet 运行–&gt;cmd–&gt;telnet 1.2 打开telnet回显功能 set localecho 2、连接服务器并发送请求 2.1 open www.guet.edu.cn 80 //注意端口号不能省略 HEAD /index.asp HTTP/1.0 Host:www.guet.edu.cn /我们可以变换请求方法,请求桂林电子主页内容,输入消息如下/ open www.guet.edu.cn 80 GET /index.asp HTTP/1.0 //请求资源的内容 Host:www.guet.edu.cn 2.2 open www.sina.com.cn 80 //在命令提示符号下直接输入telnet www.sina.com.cn80 HEAD /index.asp HTTP/1.0 Host:www.sina.com.cn 3 实验结果： 3.1 请求信息2.1得到的响应是: HTTP/1.1 200 OK //请求成功 Server: Microsoft-IIS/5.0 //web服务器 Date: Thu,08 Mar 200707:17:51 GMT Connection: Keep-Alive Content-Length: 23330 Content-Type: text/html Expries: Thu,08 Mar 2007 07:16:51 GMT Set-Cookie: ASPSESSIONIDQAQBQQQB=BEJCDGKADEDJKLKKAJEOIMMH; path=/ Cache-control: private //资源内容省略 3.2 请求信息2.2得到的响应是: HTTP/1.0 404 Not Found //请求失败 Date: Thu, 08 Mar 2007 07:50:50 GMT Server: Apache/2.0.54 Last-Modified: Thu, 30 Nov 2006 11:35:41 GMT ETag: “6277a-415-e7c76980” Accept-Ranges: bytes X-Powered-By: mod_xlayout_jh/0.0.1vhs.markII.remix Vary: Accept-Encoding Content-Type: text/html X-Cache: MISS from zjm152-78.sina.com.cn Via: 1.0 zjm152-78.sina.com.cn:80&lt;squid/2.6.STABLES-20061207&gt; X-Cache: MISS from th-143.sina.com.cn Connection: close 失去了跟主机的连接 按任意键继续… 4 .注意事项：1、出现输入错误，则请求不会成功。 2、报头域不分大小写。 3、更深一步了解HTTP协议，可以查看RFC2616，在http://www.letf.org/rfc上找到该文件。 4、开发后台程序必须掌握http协议 六、HTTP协议相关技术补充 1、基础： 高层协议有：文件传输协议FTP、电子邮件传输协议SMTP、域名系统服务DNS、网络新闻传输协议NNTP和HTTP协议等 中介由三种：代理(Proxy)、网关(Gateway)和通道(Tunnel)，一个代理根据URI的绝对格式来接受请求，重写全部或部分消息，通过 URI的标识把已格式化过的请求发送到服务器。网关是一个接收代理，作为一些其它服务器的上层，并且如果必须的话，可以把请求翻译给下层的服务器协议。一 个通道作为不改变消息的两个连接之间的中继点。当通讯需要通过一个中介(例如：防火墙等)或者是中介不能识别消息的内容时，通道经常被使用。 代理(Proxy)：一个中间程序，它可以充当一个服务器，也可以充当一个客户机，为其它客户机建立请求。请求是通过可能的翻译在内部或经过传递到其它的 服务器中。一个代理在发送请求信息之前，必须解释并且如果可能重写它。代理经常作为通过防火墙的客户机端的门户，代理还可以作为一个帮助应用来通过协议处 理没有被用户代理完成的请求。 网关(Gateway)：一个作为其它服务器中间媒介的服务器。与代理不同的是，网关接受请求就好象对被请求的资源来说它就是源服务器；发出请求的客户机并没有意识到它在同网关打交道。 网关经常作为通过防火墙的服务器端的门户，网关还可以作为一个协议翻译器以便存取那些存储在非HTTP系统中的资源。 通道(Tunnel)：是作为两个连接中继的中介程序。一旦激活，通道便被认为不属于HTTP通讯，尽管通道可能是被一个HTTP请求初始化的。当被中继 的连接两端关闭时，通道便消失。当一个门户(Portal)必须存在或中介(Intermediary)不能解释中继的通讯时通道被经常使用。 2、协议分析的优势—HTTP分析器检测网络攻击 以模块化的方式对高层协议进行分析处理，将是未来入侵检测的方向。 HTTP及其代理的常用端口80、3128和8080在network部分用port标签进行了规定 3、HTTP协议Content Lenth限制漏洞导致拒绝服务攻击 使用POST方法时，可以设置ContentLenth来定义需要传送的数据长度，例如ContentLenth:999999999，在传送完成前，内 存不会释放，攻击者可以利用这个缺陷，连续向WEB服务器发送垃圾数据直至WEB服务器内存耗尽。这种攻击方法基本不会留下痕迹。 http://www.cnpaf.net/Class/HTTP/0532918532667330.html 4、利用HTTP协议的特性进行拒绝服务攻击的一些构思 服务器端忙于处理攻击者伪造的TCP连接请求而无暇理睬客户的正常请求（毕竟客户端的正常请求比率非常之小），此时从正常客户的角度看来，服务器失去响应，这种情况我们称作：服务器端受到了SYNFlood攻击（SYN洪水攻击）。 而Smurf、TearDrop等是利用ICMP报文来Flood和IP碎片攻击的。本文用“正常连接”的方法来产生拒绝服务攻击。 19端口在早期已经有人用来做Chargen攻击了，即Chargen_Denial_of_Service，但是！他们用的方法是在两台Chargen 服务器之间产生UDP连接，让服务器处理过多信息而DOWN掉，那么，干掉一台WEB服务器的条件就必须有2个：1.有Chargen服务2.有HTTP 服务 方法：攻击者伪造源IP给N台Chargen发送连接请求（Connect），Chargen接收到连接后就会返回每秒72字节的字符流（实际上根据网络实际情况，这个速度更快）给服务器。 5、Http指纹识别技术 Http指纹识别的原理大致上也是相同的：记录不同服务器对Http协议执行中的微小差别进行识别.Http指纹识别比TCP/IP堆栈指纹识别复杂许 多,理由是定制Http服务器的配置文件、增加插件或组件使得更改Http的响应信息变的很容易,这样使得识别变的困难；然而定制TCP/IP堆栈的行为 需要对核心层进行修改,所以就容易识别. 要让服务器返回不同的Banner信息的设置是很简单的,象Apache这样的开放源代码的Http服务器,用户可以在源代码里修改Banner信息,然 后重起Http服务就生效了；对于没有公开源代码的Http服务器比如微软的IIS或者是Netscape,可以在存放Banner信息的Dll文件中修 改,相关的文章有讨论的,这里不再赘述,当然这样的修改的效果还是不错的.另外一种模糊Banner信息的方法是使用插件。 常用测试请求： 1：HEAD/Http/1.0发送基本的Http请求 2：DELETE/Http/1.0发送那些不被允许的请求,比如Delete请求 3：GET/Http/3.0发送一个非法版本的Http协议请求 4：GET/JUNK/1.0发送一个不正确规格的Http协议请求 Http指纹识别工具Httprint,它通过运用统计学原理,组合模糊的逻辑学技术,能很有效的确定Http服务器的类型.它可以被用来收集和分析不同Http服务器产生的签名。 6、其他：为了提高用户使用浏览器时的性能，现代浏览器还支持并发的访问方式，浏览一个网页时同时建立多个连接，以迅速获得一个网页上的多个图标，这样能更快速完成整个网页的传输。 HTTP1.1中提供了这种持续连接的方式，而下一代HTTP协议：HTTP-NG更增加了有关会话控制、丰富的内容协商等方式的支持，来提供 更高效率的连接。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"http","slug":"http","permalink":"https://hero.triple.net.cn/tags/http/"},{"name":"https","slug":"https","permalink":"https://hero.triple.net.cn/tags/https/"}]},{"title":"java中getClass( )和class(）的联系和区别","slug":"java-e4-b8-adgetclass-e5-92-8cclass-ef-bc-89-e7-9a-84-e8-81-94-e7-b3-bb-e5-92-8c-e5-8c-ba-e5-88-ab","date":"2017-08-28T07:43:56.000Z","updated":"2018-12-12T09:19:37.178Z","comments":true,"path":"2017/08/28/java-e4-b8-adgetclass-e5-92-8cclass-ef-bc-89-e7-9a-84-e8-81-94-e7-b3-bb-e5-92-8c-e5-8c-ba-e5-88-ab/","link":"","permalink":"https://hero.triple.net.cn/2017/08/28/java-e4-b8-adgetclass-e5-92-8cclass-ef-bc-89-e7-9a-84-e8-81-94-e7-b3-bb-e5-92-8c-e5-8c-ba-e5-88-ab/","excerpt":"","text":"转载请注明出处：http://blog.csdn.net/xingjiarong/article/details/47908521 Java有两个获得类名的方法getClass（）和class（），这两个方法看似一样，实则不然。这两个方法涉及到了java中的反射。 反射 所谓反射，可以理解为在运行时期获取对象类型信息的操作。传统的编程方法要求程序员在编译阶段决定使用的类型，但是在反射的帮助下，编程人员可以动态获取这些信息，从而编写更加具有可移植性的代码。严格地说，反射并非编程语言的特性，因为在任何一种语言都可以实现反射机制，但是如果编程语言本身支持反射，那么反射的实现就会方便很多。 类型类 我们知道在Java中一切都是对象，我们一般所使用的对象都直接或间接继承自Object类。Object类中包含一个方法名叫getClass，利用这个方法就可以获得一个实例的类型类。类型类指的是代表一个类型的类，因为一切皆是对象，类型也不例外，在Java使用类型类来表示一个类型。所有的类型类都是Class类的实例。 联系 一般情况下，getclass（）方法和class（）方法是等价的，都可以获得一个类型名，例如下面的代码： class A{ public void func(){ } } public class Test { public static void main(String[] args) { A a = new A(); System.out.println(a.getClass()+&quot; &quot;+A.class); } } 输出的结果为： class A class A 区别： 两者最直接的区别就是，getClass（）是一个类的实例所具备的方法，而class（）方法是一个类的方法。 另外getClass（）是在运行时才确定的，而class（）方法是在编译时就确定了。 例如下面的程序： class A{ public void func(){ } } class B extends A{ } public class Test { public static void main(String[] args) { A a = new A(); B b = new B(); A ab = new B(); System.out.println(a.getClass()+&quot; &quot;+A.class); System.out.println(b.getClass()+&quot; &quot;+B.class); System.out.println(ab.getClass()); ab = a; System.out.println(ab.getClass()); } } 结果： class A class A class B class B class B class A 从最后的结果为class B来看，当出现继承和多态时，getclass和class方法的确实有所不同，因为是在运行时确定的，所以结果是ab在运行到这一时刻是所属的类型。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"getclass","slug":"getclass","permalink":"https://hero.triple.net.cn/tags/getclass/"}]},{"title":"详解https是如何确保安全的？","slug":"e8-af-a6-e8-a7-a3https-e6-98-af-e5-a6-82-e4-bd-95-e7-a1-ae-e4-bf-9d-e5-ae-89-e5-85-a8-e7-9a-84-ef-bc-9f","date":"2017-08-26T03:07:18.000Z","updated":"2018-12-12T09:13:19.487Z","comments":false,"path":"2017/08/26/e8-af-a6-e8-a7-a3https-e6-98-af-e5-a6-82-e4-bd-95-e7-a1-ae-e4-bf-9d-e5-ae-89-e5-85-a8-e7-9a-84-ef-bc-9f/","link":"","permalink":"https://hero.triple.net.cn/2017/08/26/e8-af-a6-e8-a7-a3https-e6-98-af-e5-a6-82-e4-bd-95-e7-a1-ae-e4-bf-9d-e5-ae-89-e5-85-a8-e7-9a-84-ef-bc-9f/","excerpt":"","text":"Https 介绍什么是HttpsHTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL Https的作用 内容加密 建立一个信息安全通道，来保证数据传输的安全； 身份认证 确认网站的真实性 数据完整性 防止内容被第三方冒充或者篡改 Https的劣势 对数据进行加解密决定了它比http慢 需要进行非对称的加解密，且需要三次握手。首次连接比较慢点，当然现在也有很多的优化。 出于安全考虑，浏览器不会在本地保存HTTPS缓存。实际上，只要在HTTP头中使用特定命令，HTTPS是可以缓存的。Firefox默认只在内存中缓存HTTPS。但是，只要头命令中有Cache-Control: Public，缓存就会被写到硬盘上。 IE只要http头允许就可以缓存https内容，缓存策略与是否使用HTTPS协议无关。 HTTPS和HTTP的区别 https协议需要到CA申请证书。 http是超文本传输协议，信息是明文传输；https 则是具有安全性的ssl加密传输协议。 http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。 http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。 http默认使用80端口，https默认使用443端口 下面就是https的整个架构，现在的https基本都使用TLS了，因为更加安全，所以下图中的SSL应该换为SSL/TLS。 下面就上图中的知识点进行一个大概的介绍。 加解密相关知识对称加密对称加密(也叫私钥加密)指加密和解密使用相同密钥的加密算法。有时又叫传统密码算法，就是加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来。而在大多数的对称算法中，加密密钥和解密密钥是相同的，所以也称这种加密算法为秘密密钥算法或单密钥算法。常见的对称加密有：DES（Data Encryption Standard）、AES（Advanced Encryption Standard）、RC4、IDEA 非对称加密与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）；并且加密密钥和解密密钥是成对出现的。非对称加密算法在加密和解密过程使用了不同的密钥，非对称加密也称为公钥加密，在密钥对中，其中一个密钥是对外公开的，所有人都可以获取到，称为公钥，其中一个密钥是不公开的称为私钥。 非对称加密算法对加密内容的长度有限制，不能超过公钥长度。比如现在常用的公钥长度是 2048 位，意味着待加密内容不能超过 256 个字节。 摘要算法数字摘要是采用单项Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。“数字摘要“是https能确保数据完整性和防篡改的根本原因。 数字签名数字签名技术就是对“非对称密钥加解密”和“数字摘要“两项技术的应用，它将摘要信息用发送者的私钥加密，与原文一起传送给接收者。接收者只有用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解密的摘要信息对比。如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息被修改过，因此数字签名能够验证信息的完整性。数字签名的过程如下：明文 --&gt; hash运算 --&gt; 摘要 --&gt; 私钥加密 --&gt; 数字签名 数字签名有两种功效：一、能确定消息确实是由发送方签名并发出来的，因为别人假冒不了发送方的签名。二、数字签名能确定消息的完整性。 注意： 数字签名只能验证数据的完整性，数据本身是否加密不属于数字签名的控制范围 数字证书为什么要有数字证书？对于请求方来说，它怎么能确定它所得到的公钥一定是从目标主机那里发布的，而且没有被篡改过呢？亦或者请求的目标主机本本身就从事窃取用户信息的不正当行为呢？这时候，我们需要有一个权威的值得信赖的第三方机构(一般是由政府审核并授权的机构)来统一对外发放主机机构的公钥，只要请求方这种机构获取公钥，就避免了上述问题的发生。 数字证书的颁发过程用户首先产生自己的密钥对，并将公共密钥及部分个人身份信息传送给认证中心。认证中心在核实身份后，将执行一些必要的步骤，以确信请求确实由用户发送而来，然后，认证中心将发给用户一个数字证书，该证书内包含用户的个人信息和他的公钥信息，同时还附有认证中心的签名信息(根证书私钥签名)。用户就可以使用自己的数字证书进行相关的各种活动。数字证书由独立的证书发行机构发布，数字证书各不相同，每种证书可提供不同级别的可信度。 证书包含哪些内容 证书颁发机构的名称 证书本身的数字签名 证书持有者公钥 证书签名用到的Hash算法 验证证书的有效性浏览器默认都会内置CA根证书，其中根证书包含了CA的公钥 证书颁发的机构是伪造的：浏览器不认识，直接认为是危险证书 证书颁发的机构是确实存在的，于是根据CA名，找到对应内置的CA根证书、CA的公钥。用CA的公钥，对伪造的证书的摘要进行解密，发现解不了，认为是危险证书。 对于篡改的证书，使用CA的公钥对数字签名进行解密得到摘要A，然后再根据签名的Hash算法计算出证书的摘要B，对比A与B，若相等则正常，若不相等则是被篡改过的。 证书可在其过期前被吊销，通常情况是该证书的私钥已经失密。较新的浏览器如Chrome、Firefox、Opera和Internet Explorer都实现了在线证书状态协议（OCSP）以排除这种情形：浏览器将网站提供的证书的序列号通过OCSP发送给证书颁发机构，后者会告诉浏览器证书是否还是有效的。 1、2点是对伪造证书进行的，3是对于篡改后的证书验证，4是对于过期失效的验证。 SSL 与 TLSSSL (Secure Socket Layer，安全套接字层)SSL为Netscape所研发，用以保障在Internet上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之传输过程中不会被截取，当前为3.0版本。 SSL协议可分为两层： SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。 SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。 TLS (Transport Layer Security，传输层安全协议)用于两个应用程序之间提供保密性和数据完整性。TLS 1.0是IETF（Internet Engineering Task Force，Internet工程任务组）制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本，可以理解为SSL 3.1，它是写入了 RFC 的。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）。较低的层为 TLS 记录协议，位于某个可靠的传输协议（例如 TCP）上面。 SSL/TLS协议作用： 认证用户和服务器，确保数据发送到正确的客户机和服务器； 加密数据以防止数据中途被窃取； 维护数据的完整性，确保数据在传输过程中不被改变。 TLS比SSL的优势 对于消息认证使用密钥散列法：TLS 使用“消息认证代码的密钥散列法”（HMAC），当记录在开放的网络（如因特网）上传送时，该代码确保记录不会被变更。SSLv3.0还提供键控消息认证，但HMAC比SSLv3.0使用的（消息认证代码）MAC 功能更安全。 增强的伪随机功能（PRF）：PRF生成密钥数据。在TLS中，HMAC定义PRF。PRF使用两种散列算法保证其安全性。如果任一算法暴露了，只要第二种算法未暴露，则数据仍然是安全的。 改进的已完成消息验证：TLS和SSLv3.0都对两个端点提供已完成的消息，该消息认证交换的消息没有被变更。然而，TLS将此已完成消息基于PRF和HMAC值之上，这也比SSLv3.0更安全。 一致证书处理：与SSLv3.0不同，TLS试图指定必须在TLS之间实现交换的证书类型。 特定警报消息：TLS提供更多的特定和附加警报，以指示任一会话端点检测到的问题。TLS还对何时应该发送某些警报进行记录。 SSL、TLS的握手过程SSL与TLS握手整个过程如下图所示，下面会详细介绍每一步的具体内容： 客户端首次发出请求由于客户端(如浏览器)对一些加解密算法的支持程度不一样，但是在TLS协议传输过程中必须使用同一套加解密算法才能保证数据能够正常的加解密。在TLS握手阶段，客户端首先要告知服务端，自己支持哪些加密算法，所以客户端需要将本地支持的加密套件(Cipher Suite)的列表传送给服务端。除此之外，客户端还要产生一个随机数，这个随机数一方面需要在客户端保存，另一方面需要传送给服务端，客户端的随机数需要跟服务端产生的随机数结合起来产生后面要讲到的 Master Secret 。 客户端需要提供如下信息： 支持的协议版本，比如TLS 1.0版 一个客户端生成的随机数，稍后用于生成”对话密钥” 支持的加密方法，比如RSA公钥加密 支持的压缩方法 服务端首次回应服务端在接收到客户端的Client Hello之后，服务端需要确定加密协议的版本，以及加密的算法，然后也生成一个随机数，以及将自己的证书发送给客户端一并发送给客户端，这里的随机数是整个过程的第二个随机数。 服务端需要提供的信息： 协议的版本 加密的算法 随机数 服务器证书 客户端再次回应客户端首先会对服务器下发的证书进行验证，验证通过之后，则会继续下面的操作，客户端再次产生一个随机数（第三个随机数），然后使用服务器证书中的公钥进行加密，以及放一个ChangeCipherSpec消息即编码改变的消息，还有整个前面所有消息的hash值，进行服务器验证，然后用新秘钥加密一段数据一并发送到服务器，确保正式通信前无误。客户端使用前面的两个随机数以及刚刚新生成的新随机数，使用与服务器确定的加密算法，生成一个Session Secret。 ChangeCipherSpecChangeCipherSpec是一个独立的协议，体现在数据包中就是一个字节的数据，用于告知服务端，客户端已经切换到之前协商好的加密套件（Cipher Suite）的状态，准备使用之前协商好的加密套件加密数据并传输了。 服务器再次响应服务端在接收到客户端传过来的第三个随机数的 加密数据之后，使用私钥对这段加密数据进行解密，并对数据进行验证，也会使用跟客户端同样的方式生成秘钥，一切准备好之后，也会给客户端发送一个 ChangeCipherSpec，告知客户端已经切换到协商过的加密套件状态，准备使用加密套件和 Session Secret加密数据了。之后，服务端也会使用 Session Secret 加密一段 Finish 消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。 后续客户端与服务器间通信确定秘钥之后，服务器与客户端之间就会通过商定的秘钥加密消息了，进行通讯了。整个握手过程也就基本完成了。 值得特别提出的是：SSL协议在握手阶段使用的是非对称加密，在传输阶段使用的是对称加密，也就是说在SSL上传送的数据是使用对称密钥加密的！因为非对称加密的速度缓慢，耗费资源。其实当客户端和主机使用非对称加密方式建立连接后，客户端和主机已经决定好了在传输过程使用的对称加密算法和关键的对称加密密钥，由于这个过程本身是安全可靠的，也即对称加密密钥是不可能被窃取盗用的，因此，保证了在传输过程中对数据进行对称加密也是安全可靠的，因为除了客户端和主机之外，不可能有第三方窃取并解密出对称加密密钥！如果有人窃听通信，他可以知道双方选择的加密方法，以及三个随机数中的两个。整个通话的安全，只取决于第三个随机数（Premaster secret）能不能被破解。 其他补充对于非常重要的保密数据，服务端还需要对客户端进行验证，以保证数据传送给了安全的合法的客户端。服务端可以向客户端发出 Cerficate Request 消息，要求客户端发送证书对客户端的合法性进行验证。比如，金融机构往往只允许认证客户连入自己的网络，就会向正式客户提供USB密钥，里面就包含了一张客户端证书。 PreMaster secret前两个字节是TLS的版本号，这是一个比较重要的用来核对握手数据的版本号，因为在Client Hello阶段，客户端会发送一份加密套件列表和当前支持的SSL/TLS的版本号给服务端，而且是使用明文传送的，如果握手的数据包被破解之后，攻击者很有可能串改数据包，选择一个安全性较低的加密套件和版本给服务端，从而对数据进行破解。所以，服务端需要对密文中解密出来对的PreMaster版本号跟之前Client Hello阶段的版本号进行对比，如果版本号变低，则说明被串改，则立即停止发送任何消息。 session的恢复有两种方法可以恢复原来的session：一种叫做session ID，另一种叫做session ticket。 session IDsession ID的思想很简单，就是每一次对话都有一个编号（session ID）。如果对话中断，下次重连的时候，只要客户端给出这个编号，且服务器有这个编号的记录，双方就可以重新使用已有的”对话密钥”，而不必重新生成一把。 session ID是目前所有浏览器都支持的方法，但是它的缺点在于session ID往往只保留在一台服务器上。所以，如果客户端的请求发到另一台服务器，就无法恢复对话 session ticket客户端发送一个服务器在上一次对话中发送过来的session ticket。这个session ticket是加密的，只有服务器才能解密，其中包括本次对话的主要信息，比如对话密钥和加密方法。当服务器收到session ticket以后，解密后就不必重新生成对话密钥了。 目前只有Firefox和Chrome浏览器支持。 总结https实际就是在TCP层与http层之间加入了SSL/TLS来为上层的安全保驾护航，主要用到对称加密、非对称加密、证书，等技术进行客户端与服务器的数据加密传输，最终达到保证整个通信的安全性。 参考文章数字证书的基础知识HTTPS科普扫盲帖和安全有关的那些事OpenSSL 与 SSL 数字证书概念贴基于OpenSSL自建CA和颁发SSL证书聊聊HTTPS和SSL/TLS协议SSL/TLS协议运行机制的概述图解SSL/TLS协议大型网站的 HTTPS 实践SSL/TLS原理详解扒一扒HTTPS网站的内幕白话解释 OSI模型，TLS/SSL 及 HTTPSOpenSSL HeartBleed漏洞原理漫画图解","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[]},{"title":"在Opensuse Leap上部署Ocserv（Anyconnect） | VPN信息网","slug":"e5-9c-a8opensuse-leap-e4-b8-8a-e9-83-a8-e7-bd-b2ocserv-ef-bc-88anyconnect-ef-bc-89-vpn-e4-bf-a1-e6-81-af-e7-bd-91","date":"2017-08-26T02:34:41.000Z","updated":"2018-12-12T09:08:58.681Z","comments":false,"path":"2017/08/26/e5-9c-a8opensuse-leap-e4-b8-8a-e9-83-a8-e7-bd-b2ocserv-ef-bc-88anyconnect-ef-bc-89-vpn-e4-bf-a1-e6-81-af-e7-bd-91/","link":"","permalink":"https://hero.triple.net.cn/2017/08/26/e5-9c-a8opensuse-leap-e4-b8-8a-e9-83-a8-e7-bd-b2ocserv-ef-bc-88anyconnect-ef-bc-89-vpn-e4-bf-a1-e6-81-af-e7-bd-91/","excerpt":"","text":"Opensuse的Wiki中介绍了Ocserv的搭建。 由于良久没有更新，文中的方法已经部分失效，因此在此对wiki中失效的方法作出修改。本文部署基于Leap 42.3，部分内容引用Opensuse的wiki。 背景知识：什么是 Cisco Anyconnect？什么是 ocserv？Cisco Anyconnect 是思科推出的一款企业级 VPN。其背后的开源技术是OpenConnect。简单来说就是平时使用 UDP 的DTLS协议进行加密，掉线时自动使用 TCP 的 TLS 协议进行备份恢复，因此相对其它 VPN 比较稳定；而且广泛被大企业采用，不容易被误杀；而加之比较小众架设起来不太容易，也吸引不了很多的火力。 ocserv 的安装ocserv已经包括在了Opensue的官方源中，因此ocserv的安装十分简单，只需要一条命令 linux# zypper in ocserv ocserv 的初始化配置修改 server.tmpl 模板将 ocserv 安装到您的服务器上后，您需要编辑 /etc/ocserv/certificates/server.tmpl，将其中的： cn = &quot;Your hostname or IP&quot; 改成你服务器的 IP 地址，可以使用： linux# ifconfig -a 查看您的ip地址 生成证书linux# cd /etc/ocserv/certificates linux# certtool --generate-privkey --outfile ca-key.pem linux# certtool --generate-self-signed --load-privkey ca-key.pem --template ca.tmpl --outfile ca-cert.pem linux# certtool --generate-privkey --outfile server-key.pem linux# certtool --generate-certificate --load-privkey server-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template server.tmpl --outfile server-cert.pem 参考：http://blog.tremily.us/posts/X.509_certificates/ 如果你有购买的SSL证书，只需要生成ca-key.pem即可，然后将你的证书和私钥放在/etc/ocserv/certificates下即可 生成密码文件linux# ocpasswd -c /etc/ocserv/ocpasswd 您要使用的用户名 “您要使用的用户名“是随意的，之后会提示您输入两次密码。 配置防火墙客户端连上Ocserv后使用的 IP 地址段 192.168.1.0/24 是可以在 /etc/ocserv/ocserv.conf 中配置的，这里用的是默认的。 同样，客户端连接Ocserv时使用的端口也是可以在 /etc/ocserv/ocserv.conf 中配置的，这里用的是tcp 999与udp 1999。 注意: 如果您没有特别设置过，新版 udev 确定的网口可能不是规整的 eth0，您需要 ifconfig -a 看后替换成你的。 使用SuSEfirewall2修改/etc/sysconfig/SuSEfirewall2 FW_DEV_INT=&quot;vpns0&quot; FW_ROUTE=&quot;yes&quot; FW_MASQUERADE=&quot;yes&quot; FW_MASQ_NETS=&quot;192.168.1.0/24&quot; FW_SERVICES_EXT_TCP=&quot;80 999 8080&quot; FW_SERVICES_EXT_UDP=&quot;1999&quot; FW_FORWARD=&quot;192.168.1.0/24,0/0&quot; 之后重新启动防火墙使之生效 linux# rcSuSEfirewall2 restart 使用iptables如果你习惯使用iptales，你需要在先关闭SuSEfirewall2 linux# systemctl disable SuSEfirewall2 linux# systemctl stop SuSEfirewall2 设置iptables转发规则 linux# echo 1 &gt; /proc/sys/net/ipv4/ip_forward linux# iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j MASQUERADE linux# iptables -A FORWARD -s 192.168.1.0/24 -j ACCEPT 测试linux# ocserv -f -d 1 运行不报错的话，可以用客户端连接来测试一下。 启动服务linux# ocserv -f -c /etc/ocserv/ocserv.conf 客户端证书登录也可以使用客户端证书而不是用户名密码来登录。 linux# certtool --generate-privkey --outfile user-key.pem linux# certtool --generate-certificate --load-privkey user-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template user.tmpl --outfile user-cert.pem 生成 iOS 可用的 pk12 文件linux# openssl pkcs12 -export -inkey user-key.pem -in user-cert.pem -certfile ca-cert.pem -out user.p12 会提示设置密码。之后可以把 user.p12 放在可以在线下载的地方，用你的 safari 去打开那个 URL 导入证书。 修改 ocserv.conf 配置把 auth 由 #auth = &quot;certificate&quot; auth = &quot;plain[/etc/ocserv/ocpasswd]&quot; 变成 auth = &quot;certificate&quot; #auth = &quot;plain[/etc/ocserv/ocpasswd]&quot; 并注释掉不支持的选项： listen-clear-file = /var/run/ocserv-conn.socket 然后启用证书验证 ca-cert = /etc/ocserv/certificates/ca-cert.pem 然后重新启动 ocserv.service linux# systemctl restart ocserv","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"anyconnect","slug":"anyconnect","permalink":"https://hero.triple.net.cn/tags/anyconnect/"},{"name":"cisco","slug":"cisco","permalink":"https://hero.triple.net.cn/tags/cisco/"},{"name":"vpn","slug":"vpn","permalink":"https://hero.triple.net.cn/tags/vpn/"}]},{"title":"如何将lantern共享给任何设备","slug":"e5-a6-82-e4-bd-95-e5-b0-86lantern-e5-85-b1-e4-ba-ab-e7-bb-99-e4-bb-bb-e4-bd-95-e8-ae-be-e5-a4-87","date":"2017-08-16T08:12:49.000Z","updated":"2018-12-12T09:08:58.762Z","comments":true,"path":"2017/08/16/e5-a6-82-e4-bd-95-e5-b0-86lantern-e5-85-b1-e4-ba-ab-e7-bb-99-e4-bb-bb-e4-bd-95-e8-ae-be-e5-a4-87/","link":"","permalink":"https://hero.triple.net.cn/2017/08/16/e5-a6-82-e4-bd-95-e5-b0-86lantern-e5-85-b1-e4-ba-ab-e7-bb-99-e4-bb-bb-e4-bd-95-e8-ae-be-e5-a4-87/","excerpt":"","text":"前言 本方法需要您懂得必要的网络基本知识，如固定IP地址、DHCP，熟悉计算机操作，如设置固定IP地址、查询计算机的IP地址、设置浏览器代理。如果不懂这些，请不要操作，以免造成混乱。 本方法只在局域网内有效，如家庭网络和办公网。 lantern的代理服务器模式 默认启动时，lantern只能通过管理系统代理来供本机（127.0.0.1）使用。事实上，lantern支持作为HTTP代理服务器的模式使用。在项目主页的Building Lantern for running on a server标题下有说明。 启用代理服务器模式的方法 （1）启动时，添加绑定IP地址的参数 --addr 0.0.0.0:8787。 在Windows上可修改启动的快捷方式（没有就创建）的属性（鼠标右键 – 属性 – 快捷方式 – 目标）来添加。在Linux下，运行lantern --addr 0.0.0.0:8787即可。这样启动后，lantern就成为局域网内的代理服务器了。假设这台机器的IP地址是192.168.1.250。 （2）为浏览器或系统配置代理 运行lantern的机器上，浏览器中的代理可依旧设置为127.0.0.1:8787或用192.168.1.250:8787，局域网内的其它设备，如iPad, iPhone，需要使用192.168.1.250:8787端口作为代理。 几点说明 （1）感谢Adam Fisk及所有的开发者的多年努力，3.x版本的lantern性能卓越。通过本法，配置iOS上的系统代理，可非常流畅地让家庭网络环境下的iPad, iPhone上Google、Twitter、YouTube、Facebook等被墙网站。在较新版本的iOS上，建议安装Wingy来管理系统代理。 （2）如果有条件，建议使用有线联网的机器运行lantern作为代理服务器，同时使用固定IP地址，以便稳定。当然，使用无线联网的机器也没有问题，也可为它配置固定IP地址。 （3）如果懂得路由器的配置，请调整路由器中DHCP分配的范围，留下一段地址不自动分配 ，作为固定IP地址池使用，如从2-20。这样，可方便上述固定IP地址的配置，以避免产生IP地址冲突。如果不想更改路由器的配置，可用一个较大的数字作为代理服务器的固定IP地址，如192.168.0.250或192.168.1.250。 （4）强烈建议使用Chrome(可从bing.com上搜索下载或让能翻墙的朋友从Google官网下载）或Opera浏览器配合扩展SwitchyOmega来使用，作为翻墙浏览的专用浏览器。在SwitchyOmega上创建一个HTTP代理情景模式并使用之。若使用Firefox，请安装AutoProxy或Foxyproxy扩展。提示：可通过拖拽来安装浏览器扩展。 （5）若在Windows上以代理服务器模式运行lantern，请关闭防火墙。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[]},{"title":"mysql默认时间日期","slug":"874","date":"2017-08-16T05:26:29.000Z","updated":"2018-12-12T08:57:54.157Z","comments":true,"path":"2017/08/16/874/","link":"","permalink":"https://hero.triple.net.cn/2017/08/16/874/","excerpt":"","text":"MySQL设置当前时间为默认值的问题我们经常会遇到，下面就为您介绍MySQL设置当前时间为默认值的实现全步骤，希望对您能有所启迪。 数据库：test_db1 创建表：test_ta1 两个字段： id （自增 且为主键）， createtime 创建日期（默认值为当前时间） – mysql默认时间日期use test_db1; create table test_ta1( id mediumint(8) unsigned not nulll auto_increment, createtime timestamp not null default current_timestamp, primary key (id)","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"date","slug":"date","permalink":"https://hero.triple.net.cn/tags/date/"},{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"},{"name":"time","slug":"time","permalink":"https://hero.triple.net.cn/tags/time/"},{"name":"timestamp","slug":"timestamp","permalink":"https://hero.triple.net.cn/tags/timestamp/"},{"name":"日期时间","slug":"日期时间","permalink":"https://hero.triple.net.cn/tags/日期时间/"}]},{"title":"关于选择邮箱的一些建议","slug":"e5-85-b3-e4-ba-8e-e9-80-89-e6-8b-a9-e9-82-ae-e7-ae-b1-e7-9a-84-e4-b8-80-e4-ba-9b-e5-bb-ba-e8-ae-ae","date":"2017-08-15T08:24:05.000Z","updated":"2018-12-12T09:08:58.722Z","comments":true,"path":"2017/08/15/e5-85-b3-e4-ba-8e-e9-80-89-e6-8b-a9-e9-82-ae-e7-ae-b1-e7-9a-84-e4-b8-80-e4-ba-9b-e5-bb-ba-e8-ae-ae/","link":"","permalink":"https://hero.triple.net.cn/2017/08/15/e5-85-b3-e4-ba-8e-e9-80-89-e6-8b-a9-e9-82-ae-e7-ae-b1-e7-9a-84-e4-b8-80-e4-ba-9b-e5-bb-ba-e8-ae-ae/","excerpt":"","text":"邮箱真的没什么好的选择， Gmail 应该是现在最好的。以前是 Yahoo 、 Hotmail 、 AOL 差别不大，但是 Gmail 出现之后，就只有它唯一一个还不错的了。 Outlook 的问题是微软的系统设计和账户安全。比如你启用两步认证的时候，可以生成应用密码但无法管理。可以想象如果有人添加了一个应用密码，他可以得到整个账户的访问权，然后真正的用户并没有办法单独取消这个非法授权，只能取消全部应用密码（开玩笑，在这种情况下账户的合法持有者可能根本不会发现多了条授权）。 另外 Outlook 虽然在国内可以直接访问，但是速度竟然还没翻过墙的 Google 快。 如果对邮箱安全性没什么要求的话但需要自定义域名可以考虑 Zohu ，对可靠性有要求的话可以考虑 Fastmail ，对加密有要求可以考虑 ProtonMail 。 关于 FASTMAIL FastMail一项由电子邮件供应商Messaging Engine提供的电子邮件服务，因最早提供免费IMAP邮件服务而出名。2010年，该公司被Opera收购。2013年9月26日，FastMail宣布从Opera分离，成为一家私人控股的独立公司[1] 至今FastMail在国际上仍是最受欢迎的IMAP邮件服务之一，而在中国则受到Gmail对IMAP的支持的冲击。FastMail拥有数十个提供服务的域名。 在一项非正式的评比中，FastMail的安全性与Gmail并列A级第二，A级第一是Mail.de。A级的条件：除了User - Server间的传输用TLS 1.2加密之外，Server - Server的送信、收信也必须支援TLS 1.2加密，才能保证传输的&gt; 任何一段过程皆不被偷窥。世界各国Email服务中能达到顶尖的不到5家。但FastMail由于服务器设在侵犯网络隐私恶名昭彰的美国（关键字：棱镜计划），因此虽有技术上的安全性，仍不能保证美国政府不透过施压业者的方式、不需窃&gt; 听即可取得通讯内容；所以FastMail和Gmail在这项评比中被列为第二[2]。 _收费_, 界面漂亮 关于 FASTMAIL ProtonMail现由总部设在瑞士日内瓦州的Proton &gt; Technologies AG经营。据Andy Yen称，他和公司一半的人都来自麻省理工学院（MIT），ProtonMail的两个服务器分别设在瑞士的Lausanne和Attinghausen。 ProtonMail账户有protonmail.ch、protonmail.com两个后缀，用户可在设置中自行选择默认后缀。ProtonMail帐户使用登录密码和邮箱密码两个用户密码。第一认证该用户进入ProtonMail系统，而第二解密该用户的电子邮箱。第二密码是已知的仅给用户。ProtonMail的服务器抱以加密的形式和密码恢复用户的数据是不可能的。钉钉（DingTalk）、Snapchat和Telegram也具有类似的服务。ProtonMail还包括一个消息过期功能，允许加密的电子邮件经过一段时间后自行销毁。 ProtonMail采用了公钥加密和对称加密协议的组合，以提供终端到终端的加密。 主页 https://mail.protonmail.com 不容易打开","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"gmail","slug":"gmail","permalink":"https://hero.triple.net.cn/tags/gmail/"},{"name":"邮件","slug":"邮件","permalink":"https://hero.triple.net.cn/tags/邮件/"},{"name":"邮箱","slug":"邮箱","permalink":"https://hero.triple.net.cn/tags/邮箱/"}]},{"title":"Java发送邮件","slug":"java-e5-8f-91-e9-80-81-e9-82-ae-e4-bb-b6","date":"2017-08-08T06:46:49.000Z","updated":"2018-12-12T09:19:37.196Z","comments":true,"path":"2017/08/08/java-e5-8f-91-e9-80-81-e9-82-ae-e4-bb-b6/","link":"","permalink":"https://hero.triple.net.cn/2017/08/08/java-e5-8f-91-e9-80-81-e9-82-ae-e4-bb-b6/","excerpt":"","text":"本代码显示了通过JavaMail 发送带有附件的邮件，同时支持 HTML 和非 HTM L两种格式 需要 mail.jar, mail-5.1.2.jar， Google 自行搜索、下载 修改下帐号密码和 SMTP 立即可用。 impot: import java.util.Properties; import javax.activation.*; import javax.mail.*; import javax.mail.internet.InternetAddress; import javax.mail.internet.MimeBodyPart; import javax.mail.internet.MimeMessage; import javax.mail.internet.MimeMultipart; 代码： public static void main(String[] args) { String from = &quot;notice1@msla.top&quot;; String fromPwd = &quot;EmailPassword&quot;; String to = &quot;example@aliyun.com&quot;; String subject = &quot;Mail Test&quot;; String attach = &quot;Source/1.png&quot;; String content = &quot;&lt;h2&gt;Email Test&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Html&lt;/strong&gt; content test&lt;/p&gt;&quot;; //host setting String mailHost = &quot;smtp.mxhichina.com&quot;; String mailPort = &quot;25&quot;; Properties props = new Properties(); props.setProperty(&quot;mail.debug&quot;, &quot;true&quot;); props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;); props.setProperty(&quot;mail.smtp.host&quot;, mailHost); props.setProperty(&quot;mail.smtp.port&quot;, mailPort); props.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;); Session session = Session.getInstance(props); Message msg = new MimeMessage(session); try { msg.setSubject(subject); Multipart multiPart = new MimeMultipart(); // creating a multipart is OK MimeBodyPart attPart = new MimeBodyPart(); // 非 HTML 版本的邮件 Content MimeBodyPart textPart = new MimeBodyPart(); textPart.setText(&quot;非 HTML 版本的邮件 Content&quot;, &quot;utf-8&quot;); // HTML 版本的邮件 MimeBodyPart htmlPart = new MimeBodyPart(); htmlPart.setContent(content, &quot;text/html; charset=utf-8&quot;); // attachment String filename = attach; DataSource source = (DataSource) new FileDataSource(filename); attPart.setDataHandler(new DataHandler(source)); attPart.setFileName(filename.substring(filename.lastIndexOf(&quot;/&quot;)+1)); multiPart.addBodyPart(textPart); // &lt;-- first multiPart.addBodyPart(htmlPart); // &lt;-- second multiPart.addBodyPart(attPart); msg.setContent(multiPart); // 设置发件人 msg.setFrom(new InternetAddress(from)); msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(&quot;Phasellus@aliyun.com&quot;)); Transport transport = session.getTransport(); transport.connect(from, fromPwd); // 发送邮件 transport.sendMessage(msg, new Address[] { new InternetAddress(to) }); // 关闭连接 transport.close(); } catch (MessagingException e) { e.printStackTrace(); } }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"邮件","slug":"邮件","permalink":"https://hero.triple.net.cn/tags/邮件/"},{"name":"email","slug":"email","permalink":"https://hero.triple.net.cn/tags/email/"}]},{"title":"xfce/iBus 修改输入法顺序","slug":"xfce-ibus-e4-bf-ae-e6-94-b9-e8-be-93-e5-85-a5-e6-b3-95-e9-a1-ba-e5-ba-8f","date":"2017-08-08T02:47:05.000Z","updated":"2018-12-12T09:24:02.382Z","comments":true,"path":"2017/08/08/xfce-ibus-e4-bf-ae-e6-94-b9-e8-be-93-e5-85-a5-e6-b3-95-e9-a1-ba-e5-ba-8f/","link":"","permalink":"https://hero.triple.net.cn/2017/08/08/xfce-ibus-e4-bf-ae-e6-94-b9-e8-be-93-e5-85-a5-e6-b3-95-e9-a1-ba-e5-ba-8f/","excerpt":"","text":"使用 dconf 命令（如果有找到GUI界面更好） 打开 dconf Editor &gt; desktop &gt; ibus &gt; general &gt; engines-oder 可以调整 还有就是要确认是不是当前桌面环境使用的键盘布局有问题 如果使用 dconf write /desktop/ibus/general/engines-order [&apos;xkb:us::eng&apos;, &apos;libpinyin&apos;] 提示 error: 1-10:unknown keyword 更应该注意。 可以在iBus 首选项-高级 里面把布局改成 “使用系统键盘”","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"xfce","slug":"xfce","permalink":"https://hero.triple.net.cn/tags/xfce/"},{"name":"输入法","slug":"输入法","permalink":"https://hero.triple.net.cn/tags/输入法/"}]},{"title":"JMS 在 SpringBoot 中的使用 - 后端 - 掘金","slug":"jms-e5-9c-a8-springboot-e4-b8-ad-e7-9a-84-e4-bd-bf-e7-94-a8-e5-90-8e-e7-ab-af-e6-8e-98-e9-87-91","date":"2017-08-08T02:21:13.000Z","updated":"2018-12-12T09:19:37.237Z","comments":true,"path":"2017/08/08/jms-e5-9c-a8-springboot-e4-b8-ad-e7-9a-84-e4-bd-bf-e7-94-a8-e5-90-8e-e7-ab-af-e6-8e-98-e9-87-91/","link":"","permalink":"https://hero.triple.net.cn/2017/08/08/jms-e5-9c-a8-springboot-e4-b8-ad-e7-9a-84-e4-bd-bf-e7-94-a8-e5-90-8e-e7-ab-af-e6-8e-98-e9-87-91/","excerpt":"","text":"JMS 在 SpringBoot 中的使用 当前环境 Mac OS 10.11.x docker 1.12.1 JDK 1.8 SpringBoot 1.5 前言基于之前一篇“一个故事告诉你什么是消息队列”，了解了消息队列的使用场景以及相关的特性。本文主要讲述消息服务在 JAVA 中的使用。 市面上的有关消息队列的技术选型非常多，如果我们的代码框架要支持不同的消息实现，在保证框架具有较高扩展性的前提下，我们势必要进行一定的封装。 在 JAVA 中，大可不必如此。因为 JAVA 已经制定了一套标准的 JMS 规范。该规范定义了一套通用的接口和相关语义，提供了诸如持久、验证和事务的消息服务，其最主要的目的是允许Java应用程序访问现有的消息中间件。就和 JDBC 一样。 基本概念在介绍具体的使用之前，先简单介绍一下 JMS 的一些基本知识。这里我打算分为 3 部分来介绍，即 消息队列（MQ）的连接、消息发送与消息接收。 这里我们的技术选型是 SpringBoot、JMS、ActiveMQ 为了更好的理解 JMS，这里没有使用 SpringBoot 零配置来搭建项目 MQ 的连接使用 MQ 的第一步一定是先连接 MQ。因为这里使用的是 JMS 规范，对于任何遵守 JMS 规范的 MQ 来说，都会实现相应的ConnectionFactory接口，因此我们只需要创建一个ConnectionFactory工厂类，由它来实现 MQ 的连接，以及封装一系列特性的 MQ 参数。 例子：这里我们以 ActiveMQ 为例， maven 依赖： &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.3.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 创建 ActiveMQ 连接工厂： @Bean public ConnectionFactory connectionFactory(){ ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(); connectionFactory.setBrokerURL(ActiveMQ_URL); connectionFactory.setUserName(ActiveMQ_USER); connectionFactory.setPassword(ActiveMQ_PASSWORD); return connectionFactory; } 消息发送关于消息的发送，是通过 JMS 核心包中的JmsTemplate类来实现的，它简化了 JMS 的使用，因为在发送或同步接收消息时它帮我们处理了资源的创建和释放。从它的作用也不难推测出，它需要引用我们上面创建的连接工厂，具体代码如下： @Bean public JmsTemplate jmsQueueTemplate(){ return new JmsTemplate(connectionFactory()); } JmsTemplate创建完成后，我们就可以调用它的方法来发送消息了。这里有两个概念需要注意： 消息会发送到哪里？-> 即需要指定发送队列的目的地（Destination），是可以在 JNDI 中进行存储和提取的 JMS 管理对象。 发送的消息体具体是什么？-> 实现了javax.jms.Message的对象，类似于 JAVA RMI 的 Remote 对象。 代码示例： @Autowired private JmsTemplate jmsQueueTemplate; /** * 发送原始消息 Message */ public void send(){ jmsQueueTemplate.send(&quot;queue1&quot;, new MessageCreator() { @Override public Message createMessage(Session session) throws JMSException { return session.createTextMessage(&quot;我是原始消息&quot;); } }); } 优化：当然，我们不用每次都通过MessageCreator匿名类的方式来创建Message对象，JmsTemplate类中提供了对象实体自动转换为Message对象的方法，convertAndSend(String destinationName, final Object message)。 优化代码示例： /** * 发送消息自动转换成原始消息 */ public void convertAndSend(){ jmsQueueTemplate.convertAndSend(&quot;queue1&quot;, &quot;我是自动转换的消息&quot;); } 注：关于消息转换，还可以通过实现MessageConverter接口来自定义转换内容 消息接收讲完了消息发送，我们最后来说说消息是如何接收的。消息既然是以Message对象的形式发送到指定的目的地，那么消息的接收势必会去指定的目的地上去接收消息。这里采用的是监听者的方式来监听指定地点的消息，采用注解@JmsListener来设置监听方法。 代码示例： @Component public class Listener1 { @JmsListener(destination = &quot;queue1&quot;) public void receive(String msg){ System.out.println(&quot;监听到的消息内容为: &quot; + msg); } } 有了监听的目标和方法后，监听器还得和 MQ 关联起来，这样才能运作起来。这里的监听器可能不止一个，如果每个都要和 MQ 建立连接，肯定不太合适。所以需要一个监听容器工厂的概念，即接口JmsListenerContainerFactory，它会引用上面创建好的与 MQ 的连接工厂，由它来负责接收消息以及将消息分发给指定的监听器。当然也包括事务管理、资源获取与释放和异常转换等。 代码示例： @Bean public DefaultJmsListenerContainerFactory jmsQueueListenerContainerFactory() { DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory(); factory.setConnectionFactory(connectionFactory()); //设置连接数 factory.setConcurrency(&quot;3-10&quot;); //重连间隔时间 factory.setRecoveryInterval(1000L); return factory; } 场景代码地址：github.com/jasonGeng88… 对 JMS 有了基本的理解后，我们就来在具体的场景中使用一下。 首先，我们需要先启动 ActiveMQ，这里我们以 Docker 容器化的方式进行启动。 启动命令： docker run -d -p 8161:8161 -p 61616:61616 --name activemq webcenter/activemq 启动成功后，在 ActiveMQ 可视化界面查看效果（http://localhost:8161）： 点对点模式（单消费者）下面介绍消息队列中最常用的一种场景，即点对点模式。基本概念如下： 每个消息只能被一个消费者（Consumer）进行消费。一旦消息被消费后，就不再在消息队列中存在。 发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列。 接收者在成功接收消息之后需向队列应答成功。 代码实现（为简化代码，部分代码沿用上面所述）： 启动文件（Application.java） @SpringBootApplication@EnableJmspublic class Application { ... /** * JMS 队列的模板类 * connectionFactory() 为 ActiveMQ 连接工厂 */ @Bean public JmsTemplate jmsQueueTemplate(){ return new JmsTemplate(connectionFactory()); } public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 注解@EnableJms设置在@Configuration类上，用来声明对 JMS 注解的支持。 消息生产者（PtpProducer.java） @Componentpublic class PtpProducer { @Autowired private JmsTemplate jmsQueueTemplate; /** * 发送消息自动转换成原始消息 */ public void convertAndSend(){ jmsQueueTemplate.convertAndSend(&quot;ptp&quot;, &quot;我是自动转换的消息&quot;); } } 生产者调用类（PtpController.java） @RestController@RequestMapping(value = “/ptp”)public class PtpController { @Autowired private PtpProducer ptpProducer; @RequestMapping(value = &quot;/convertAndSend&quot;) public Object convertAndSend(){ ptpProducer.convertAndSend(); return &quot;success&quot;; } } 消息监听容器工厂 @SpringBootApplication@EnableJmspublic class Application { ... /** * JMS 队列的监听容器工厂 */ @Bean(name = &quot;jmsQueueListenerCF&quot;) public DefaultJmsListenerContainerFactory jmsQueueListenerContainerFactory() { DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory(); factory.setConnectionFactory(connectionFactory()); //设置连接数 factory.setConcurrency(&quot;3-10&quot;); //重连间隔时间 factory.setRecoveryInterval(1000L); return factory; } … } 消息监听器 @Componentpublic class PtpListener1 { /** * 消息队列监听器 * destination 队列地址 * containerFactory 监听器容器工厂, 若存在2个以上的监听容器工厂,需进行指定 */ @JmsListener(destination = &quot;ptp&quot;, containerFactory = &quot;jmsQueueListenerCF&quot;) public void receive(String msg){ System.out.println(&quot;点对点模式1: &quot; + msg); } } 演示启动项目启动后，通过 REST 接口的方式来调用消息生产者发送消息，请求如下： curl -XGET 127.0.0.1:8080/ptp/convertAndSend 消费者控制台信息： ActiveMQ 控制台信息： 列表说明： Name：队列名称。 Number Of Pending Messages：等待消费的消息个数。 Number Of Consumers：当前连接的消费者数目，因为我们采用的是连接池的方式连接，初始连接数为 3，所以显示数字为 3。 Messages Enqueued：进入队列的消息总个数，包括出队列的和待消费的，这个数量只增不减。 Messages Dequeued：出了队列的消息，可以理解为是已经消费的消息数量。 点对点模式（多消费者）基于上面一个消费者消费的模式，因为生产者可能会有很多，同时像某个队列发送消息，这时一个消费者可能会成为瓶颈。所以需要多个消费者来分摊消费压力（消费线程池能解决一定压力，但毕竟在单机上，做不到分布式分布，所以多消费者是有必要的），也就产生了下面的场景。 代码实现 添加新的监听器 @Componentpublic class PtpListener2 { @JmsListener(destination = Constant.QUEUE_NAME, containerFactory = &quot;jmsQueueListenerCF&quot;) public void receive(String msg){ System.out.println(&quot;点对点模式2: &quot; + msg); } } 演示这里我们发起 10 次请求，来观察消费者的消费情况： 这里因为监听容器设置了线程池的缘故，在实际消费过程中，监听器消费的顺序会有所差异。 发布订阅模式除了点对点模式，发布订阅模式也是消息队列中常见的一种使用。试想一下，有一个即时聊天群，你在群里发送一条消息。所有在这个群里的人（即订阅了该群的人），都会收到你发送的信息。 基本概念： 每个消息可以有多个消费者。 发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。 为了消费消息，订阅者必须保持运行的状态。 代码实现 修改 JmsTemplate 模板类，使其支持发布订阅功能 @SpringBootApplication@EnableJmspublic class Application { ... @Bean public JmsTemplate jmsTopicTemplate(){ JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory()); jmsTemplate.setPubSubDomain(true); return jmsTemplate; } ... } 消息生产者（PubSubProducer.java） @Componentpublic class PtpProducer { @Autowired private JmsTemplate jmsTopicTemplate; public void convertAndSend(){ jmsTopicTemplate.convertAndSend(&quot;topic&quot;, &quot;我是自动转换的消息&quot;); } } 生产者调用类（PubSubController.java） @RestController@RequestMapping(value = “/pubsub”)public class PtpController { @Autowired private PubSubProducer pubSubProducer; @RequestMapping(value = &quot;/convertAndSend&quot;) public String convertAndSend(){ pubSubProducer.convertAndSend(); return &quot;success&quot;; } } 修改 DefaultJmsListenerContainerFactory 类，使其支持发布订阅功能 @SpringBootApplication@EnableJmspublic class Application { ... /** * JMS 队列的监听容器工厂 */ @Bean(name = &quot;jmsTopicListenerCF&quot;) public DefaultJmsListenerContainerFactory jmsTopicListenerContainerFactory() { DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory(); factory.setConnectionFactory(connectionFactory()); factory.setConcurrency(&quot;1&quot;); factory.setPubSubDomain(true); return factory; } … } 消息监听器（这里设置2个订阅者） @Componentpublic class PubSubListener1 { @JmsListener(destination = &quot;topic&quot;, containerFactory = &quot;jmsTopicListenerCF&quot;) public void receive(String msg){ System.out.println(&quot;订阅者1 - &quot; + msg); } } @Componentpublic class PubSubListener2 { @JmsListener(destination = &quot;topic&quot;, containerFactory = &quot;jmsTopicListenerCF&quot;) public void receive(String msg){ System.out.println(&quot;订阅者2 - &quot; + msg); } } 演示curl -XGET 127.0.0.1:8080/pubSub/convertAndSend 消费者控制台信息： ActiveMQ 控制台信息： 总结这里只是对 SpringBoot 与 JMS 集成的简单说明与使用，详细的介绍可以查看 Spring 的官方文档，我这里也有幸参与 并发编程网 发起的 Spring 5 的翻译工作，我主要翻译了 Spring 5 的 JMS 章节，其内容对于上述 JMS 的基本概念，都有详细的展开说明，有兴趣的可以看一下，当然翻译水平有限，英文好的建议看原文。 Spring BootJava后端","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"ActiveMQ","slug":"ActiveMQ","permalink":"https://hero.triple.net.cn/tags/ActiveMQ/"},{"name":"sprintboot","slug":"sprintboot","permalink":"https://hero.triple.net.cn/tags/sprintboot/"}]},{"title":"Sentry异常捕获","slug":"sentry-e5-bc-82-e5-b8-b8-e6-8d-95-e8-8e-b7","date":"2017-08-07T04:03:14.000Z","updated":"2018-12-12T09:27:29.819Z","comments":true,"path":"2017/08/07/sentry-e5-bc-82-e5-b8-b8-e6-8d-95-e8-8e-b7/","link":"","permalink":"https://hero.triple.net.cn/2017/08/07/sentry-e5-bc-82-e5-b8-b8-e6-8d-95-e8-8e-b7/","excerpt":"","text":"简单点， Sentry注册： https://sentry.io 应用（PHP）：https://sentry.io/for/php/ 安装 使用 composer 的方式 在项目根目录： php composer.phar require “sentry/sentry” 完成之后会生成一个 vendor 目录，然后在你想调用的PHP文件中引用一下就可以了 require __DIR__ . ‘/vendor/autoload.php’; 自动异常捕获示例： 这里使用 Redis 尝试连接一个不存在的host，以模拟真实环境中Redis挂掉的情况 // 实例化（把URL改成你自己项目的） $client = new Raven_Client(&apos;https://****:****@sentry.io/123456&apos;); try { // ---------- 自动异常捕获 ------------ $error_handler = new Raven_ErrorHandler($client); $error_handler-&gt;registerErrorHandler(true, E_ALL); // ---------- ENDS 自动异常捕获 ------------ $redis = new Redis(); $redis-&gt;connect(&quot;123.123.123.123&quot;, 6379, 1); $redis-&gt;set(&quot;Date&quot;, time()); } catch (Exception $exception) { $error_handler-&gt;registerExceptionHandler(); $error_handler-&gt;registerShutdownFunction(); } 手动捕获示例 //---------- 手动异常捕获 ------------ // Basic Reporting $ex = new Exception(&quot;用户自定义异常，&quot; . date(DATE_RFC850)); $client-&gt;captureException($ex); // Provide some additional data with an exception $client-&gt;captureException($ex, array( &apos;extra&apos; =&gt; array( &apos;php_version&apos; =&gt; phpversion(), &apos;message&apos; =&gt; &quot;This will show users exception&quot;, &quot;something_els&quot; =&gt; &apos;Hello, &apos; . print_r($_SERVER, true), ), )); // ---------- ENDS 手动异常捕获 ------------ Sentry 是一个开源的bug跟踪程序，可以在程序运行时捕捉异常，并通过邮件发送到相关人。 配置很简单，登陆到官网新建一个项目，选择好对应的框架或者语言，然后就会得到一个地址，用于在发生bug的时候向此地址报告错误 文档写的很详细，跟着做就好了","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"异常","slug":"异常","permalink":"https://hero.triple.net.cn/tags/异常/"},{"name":"Sentry","slug":"Sentry","permalink":"https://hero.triple.net.cn/tags/Sentry/"}]},{"title":"A FreeBSD 11 Desktop How-to","slug":"a-freebsd-11-desktop-how-to","date":"2017-08-06T21:36:04.000Z","updated":"2018-12-12T08:58:16.417Z","comments":true,"path":"2017/08/07/a-freebsd-11-desktop-how-to/","link":"","permalink":"https://hero.triple.net.cn/2017/08/07/a-freebsd-11-desktop-how-to/","excerpt":"","text":"A FreeBSD 11 Desktop How-toFreeBSD is a fast, secure, modern Unix-like operating system with a fantastic community, great documentation, and powerful technologies like ZFS and LLVM. It’s my operating system of choice for everything from my i7-2600k desktop to my home router to my ARM plug computer jukebox. Though famed for its uptime in the datacenter the same OS is just as suited to desktop or laptop computing with a little work. Why use FreeBSD? Maybe I’m just getting old, but it’s nice to use an operating system that didn’t spawn a billion-dollar anti-malware industry through frequent security failings, where you can choose the interface you like and reasonably expect it to stay that way instead of being forced into the design fad du jour, where you don’t have to argue about the init system being replaced two times in the same decade, and whose key organizations don’t collectively kowtow to Microsoft when convenient. I’ve used many operating systems and have yet to find one more consistent and cohesive yet as well-supported as the BSD family, and FreeBSD is the one with the biggest community and most available drivers for things like graphics cards. “FreeBSD on the server, Linux on the desktop” is an oft-seen sentiment among some FreeBSD enthusiasts, and it’s sort of understandable considering the conservative out-of-the-box FreeBSD installation. Despite that, FreeBSD is just a few settings away from being an easy, powerful Desktop OS rivaling Linux, complete with the same software ecosystem available through the Ports collection. Unlike Linux where everything including the kernel is a package, FreeBSD is developed in a single source tree and released on a set schedule – twice a year – as a complete operating system on top of which you can install third-party software. The Release Engineering page tracks the release history and schedule. Two major branches see releases in parallel, and major branches tend to live for two years (four minor versions) after their x.0 release. FreeBSD 11.x is currently the newest release branch with 10.x in maintenance mode and major development happening on 12.x. This guide attempts to show users with various hardware configurations the best way to configure a usable modern workstation running FreeBSD based on my own experience with Emi, my FreeBSD workstation. There are projects such as TrueOS and GhostBSD that can give you a good out-of-the-box desktop FreeBSD experience, but I find them disconnected from the underlying operating systems because they dump you into KDE or XFCE and attempt to hide as much of FreeBSD as possible behind graphical configuration. That’s not a bad thing, and I’m glad those projects exist, but this guide gets there in the other direction. You will install FreeBSD, learn how it works, and configure it into a great desktop. Compare this guide to something like Linux From Scratch or a Gentoo installation and you’ll see what a breeze this really is. Let’s do it! New InstallationsThe Getting FreeBSD page has links to ISOs for the six tier 1 architectures. This guide focuses on amd64/i386 PCs though is broadly applicable to them all. The ISOs are available in bootonly, CD, DVD, and memstick. I usually grab the nearest &gt;1GB USB drive and dd the newest memstick image to it. The larger DVD images are available complete with Ports distribution files for those doing fully-offline installations. Boot the chosen installation media via whatever means your computer can (EFI boot menu, BIOS setting, fallback) and get ready to install. FreeBSD will boot to bsdinstall and offer to Install, load an interactive rescue shell, or just boot normally off the installation disk. Choose Install, choose the keyboard mapping appropriate for your computer, and enter a hostname for your machine. When asked to choose system components I recommend selecting all of them. doc is useful to have locally if your Internet connection isn’t working, and system src is needed for some Ports to build and install. DisksOn the next screen, Partitioning, select either the Auto (ZFS) option or the Auto (UFS) option. UFS is the traditional Unix file system and is usable on any machine. It is fragile in the case of power loss or crashes unless journaled. ZFS, on the other hand, is both a volume (pool) manager and a great filesystem. I strongly recommend ZFS for modern computers due to its resilience and rich feature set that makes it very practical for desktop use. It checksums your data constantly to ensure integrity and prevent silent corruption on-disk, and its copy-on-write model never overwrites blocks, eliminating the RAID-5 write hole. It supports snapshots, allowing you to snapshot a filesystem at an arbitrary point in time and roll back to it at will, like Apple’s Time Machine, and snapshots can be sent seamlessly across a network for incremental backups. It supports SSD cache devices to speed up reads and writes of pools backed by magnetic hard drives. It can deduplicate files, reducing the on-disk space for files that are significantly identical at the cost of lots of RAM. Achieving these features makes ZFS very memory-hungry. Plan to have 1GiB of physical memory for every 1TB of space in a zpool and much more if deduplication is used. ZFS can be tuned for tighter memory limitations, but very limited systems should use UFS instead. Most modern machines should not need to tune ZFS at all. It will use the memory available to it but also respond to memory pressure when other processes need RAM. Assuming you choose ZFS, set up your zpool. The pool can be a single disk (still called stripe but just striped with itself), a mirror, or any combination of disks in RAID-Z. Name the pool something. I usually name boot pools after the hostname of the machine and then data pools by function. The other ZFS options are dictated by your hardware. If you have an Advanced Format hard disk (any made in the last few years) or an SSD you should force 4k sectors. If your computer has a recent Intel or AMD CPU supporting AES instruction set there is very little downside to encrypting your pool. I recommend it for any pool that doesn’t need to automatically mount at boot, i.e. I use encryption on my workstation but not on my FreeBSD router. Encrypting multiple physical devices with the same key will only require the passphrase once. You will be prompted for the passphrase while the kernel has loaded and is detecting hardware. On my system the passphrase prompt usually gets buried under my USB devices as the kernel enumerates them, so if you find yourself stuck there at boot hit a few keys and Enter to make the passphrase prompt reappear. Use GUID Partition Table (GPT) if your computer uses EFI. PCs with BIOS most likely need to use a legacy MBR. GPT is a requirement to use disks over 2TB in size because MBR can address a maximum of 232 x 512 bytes, just larger than 2TB. The amount of swap space you use if any is dictated by the amount of memory in your computer and the loads you plan to place on it. Conventional wisdom says to use a swap size double the amount of physical memory in the machine, but I find that to apply less and less when you get up into double-digit gigabytes of RAM. My computer has 16GiB or physical memory and 8GiB of swap space defined. On some systems I don’t touch swap at all, but I recommend having at least some. You can enlarge it later. FinishOnce your disks are set up the installer will copy files and prompt you for the base configuration of things such root password, time zone, and network options. It will ask you to add at least one non-root user. When creating your personal user account be sure to invite it to the wheel and operator user groups. wheel membership is necessary to gain root privileges for administration tasks, and you will assign operator device permissions later in this guide. When prompted you can remove the install disk and reboot into your new system! UpgradingAre you running a previous version already? The upgrade process is covered in full in Chapter 24 of the Handbook, but assuming you are running the stock GENERIC kernel the process is very simple using freebsd-update. Check my upgrade notes section for specific version instructions. First, fetch the new system using freebsd-update install by specifying the -r argument. Without -r it will just fetch security and errata updates for your current minor version. You can upgrade to a new minor version in your current major or to a new major version entirely. If you’re upgrading to a new major version, go to the .0 release first. Don’t upgrade from, say, 8.4-RELEASE to 9.3-RELEASE, but to 9.0-RELEASE first and then to 9.3. freebsd-update upgrade -r 11.0-RELEASE upgrade is interactive and will ask you to confirm the system components it thinks you have installed. Once it fetches the updated system files you can begin the installation process. freebsd-update install This will install the new kernel but not any non-kernel OS components like userland executables. Reboot via shutdown -r now, reboot, or a swift kick to the power switch. When the system comes up, log in as root and install the new userland by re-running the install command. freebsd-update install At this point your OS itself is ready to go but your packages need to be updated to run on the new major version via your preferred method, such as pkg-static upgrade -f for binary packages orportupgrade`, orportmaster -af` if you prefer to build ports. It is alternatively possible to maintain ABI compatibility with an older major version of FreeBSD by installing a compatibility library package such as misc/compat9x, but you shouldn’t unless you need it for a particular binary that isn’t available as source to build for the new version. Once that’s done you can run freebsd-update install one last time to chean out the shared libraries from the previous version. Reboot once more to your final updated system. First BootLog in as root with the password you configured in the installer. Congratulations! You are now a FreeBSD user! The FreeBSD base system is a fully-featured operating system but as you can see does not contain a graphical environment or any third-party software like your typical Linux distribution. Before installing any of that you should configure your new system to be a better desktop. FreeBSD’s roots are in academia and the datacenter, so its default configuration is very conservative. The desktop or laptop computer you are most likely using is vastly more powerful than some of the configurations that will run FreeBSD, so there is room to grow without being unreasonable. You will need a text editor to edit configuration files. The base system ships with vi (not vim!) but for most users I would recommend ee. It’s part of the base system and is a simple but fully-featured editor like nano from the Linux world. If you aren’t happy with ee there are plenty of great editors you can install from Ports, like editors/vim, but let’s continue. If you aren’t entirely comfortable with editing config files you can re-access the graphical configuration screen from the installer by running bsdconfig as root, but I don’t think you’d be reading this page if that’s the case :) UTF-8The LANG=xx_YY.ZZZZ environment variable sets the system locale to language code xx, country code YY, and character encoding ZZZZ. Language and country code affect default application language, number formatting, date and time formatting, string collation, currency settings, and more. By enabling a locale using UTF-8 character encoding, the system can understand and display each of the 1112064 characters in the Unicode character set, instead of just US ASCII as is default with LANG=C. Check locale -a | grep UTF-8 for a list of every available UTF-8 locale on your computer. As an American anglophone, I use en_US.UTF-8. Edit the login class capability database in /etc/login.conf to add a default character set and locale. Login shells will inherit the environment variables defined here in the default class or in a narrower class if it matches one. /etc/login.conf --- login.conf.default 2012-01-02 17:08:05.804291477 -0500 +++ login.conf 2012-01-02 17:08:16.996213774 -0500 @@ -44,7 +44,9 @@ :pseudoterminals=unlimited: :priority=0: :ignoretime@: - :umask=022: + :umask=022: + :charset=UTF-8: + :lang=en_US.UTF-8: Rebuild the login database with cap_mkdb /etc/login.conf after making changes. You may have to specify the new locale elsewhere (like /etc/profile) for non login shell uses such as GDM and other login managers. /etc/profile LANG=en_US.UTF-8; export LANG CHARSET=UTF-8; export CHARSET You can read more in the Using Localization chapter of the Handbook. Check your work by running locale on your next login. locale LANG=en_US.UTF-8 LC_CTYPE=&quot;en_US.UTF-8&quot; LC_COLLATE=&quot;en_US.UTF-8&quot; LC_TIME=&quot;en_US.UTF-8&quot; LC_NUMERIC=&quot;en_US.UTF-8&quot; LC_MONETARY=&quot;en_US.UTF-8&quot; LC_MESSAGES=&quot;en_US.UTF-8&quot; LC_ALL=en_US.UTF-8 Tuning and driversChange a few sysctl variables to enhance the experience of FreeBSD on the desktop, including expanding the amount of shared memory, tuning the process scheduler for desktop use, and increasing the limit of simultaneously-open files to something sensible. /etc/sysctl.conf # Enhance shared memory X11 interface kern.ipc.shmmax=67108864 kern.ipc.shmall=32768 # Enhance desktop responsiveness under high CPU use (200/224) kern.sched.preempt_thresh=224 # Bump up maximum number of open files kern.maxfiles=200000 # Disable PC Speaker hw.syscons.bell=0 # Shared memory for Chromium kern.ipc.shm_allow_removed=1 Some knobs can only be set at boot by the loader by setting them in /boot/loader.conf. This is also where we define kernel modules to load at boot. /boot/loader.conf # Devil worship in loader logo loader_logo=&quot;beastie&quot; # Boot-time kernel tuning kern.ipc.shmseg=1024 kern.ipc.shmmni=1024 kern.maxproc=100000 # Load MMC/SD card-reader support mmc_load=&quot;YES&quot; mmcsd_load=&quot;YES&quot; sdhci_load=&quot;YES&quot; # Access ATAPI devices through the CAM subsystem atapicam_load=&quot;YES&quot; # Filesystems in Userspace fuse_load=&quot;YES&quot; # Intel Core thermal sensors coretemp_load=&quot;YES&quot; # AMD K8, K10, K11 thermal sensors amdtemp_load=&quot;YES&quot; # In-memory filesystems tmpfs_load=&quot;YES&quot; # Asynchronous I/O aio_load=&quot;YES&quot; # Handle Unicode on removable media libiconv_load=&quot;YES&quot; libmchain_load=&quot;YES&quot; cd9660_iconv_load=&quot;YES&quot; msdosfs_iconv_load=&quot;YES&quot; Finally, enable everything else. /etc/rc.conf moused_enable=&quot;YES&quot; # powerd: hiadaptive speed while on AC power, adaptive while on battery power powerd_enable=&quot;YES&quot; powerd_flags=&quot;-a hiadaptive -b adaptive&quot; # Enable BlueTooth hcsecd_enable=&quot;YES&quot; sdpd_enable=&quot;YES&quot; # Synchronize system time ntpd_enable=&quot;YES&quot; # Let ntpd make time jumps larger than 1000sec ntpd_flags=&quot;-g&quot; Enable remote access via SSH if you plan to use it. Otherwise, there’s no need to expose your system. /etc/rc.conf # Remote logins sshd_enable=&quot;YES&quot; MountsThe procfs and fdescfs virtual filesystems are not a default part of BSD but are frequently required for compatibility with programs and environments written with Linux in mind, such as GNOME/MATE and KDE. The FreeBSD equivalent is sysctl, but you can mount /proc too if you plan to use software requiring it. Some special filesystems like fdescfs must be mounted late on ZFS-rooted systems since the location of their mountpoint won’t exist until late in the boot process. /etc/fstab proc /proc procfs rw 0 0 fdesc /dev/fd fdescfs rw,auto,late 0 0 Toggle the sysctl that lets users mount disks. /etc/sysctl.conf # Allow users to mount disks vfs.usermount=1 If you neglected to add your personal user account to the wheel and operator groups at creation, now is a good time to do so. wheel membership lets you use su to become root, and operator membership is required for device permissions in this configuration. In this example my user is okeeblow. Substitute it for yours. pw usermod okeeblow -G wheel pw usermod okeeblow -G operator Device PermissionsRelax default permissions on the device filesystem to allow normal users access to a variety of disks and input/output devices. Permissions for devices existing at boot time are set in devfs.conf. Each line defines a full device path and octal permission value. /etc/devfs.conf # Allow all users to access optical media perm /dev/acd0 0666 perm /dev/acd1 0666 perm /dev/cd0 0666 perm /dev/cd1 0666 # Allow all USB Devices to be mounted perm /dev/da0 0666 perm /dev/da1 0666 perm /dev/da2 0666 perm /dev/da3 0666 perm /dev/da4 0666 perm /dev/da5 0666 # Misc other devices perm /dev/pass0 0666 perm /dev/xpt0 0666 perm /dev/uscanner0 0666 perm /dev/video0 0666 perm /dev/tuner0 0666 perm /dev/dvb/adapter0/demux0 0666 perm /dev/dvb/adapter0/dvr 0666 perm /dev/dvb/adapter0/frontend0 0666 For devices that may be connected post-boot, we add an entry to a devfs.rules ruleset. Rulesets must have a unique name and number, and their rules are composed of a path or quoted path glob and octal permission value. /etc/devfs.rules [devfsrules_common=7] add path &apos;ad[0-9]*&apos; mode 666 add path &apos;ada[0-9]*&apos; mode 666 add path &apos;da[0-9]*&apos; mode 666 add path &apos;acd[0-9]*&apos; mode 666 add path &apos;cd[0-9]*&apos; mode 666 add path &apos;mmcsd[0-9]*&apos; mode 666 add path &apos;pass[0-9]*&apos; mode 666 add path &apos;xpt[0-9]*&apos; mode 666 add path &apos;ugen[0-9]*&apos; mode 666 add path &apos;usbctl&apos; mode 666 add path &apos;usb/*&apos; mode 666 add path &apos;lpt[0-9]*&apos; mode 666 add path &apos;ulpt[0-9]*&apos; mode 666 add path &apos;unlpt[0-9]*&apos; mode 666 add path &apos;fd[0-9]*&apos; mode 666 add path &apos;uscan[0-9]*&apos; mode 666 add path &apos;video[0-9]*&apos; mode 666 add path &apos;tuner[0-9]*&apos; mode 666 add path &apos;dvb/*&apos; mode 666 add path &apos;cx88*&apos; mode 0660 add path &apos;cx23885*&apos; mode 0660 # CX23885-family stream configuration device add path &apos;iicdev*&apos; mode 0660 add path &apos;uvisor[0-9]*&apos; mode 0660 Enable our new ruleset. /etc/rc.conf devfs_system_ruleset=&quot;devfsrules_common&quot; SoundEnable sound support at boot in loader.conf, and load it immediately with kldload snd_driver. echo &apos;snd_driver_load=&quot;YES&quot;&apos; &gt;&gt; /boot/loader.conf Then, cat /dev/sndstat to see your available devices. cat /dev/sndstat FreeBSD Audio Driver (newpcm: 64bit 2009061500/amd64) Installed devices: pcm0: &lt;HDA NVidia (Unknown) PCM #0 DisplayPort&gt; (play) pcm1: &lt;HDA NVidia (Unknown) PCM #0 DisplayPort&gt; (play) pcm2: &lt;HDA NVidia (Unknown) PCM #0 DisplayPort&gt; (play) pcm3: &lt;HDA NVidia (Unknown) PCM #0 DisplayPort&gt; (play) pcm4: &lt;HDA Realtek ALC892 PCM #0 Analog&gt; (play/rec) pcm5: &lt;HDA Realtek ALC892 PCM #1 Analog&gt; (play/rec) pcm6: &lt;HDA Realtek ALC892 PCM #2 Digital&gt; (play) pcm7: &lt;HDA Realtek ALC892 PCM #3 Digital&gt; (play) pcm8: &lt;USB audio&gt; (play) default pcm9: &lt;USB audio&gt; (rec) The hw.snd.default_unit sysctl variable controls the default audio output. I want to use the S/PDIF output of my onboard Realtek audio, pcm6, so I set hw.snd.default_unit to 6. Enabling the hw.snd.default_auto boolean will automatically assign hw.snd.default_unit to newly-attached devices. /etc/sysctl.conf # S/PDIF out on my MSI board hw.snd.default_unit=6 # Don&apos;t automatically use new sound devices hw.snd.default_auto=0 NetworkingIf you didn’t enable networking during the install process now is a good time to do so. Here as an example is my computer, emi, a desktop with a wired network. I have a Realtek interface, re0. The name of your interface may vary based on the driver it uses. Most drivers are built into the GENERIC kernel, so your interface should be visible by running ifconfig. Common drivers you may see include if_em for Intel PRO interfaces, if_re for Realtek interfaces, and if_en for Midway interfaces. Read more about network configuration in the Handbook to learn about other possible configurations. WiredYou can use DHCP and SLAAC auto-discovery on most home networks: /etc/rc.conf hostname=&quot;emi.aloe.cooltrainer.org&quot; # Enable DHCP for re0 and don&apos;t let dhclient block background_dhclient=&quot;YES&quot; ifconfig_re0=&quot;DHCP&quot; ifconfig_re0_ipv6=&quot;inet6 accept_rtadv&quot; You can bring up the interface and get a DHCP address immediately by issuing ifconfig re0 up and dhclient re0, again substituting the name of your own interface. Alternatively, you can supply static network addresses for your computer and default router: /etc/rc.conf hostname=&quot;emi.aloe.cooltrainer.org&quot; ifconfig_re0=&quot;inet 172.16.0.40 netmask 255.240.0.0 broadcast 172.31.255.255&quot; defaultrouter=&quot;172.16.0.1&quot; ifconfig_re0_ipv6=&quot;inet6 2001:370:10f5:806::40 prefixlen 64&quot; ipv6_defaultrouter=&quot;2001:370:10f5:806::1&quot; WirelessFor WiFi configuration, see the wireless networking section of the Handbook. I sometimes tether my desktop to my Android phone using a run B/G USB interface. It’s as simple as defining a new virtual wlan interface on run0, configuring wpa_supplicant for the WPA pre-shared key, and specifying the SSID and encryption standard (WPA). /etc/rc.conf wlans_run0=&quot;wlan0&quot; ifconfig_wlan0=&quot;ssid Doubleshot WPA DHCP&quot; /etc/wpa_supplicant.conf network={ ssid=&quot;Doubleshot&quot; psk=&quot;pantsupantsu&quot; } IPv6My configuration examples cover both IPv4 and IPv6 because I have a dual-stacked network. Depending on your network you may prefer to enable and prefer IPv6 like me, enable it but prefer IPv4, or not enable it at all. This can be done in rc.conf: /etc/rc.conf ipv6_activate_all_interfaces=&quot;YES&quot; ip6addrctl_policy=&quot;ipv6_prefer&quot; /etc/sysctl.conf # Accept IPv6 router advertisements net.inet6.ip6.accept_rtadv=1 FirewallYou should run a firewall. Windows, OS X, and many Linux distributions ship with a default firewall ruleset. FreeBSD does not, because there is no one-size-fits-all firewall configuration, but it does include one of the best software firewalls in the world, PF, courtesy of the OpenBSD project. Configuring a firewall can be a very complex topic. There are entire books on the matter. Shown here is the ruleset from my computer. It has rules for a single network interface defined at the top of the file in the ext_if macro. Change it to the name of your computer’s interface as seen in ifconfig. The macros on the next few lines define the TCP and UDP ports on which this ruleset will allow incoming connections. My computer runs an SSH server on the default port, runs www/subsonic on port 443 (HTTPS), and has control ports for net/mosh in the 60000 range. You can open ports for additional services by defining them in those macros. The named services like ssh are defined in /etc/services. /etc/pf.conf # The name of our network interface as seen in `ifconfig` ext_if=&quot;re0&quot; # Macros to define the set of TCP and UDP ports to open. # Add additional ports or ranges separated by commas. # UDP 60000-60010 is mosh control http://mosh.mit.edu/ tcp_services = &quot;{ssh, https}&quot; udp_services = &quot;{60000:60010}&quot; # If you block all ICMP requests you will break things like path MTU # discovery. These macros define allowed ICMP types. The additional # ICMPv6 types are for neighbor discovery (RFC 4861) icmp_types = &quot;{echoreq, unreach}&quot; icmp6_types=&quot;{echoreq, unreach, 133, 134, 135, 136, 137}&quot; # Modulate the initial sequence number of TCP packets. # Broken operating systems sometimes don&apos;t randomize this number, # making it guessable. tcp_state=&quot;flags S/SA keep state&quot; udp_state=&quot;keep state&quot; # Don&apos;t send rejections. Just drop. set block-policy drop # Exempt the loopback interface to prevent services utilizing the # local loop from being blocked accidentally. set skip on lo0 # all incoming traffic on external interface is normalized and fragmented # packets are reassembled. scrub in on $ext_if all fragment reassemble # set a default deny policy. block in log all # This is a desktop so be permissive in allowing outgoing connections. pass out quick modulate state # Enable antispoofing on the external interface antispoof for $ext_if inet antispoof for $ext_if inet6 # block packets that fail a reverse path check. we look up the routing # table, check to make sure that the outbound is the same as the source # it came in on. if not, it is probably source address spoofed. block in from urpf-failed to any # drop broadcast requests quietly. block in quick on $ext_if from any to 255.255.255.255 # Allow the services defined in the macros at the top of the file pass in on $ext_if inet proto tcp from any to any port $tcp_services $tcp_state pass in on $ext_if inet6 proto tcp from any to any port $tcp_services $tcp_state pass in on $ext_if inet proto udp from any to any port $udp_services $udp_state pass in on $ext_if inet6 proto udp from any to any port $udp_services $udp_state # Allow ICMP pass inet proto icmp all icmp-type $icmp_types keep state pass inet6 proto icmp6 all icmp6-type $icmp6_types keep state Enable the firewall in rc.conf and start it now. echo &apos;pf_enable=&quot;YES&quot;&apos; &gt;&gt; /etc/rc.conf service pf start After making changes to your ruleset you can check them for validity and load the new rules with pfctl. It will abort if your ruleset contains an error unlike service pf restart which will stop, fail to start due to the error, and leave you locked out of SSH. Ask me how I know this will happen. pfctl -f /etc/pf.conf Installing SoftwareFreeBSD is historically famous for its Ports Collection, a directory skeleton of Makefiles and patches describing how to programmatically build packages of third-party software for your computer. Each port contains the metadata for that piece of software including the filename of the source archive, sha256 hash of the files, what other software dependencies it requires, what compile-time options are available, what files it installs, and any patches necessary to work around non-portable code or fix issues that can’t be upstreamed to the projects themselves. Every port has a maintainer whose job it is to keep the port up to date and respond to issues if they arise with newer versions of the operating system. For example, check out the ports I maintain! When you make a port in the Ports Collection it downloads the upstream source archive, patches it, configures it, builds a customized binary package, and uses FreeBSD’s underlying binary package manager to install it. Third-party software installed through the package manager ends up in /usr/local where it mirrors the hierarchy of /usr. It might seem confusing to have them in two places, but it gives a fairly clean separation of the base system from the packages. For example, /usr/local/bin is where you will find firefox after installing www/firefox, but /usr/bin is where you will find ee or sed. As you have experienced, configuration for the operating system is done in /etc. Configuration files for your ports will usually be in /usr/local/etc. Check the hier manual for the full layout. As of FreeBSD 10 there is a new binary package manager, known as pkgng or just pkg. It replaces the old suite of pkg_ tools such as pkg_add and pkg_delete and contains many advanced features that have been missing from FreeBSD for years. Compared to the old package manager, pkgng supports safe upgrades (meaning it saves a copy of the previous-version package to roll back in case of failure), multiple repositories, package staging before install, a more modern binary package format, a more robust sqlite-based package registration database, and most importantly remote binary package upgrades. Thanks to pkgng it is now possible to add multiple remote binary package repositories and get updates from them without relying on building Ports at all. The FreeBSD project provide binary packages built from the Ports tree using the default options. For example, installing a binary package of Firefox with pkg install firefox or pkg install www/firefox is equivalent to doing portsnap fetch extract &amp;&amp; cd /usr/local/www/firefox &amp;&amp; make install. I will stick to the convention of pkg install on this page but the names will be identical if you prefer to build customized packages from Ports. It is possible to mix and match binary packages with your own custom packages built from Ports using pkg’s lock and unlock, but that gets more advanced and more annoying than is appropriate for this guide. I build my ports on one of my computers using poudriere then use that computer as a binary package repository for the other FreeBSD computers on my network. A new user with just one computer should stick to pkg install from the default package server until they are more familiar with the OS. In the past I recommended building Ports over the default binary package server due to some strange default port options and the lack of package coverage for certain software like KDE. These days however I recommend using binary packages by default unless you find a particular port option you absolutely must have. Even then, consider using poudriere to create a local package server instead of building and installing ports the traditional way. It’s more work initially to set up but saves you from the hassle of updating shared libraries while trying to use your computer. The old fashioned way will replace libfoo.so.4 with libfoo.so.5 and only then start rebuilding ports that depend on it. Meanwhile your currently-installed software will be unusable due to the missing libfoo.so.4. Packages avoid this issue and alert you upfront to any build failures. Probably 99% of users these days will be fine with the packages provided by the FreeBSD project. No matter the route you choose, you should begin by updating your pkg repository or your Ports tree. pkg update will fetch an updated index from every PACKAGESITE defined in that environment variable or in pkg.conf. For Ports, portsnap fetch extract will retrieve a new full ports tree. You should read pkg for the list of commands supported by pkg and read ports for the list of available make targets in Ports, but in general you will use pkg install &lt;portname&gt; (or pkg install &lt;category&gt;/&lt;portname&gt;) or cd /usr/ports/&lt;category&gt;/&lt;portname&gt; &amp;&amp; make install to install software. If you choose to build your own packages from Ports it will be because you want to customize options, so use make config-recursive in any port’s directory to set these port options in advance so they don’t continually interrupt the build. Read over the options as they are presented, but generally don’t toggle an option if you don’t know what it does. The defaults are default for a reason! Once you’ve chosen all the options, run make config-recursive again, since it’s likely for a dependency enabled the first time to have options of its own. When no further port options are displayed run make install to compile and install your custom package. The first things I usually install on a new system are sysutils/tmux and shells/zsh because I prefer it to the venerable default tcsh. You might be more comfortable with shells/bash. Once installed, changing your user’s default shell is as simple as chsh -s /usr/local/bin/zsh. Build SettingsSome third-party software options can only be set at compile time. Here are a few you should consider for desktop use if you decide to build your own customized packages. The Qt toolkit has some options that can be set via any combination of the following knobs. If you change the QT4_OPTIONS after Qt is installed you will need to rebuild devel/qt4-corelib and x11-toolkits/qt4-gui. QGtkStyle is a selectable theme engine that lets Qt applications integrate more closely with GTK+ environments and can be enabled with the QGTKSTYLE Qt4 option. You should enable this option if you plan to use a GTK+-based desktop environment like MATE or XFCE. Once built you can select the GTK+ visual style in qt4-qtconfig. CUPS is the standard printing engine on Free Unix-like systems. Support for it in Qt can be enabled with the CUPS Qt4 option. Network Audio System is a network transparent client/server audio transport system and can be enabled in Qt applications by setting the NAS Qt4 option. echo &quot;QT4_OPTIONS= CUPS QGTKSTYLE NAS&quot; &gt;&gt; /etc/make.conf Staying Up To DateBefore updating your Ports tree or pkg catalogue on an already-installed computer I suggest checking out UPDATING. This file – also found at /usr/ports/UPDATING if you have an extracted Ports tree – tracks breaking changes in packages and the steps necessary to to fix them. It will tell you when configuration file syntax has changed, how to fix dependencies when ports split or merge, when default versions of packages change, and more. You can update your already-extracted Ports tree to the newest revision with portsnap fetch update. There are two common tools for programmatically upgrading your ports, ports-mgmt/portupgrade and ports-mgmt/portmaster. I prefer portupgrade because portmaster stubbornly aborts the entire upgrade on any error, but you might like it. The common portmaster usage is portmaster -a to upgrade installed ports. I usually update with portupgrade -rac, with -r`-ato recursively update all installed ports and-cto preemptively show new port options so they won’t interrupt the build. If you are using binary packages you can update the package repository catalog withpkg updateand upgrade your installed packages withpkg upgrade`. The Handbook has a more detailed chapter on using Ports that includes upgrading and other tasks. Going GraphicalI’m sure you’re eager to get out of the text-only console. To do so you need to install the X.org distribution of the X Window System from x11/xorg with pkg install xorg. X.org by default uses FreeBSD’s devd for hardware detection and D-Bus for interprocess communication. HAL used to be the default hardware detection mechanism but is in the process of deprecation, so you may not need it unless you plan to use a desktop environment that still depends on it. Check the dependencies for sysutils/hal for a list of software still requiring it. /etc/rc.conf hald_enable=&quot;YES&quot; dbus_enable=&quot;YES&quot; X.org on its own is just the display server. It needs stuff to display. You can install applications, but you also need a window manager to handle displaying and interacting with those applications in the way you’d expect from any modern OS. By default X comes with the Tab Window Manager which is probably not software you would enjoy using in the 21st century. Install fontsX.org doesn’t include many attractive typefaces by default. Luckily, there are plenty available in Ports. Here are a few I use, including many from non-Roman languages for better Unicode coverage. On a new system I usually install something like: pkg install chinese/arphicttf chinese/font-std hebrew/culmus hebrew/elmar-fonts japanese/font-ipa japanese/font-ipa-uigothic japanese/font-ipaex japanese/font-kochi japanese/font-migmix japanese/font-migu japanese/font-mona-ipa japanese/font-motoya-al japanese/font-mplus-ipa japanese/font-sazanami japanese/font-shinonome japanese/font-takao japanese/font-ume japanese/font-vlgothic x11-fonts/hanazono-fonts-ttf japanese/font-mikachan korean/aleefonts-ttf korean/nanumfonts-ttf korean/unfonts-core x11-fonts/anonymous-pro x11-fonts/artwiz-aleczapka x11-fonts/dejavu x11-fonts/inconsolata-ttf x11-fonts/terminus-font x11-fonts/cantarell-fonts x11-fonts/droid-fonts-ttf x11-fonts/doulos x11-fonts/ubuntu-font x11-fonts/isabella x11-fonts/ecofont x11-fonts/junicode x11-fonts/khmeros x11-fonts/padauk x11-fonts/stix-fonts x11-fonts/charis x11-fonts/urwfonts-ttf russian/koi8r-ps x11-fonts/geminifonts x11-fonts/cyr-rfx x11-fonts/paratype x11-fonts/gentium-plus This includes: Arphicttf and font-std for Chinese coverage. Culmus and El-Mar for Hebrew language coverage. IPA, IPA UIGothic, IPAex, Kochi, MigMix, Migu, Mona, MOTOYA, M+, Sazanami, Shinonome, Takao, UmeFont, VLGothic, Hanazono Mincho, and Mika-chan for Japanese language coverage. A-Lee fonts, Nanum, and Un fonts for Korean language coverage. Anonymous Pro, artwiz-aleczapka, DejaVu, Inconsolata, and Terminus for terminals and editors. Cantarell, Droid, Doulos SIL, and Ubuntu for general Roman alphabet language coverage. Telugu for Telugu language. Isabella, Ecofont, and Junicode as novelty typefaces. KhmerOS for Khmer language coverage. Padauk for Myanmar language coverage. STIX and Computer Modern for technical and mathematic symbols. Charis, URW, KOI8, Geminifonts, CYR-RFX, and ParaType for Cyrillic and Eastern European language coverage. x11-fonts/webfonts is a special case. It includes the Microsoft Core Fonts for the Web such as Andale and Verdana. If you own a valid Microsoft Windows license you can get Tahoma as well by adding to /etc/make.conf and building a custom package. /etc/make.conf # Enable Tahoma in x11-fonts/webfonts if you have a Windows license # You show me yours and I&apos;ll show you mine ;) .if ${.CURDIR:M*/x11-fonts/webfonts} WITH_MSWINDOWS_LICENSE=yes .endif Now that those fonts are installed you need to tell Xorg about them using a FontPath in your /etc/X11/xorg.conf so they can be used. Unfortunately the font paths in Ports are not entirely standardized. Most of them end up in /usr/local/lib/X11/fonts, some end up in /usr/local/share/fonts/, and some in just /usr/local/share/. Here’s the relevant section from my xorg.conf. Yours should look similar. In the past it was necessary to tell X about your installed fonts using FontPath directives in xorg.conf, but these days most software will detect them automatically using fontconfig. You probably won’t run into a case where you will need to, but you can manually inform the X server of fonts like this: Section &quot;Files&quot; FontPath &quot;/usr/local/lib/X11/fonts/Liberation/&quot; FontPath &quot;/usr/local/lib/X11/fonts/anonymous-pro/&quot; FontPath &quot;/usr/local/share/font-mona-ipa/&quot; EndSection You can install other invididual fonts later for a single user by copying them inside the ~/.fonts directory under your home directory. You can re-scan the configured FontPaths and automatically-detected fonts by running fc-cache -vf and can list all installed fonts with fc-list to check that they all appear. For example, I have a fairly large local font repository in my ~/.fonts/ directory and have 2313 fonts available on my system as of this writing according to fc-list | wc -l. Starting XThe shell script .xinitrc in your home directory is the script that is executed for the lifecycle of your X session. .xinitrc is used to run startup applications and then run your window manager. When you finally end your X session your window manager will exit, .xinitrc will return, and the X server will stop. Here’s a simple example .xinitrc: ~/.xinitrc xscreensaver -no-splash &amp; xdg-user-dirs-update &amp; redshift &amp; compton &amp; exec wmaker In my example .xinitrc I use Window Maker and start x11/xscreensaver, xdg-user-dirs, accessibility/redshift, and the lightweight compositor x11-wm/compton. Starting your graphical session after logging in on a TTY (the command-line login prompt) is the traditional way and is as easy as running the command startx after loggin in as your user. Don’t run X as root. I prefer to use a graphical login manager. Some desktop environments include their own, like KDE’s KDM. On my computer I use the environment-agnostic x11/slim. A graphical login manager, besides being nicer to look at, also protects you from leaving a logged-in user session (or even worse, a root session!) on a TTY that could be used by someone walking up to your computer. You can configure the login manager to start at boot by adding either kdm_enable=&quot;YES&quot; or slim_enable=&quot;YES&quot; to /etc/rc.conf, but I would recommend not doing that until you are confident everything is set up correctly. It will be more difficult to fix a config file if your computer automatically starts to a broken X server. Test a plain old startx first, then test your login manager with service slim onestart or service kdm onestart before enabling them for every boot. You can configure the sessiondir directive in the SLiM configuration file to define the path to desktop entries installed by your ports, usually /usr/local/share/xsessions. Use exec $1 instead of a particular window manager’s executable name in your .xinitrc to run the command from SLiM passed in as an argument. /usr/local/etc/slim.conf sessiondir /usr/local/share/xsessions/ echo &apos;slim_enable=&quot;YES&quot;&apos; &gt;&gt; /etc/rc.conf service slim start ~/.xinitrc exec $1 You can switch session (window manager) with the _F1_ key on the SLiM login screen. The X session will use one of the virtual ttys. Once started, you can switch to a different virtual TTY with CTRL-ATL-F#. You can switch back to the graphical TTY with CTRL-ATL-F9. You may need to create a desktop entry for your window manager of choice if the port maintainer doesn’t ship one. Here’s an example, again for Window Maker. /usr/local/share/xsessions/wmaker.desktop [Desktop Entry] Encoding=UTF-8 Name=Window Maker Exec=/usr/local/bin/wmaker Comment=This session logs you into Window Maker Type=Application Automatic configurationVersions of X.org since 1.2 (X11R7.2) in 2007 have supported autoconfiguration of display devices. HAL automatically detects input devices, and fontconfig automatically detects fonts, so you may never need /etc/X11/xorg.conf at all! Once you’ve set up your .xinitrc to use your window manager of choice, just give startx a try. Hopefully it will work flawlessly. If it does feel free to skip the sections on manual configuration. That should only be necessary if you need to force a specific video driver, toggle a specific option, or just hate yourself and feel like learning one of the worst configuration file formats of all time. Manual configurationThis section explains how you can manually configure X for systems using an AMD Radeon and the radeon driver, an Intel grahpics chip with the intel driver, virtualized graphics cards like emulators/virtualbox-ose-additions’s vboxvideo, or any other generic framebuffer device supported by the default vesa driver. If autodetection works you shouldn’t have to do this. As root, run X -configure. It will spit out a new X.org configuration file in /root/xorg.conf.new based on your detected hardware. Copy this file to /etc/X11/xorg.conf, then pull it up in a text editor for a few modifications. Add an “Extensions” section and enable the Composite extension. Section &quot;Extensions&quot; Option &quot;Composite&quot; &quot;Enable&quot; EndSection Add one line to the ServerLayout section to enable AIGLX. Section &quot;ServerLayout&quot; Identifier &quot;X.org Configured&quot; Screen 0 &quot;Screen0&quot; 0 0 InputDevice &quot;Mouse0&quot; &quot;CorePointer&quot; InputDevice &quot;Keyboard0&quot; &quot;CoreKeyboard&quot; Option &quot;AIGLX&quot; &quot;true&quot; EndSection I usually enable the EXA AccelMethod and DRI by adding their respective lines to the Device section. If you have a Radeon card ensure your Driver is configured as radeon, not radeonhd! radeonhd is an older, Novell-sponsored, defunct driver for Radeon HD hardware, but -configure likes to pick it by default if it’s installed. You should use radeon instead. Otherwise X -configure should pick the best driver. Section &quot;Device&quot; Option &quot;AccelMethod&quot; &quot;EXA&quot; Option &quot;DRI&quot; &quot;true&quot; Identifier &quot;Card0&quot; Driver &quot;radeon&quot; VendorName &quot;Advanced Micro Devices [AMD] nee ATI&quot; BoardName &quot;RV770 [Radeon HD 4850]&quot; BusID &quot;PCI:1:0:0&quot; EndSection Enable the freetype, bitmap, and type1 X font modules by adding them to the Module section. According to the manual, “[t]he extmod, dbe, dri, dri2, glx, and record extension modules are loaded automatically if they are present”, but I like to go for the explicit configuration and define them anyway. Section &quot;Module&quot; Load &quot;dbe&quot; Load &quot;dri&quot; Load &quot;dri2&quot; Load &quot;extmod&quot; Load &quot;record&quot; Load &quot;freetype&quot; Load &quot;bitmap&quot; Load &quot;type1&quot; Load &quot;glx&quot; EndSection Manual Configuration with NVIDIASkip this section if you don’t use an NVIDIA graphics card or if automatic configuration works for you. The binary x11/nvidia-driver is the only proprietary software on my system. As much as I’d prefer a free and open solution, I’ve found that neither Nouveau nor the free Radeon or Intel driver compare to the speed and feature support of Nvidia’s official driver. Install the driver itself, x11/nvidia-settings, and x11/nvidia-xconfig. To load the nvidia kernel module at boot, enable it in /boot/loader.conf. echo &apos;nvidia-modeset_load=&quot;YES&quot;&apos; &gt;&gt; /boot/loader.conf Run nvidia-xconfig to get a base xorg.conf in /etc/X11/xorg.conf. Pull it up in your favourite text editor and add the Module section to enable the freetype2, glx, type1 extensions. /etc/X11/xorg.conf Section &quot;Module&quot; Load &quot;freetype&quot; Load &quot;bitmap&quot; Load &quot;type1&quot; Load &quot;glx&quot; EndSection Later on, once you’re booted into the graphical environment, you can use nvidia-settings to configure TwinView and any other settings. Desktop EnvironmentsThe best part of the X Window System ecosystem is the variety of environments available. You might prefer the configurability of KDE, the sparse cleanliness of MATE, something minimal like Window Maker, or even tiling like i3. This isn’t xwinman, but I’ve included screenshots and descriptions for some of the most popular environments to give you an idea what’s out there. KDE 4KDE is the largest and most fully-featured Free Software desktop environment, based on the Qt toolkit. Its configuration options are dizzyingly numerous and it has excellent support for modern technologies like high-DPI displays. It has a modern compositing window manager, KWin, the web and file browser Konqueror that famously spawned the KHTML engine that became WebKit, and a family of other Qt applications like the excellent Clementine. The KDE4 meta-port is available at x11/kde4. You can start KDE with exec startkde in your .xinitrc, but KDE also includes its own graphical login manager, KDM which you can optionally enable in rc.conf and start as a service. echo &apos;kdm4_enable=&quot;YES&quot;&apos; &gt;&gt; /etc/rc.conf service kdm4 start MATE née GNOME 2GNOME 2 was a venerable desktop environment made famous as the Ubuntu default around 2008, and MATE is the community fork of GNOME 2 after the GNOME team lost their collective minds. MATE users should configure PolicyKit to allow normal users to mount removable media automatically. /usr/local/etc/PolicyKit/PolicyKit.conf &lt;config version=&quot;0.1&quot;&gt; &lt;match action=&quot;org.freedesktop.hal.storage.mount-removable&quot;&gt; &lt;return result=&quot;yes&quot;/&gt; &lt;/match&gt; &lt;match action=&quot;org.freedesktop.hal.storage.mount-fixed&quot;&gt; &lt;return result=&quot;yes&quot;/&gt; &lt;/match&gt; &lt;match user=&quot;root&quot;&gt; &lt;return result=&quot;yes&quot;/&gt; &lt;/match&gt; &lt;define_admin_auth group=&quot;wheel&quot;/&gt; &lt;/config&gt; MATE doesn’t include a GDM alternative, so start it with exec mate-session in your .xinitrc using either startx or SLiM. Compiz is a popular alternative window manager with MATE and GNOME 2 users. It gives you those fancy wobbly windows, 3d cubes, and all kinds of flashy stuff. You can install Compiz-Fusion from x11-wm/compiz-fusion. Be sure to disable the obsolete and unmaintained window decorator Emerald, a leftover from the Beryl project, when prompted on the port configuration screen. With Emerald disabled, compiz will default to gtk-window-decorator and will take on your normal GTK theme appearance but with more transparency and garish animation. Once installed, open Settings &gt; Preferences &gt; CompizConfig Settings Manager. You’ll probably want to enable the following plugins at minimum: General: Gnome Compatibility Desktop: Desktop Cube, Rotate Cube Effects: Animations, Window Decoration, Wobbly Windows Window Management: Application Switcher, Move Window, Place Windows, Resize Window Open the “Run” box with Alt+F2 and execute compiz-manager. compiz-manager is a script for detecting and using the proper compiz options for your video hardware. Your screen will flash while Compiz and gtk-window-decorator initialize and replace Marco, MATE’s default window manager. If your windows are missing titlebars, double-check you’ve enabled “Window Decoration” in ccsm. If all seems well, add compiz-manager as a new startup application (in Settings &gt; Preferences &gt; Startup Applications), then change MATE’s window manager preference in DConf: gsettings set org.mate.session.required-components windowmanager compiz To switch back, use the same command with the argument marco. Window MakerIt isn’t as popular or well-known as the others here, but Window Maker is my favorite and longest-used window manager. It is based on the look and feel of the NEXTSTEP operating system, the OS that became Rhapsody and then Mac OS X and iOS. Unlike the extremely limited one-dimensional Mac OS X dock, Window Maker offers a main dock as well as a “clip” dock that is unique to each virtual desktop. Docks can hold normal launchers and “dockapps”, small self-contained dock accessories. You can install Window Maker from x11-wm/windowmaker and start it with exec wmaker in your .xinitrc. In addition, I also show x11-clocks/wmclock, sysutils/wmcpuload, net/wmnd, audio/wmix, x11/sakura, and x11-fm/rox-filer. The first time you start Window Maker you should run wmaker.inst to install the starter configuration to your ~/GNUstep directory. EnlightenmentEnlightenment was the original eye-candy desktop before modern compositors were even a thing. Version 0.17 was the ambitious rewrite release that almost never came out until e17releasemanager got it out the door. Since then it has followed a steady update schedule and is no longer vaporware. It contains an eye-catching desktop built on the project’s own Enlightenment Foundation Libraries. E17 is shiny, bouncy, extendable, and very configurable. You can install it from x11-wm/enlightenment and run it with exec enlightenment_start in your .xinitrc. XFCEXFCE descends, like KDE, from the design of the once-proprietary Common Desktop Environment. As of XFCE 4.0, however, the desktop has become more of a GNOME-lite, the “other” GTK+ desktop environment. I don’t have much to say about it, but it is a very functional and lightweight desktop with panels, a window manager, a great file manager (Thunar), and some other lightweight applications like a terminal. You can start XFCE with exec startxfce4 in your .xinitrc. CinnamonCinnamon is a GTK 3 desktop environment from the Linux Mint project. It began as a fork of the GNOME 3 Shell into a more traditional panels and menus UI since many were dissatisfied with the drastic redesign of a beloved environment. It’s come into its own as a modern DE and offers everything you would expect from GNOME 2 or MATE with a cohesive feel and forks of several of the GNOME core apps. You can install Cinnamon from x11/cinnamon and start it with exec cinnamon-session in your .xinitrc. There is also a fallback software-rendering mode that can be started with exec cinnamon-session-cinnamon2d instead. GNOME 3GNOME 3, available on Linux since 3.0 in the spring of 2011, is finally available in the official FreeBSD tree as of November 2014. The three and a half year delay is thanks to the upstream GNOME project’s years-long fight against any operating system that doesn’t have a penguin for a mascot. It took several years and a vastly waning userbase, then suddenly they care about portability again. Sure, okay. Either way, it’s here and you can install it from x11/gnome3. We weren’t missing much in the delay, since the GNOME team tossed out everything great about their once-ubiquitous DE and turned it into a shiny but unconfigurable iOS imitator where basic features and options are either not available at all, buried inside a settings registry more reminiscent of Windows 98 than BSD, or relegated to extensions that will break with every new minor version thanks to the lack of any stable extensions API and whose very existence are opposed by many of the main project contributors. Take a look at the GNOME Shell Extensions page with me and be amused that you need an extension to use a theme, categorize the Applications menu, remove the otherwise-omnipresent accessibility menu from the status bar, or even power off your computer without knowing about the magic Alt-button toggle. If you want a great GTK-based desktop environment maintained by a team that doesn’t hate you, check out MATE, XFCE, or Cinnamon. All three are excellent. I guess I can thank the GNOME project’s self-destruction for getting me back into Window Maker. Theming Finding Clearlooks too drab and blue? You can find a world of themes and icons for MATE over on GNOME-Look, for KDE at KDE-Look, for XFCE at XFCE-Look, for E17 at E17-Stuff, and for several lightweight window managers at Box-Look. There are several attractive and usable themes buried among the OS X Aqua clones, Vista Aero clones, and black-as-my-soul darkness-fests that are standard on any theming website. You can change theme settings for Qt4 applications with qt4-qtconfig and for KDE Qt applications (like Clementine) in the KDE System Settings. GTK+ is selectable in many window managers’ appearance preferences, and you can also install x11-themes/lxappearance for a light GTK theme switcher. Extras and MiscellanyPrintingCUPS is the standard for printing on Free Unix-like systems and can be installed from Ports along with any needed filters. Install the CUPS meta-port at print/cups. Install HPLIP in print/hplip for HP printer drivers (and my Brother HL-2170W, for some reason). Install the Foomatic filter collection in print/foomatic-filters and its database and engine in print/foomatic-db and print/foomatic-db-engine, respectively. I find the CUPS-PDF virtual printer in print/cups-pdf very useful as well. Enable CUPS once installed: /etc/rc.conf # Disable line printer daemon since we have CUPS lpd_enable=&quot;NO&quot; # Enable CUPS cupsd_enable=&quot;YES&quot; Add local users to the cups group if you want them to be able to print. pw usermod root -G cups pw usermod okeeblow -G cups Start the CUPS service with service cupsd start and you should be able to access its web configuration UI at http://localhost:631/ in your web browser. It may prompt you for your root password to write the config files in /usr/local/etc/cups. Most full desktop environments include a GUI to control CUPS and add printers, but the web interface is available in any of them. The web interfaces’ built-in documentation can help you configure different models of printer, specifically the Network Protocols Supported by CUPS and Common Network Printer URIs sections. S.M.R.T.sysutils/smartmontools installs smartd and smartctl, a daemon and utility for checking the S.M.A.R.T. status of your local disks. Enable the sample smartd.conf. It contains one directive, DEVICESCAN, that causes smartd to scan all attached drives. cp /usr/local/etc/smartd.conf.sample /usr/local/etc/smartd.conf echo &apos;smartd_enable=&quot;YES&quot;&apos; &gt;&gt; /etc/rc.conf service smartd start You can check the S.M.A.R.T. status of a drive directly with smartctl as root. The -H flag will show basic pass or fail health status, and the -a flag will show everything. smartctl -H /dev/ada0 smartctl 6.2 2014-02-18 r3874 [FreeBSD 10.0-RELEASE-p2 amd64] (local build) Copyright (C) 2002-13, Bruce Allen, Christian Franke, www.smartmontools.org === START OF READ SMART DATA SECTION === SMART overall-health self-assessment test result: PASSED JavaFreeBSD has several available Java providers, including OpenJDK and Sun’s Oracle’s JDK. I recommend the newest OpenJDK for most people. It’s far easier to install than the binary Oracle JRE which requires logging in to a web page, agreeing to the license, and manually downloading the distfile for Ports. At the time of this writing the newest OpenJDK is java/openjdk8. OpenJDK 6 and 7 are available as well if you have software that doesn’t run on Java 8. If you need a Java browser plugin you can install java/icedtea-web once a Java provider is available. Webcams and DVBMost USB webcams and many DVB tuners are supported by multimedia/webcamd, and webcamd depends on the userland character device driver in multimedia/cuse4bsd-kmod. Install them, then enable them in rc.conf and loader.conf. /etc/rc.conf # Webcam daemon webcamd_enable=&quot;YES&quot; /boot/loader.conf # Userland character device driver for webcams cuse4bsd_load=&quot;YES&quot; You can use your camera device with pwcview available in multimedia/pwcview or with Cheese in multimedia/cheese. Cheese provides a nice interface similar to Apple’s Photobooth on OS X, but it has a heavy GNOME library dependency some may not want on their systems. IBusIBus is a modern IME for Unix-like systems, allowing one to input CJK languages. Install the main IME from textproc/ibus as well as QT application support from textproc/ibus-qt. You’ll need one or more input methods once the IME itself is installed. Ports of interest: chinese/ibus-chewing - Chewing engine for IBus chinese/ibus-pinyin - The PinYin input method japanese/ibus-anthy - Anthy engine for IBus japanese/ibus-mozc - Mozc engine for IBus japanese/ibus-skk - SKK engine for IBus korean/ibus-hangul - Hangul engine for IBus textproc/ibus-kmfl - KMFL IMEngine for IBus framework textproc/ibus-m17n - The m17n IMEngine for IBus framework textproc/ibus-table - Table based IM framework for IBus Heavyweight desktop environments like GNOME or KDE will let you configure the input method graphically. In GNOME 2 and MATE, for example, you can open the IBus preferences from the Settings &gt; Preferences menu. KDE/Qt users can enable it as the default IME in qtconfig-qt4. Lightweight window manager users like me can start it in .xinitrc: ~/.xinitrc export XMODIFIERS=&quot;@im=ibus&quot; export GTK_IM_MODULE=&quot;ibus&quot; export QT_IM_MODULE=&quot;ibus&quot; exec ibus-daemon -d -x &amp; Now run any GTK or QT application, press your keyboard shortcut to switch input methods, and test it out. LinuxulatorFreeBSD’s Linuxulator allows it to run Linux application binaries using system call translation. Desktop users will find it useful for running the handful of proprietary but necessary programs that are available for Linux but not for FreeBSD, such as Adobe Flash Player. Install the Linux base distribution from Ports. As I write this the default base distribution is emulators/linux_base-c6, based on CentOS 6, replacing the old Fedora 10 based linux_base-f10. A newer CentOS 7 emulators/linux_base-c7 is also available and will become the default at some point in the future. Once your chosen linux_base installed, tell your system to load the linux kernel module at boot. echo &apos;linux_load=&quot;YES&quot;&apos; &gt;&gt; /boot/loader.conf kldload linux Mount the linprocfs virtual filesystems for compatibility with GNOME and other programs requiring them. /etc/fstab linproc /compat/linux/proc linprocfs,auto,late rw 0 0 Besides proprietary garbageware like Flash Player I also use Linuxulator along with the Loki compatibility library package to run Loki Software’s Linux ports of some of the best PC games ever made, like Simcity 3000 Unlimited. WineWine is a free implementation of the Win32 API capable of running real Windows applications on Unix-like systems. It’s available from emulators/wine emulators/wine-devel, or emulators/wine-staging, containing the latest stable, unstable, and staging versions respectively. The optional emulators/wine-gecko is an mshtml.dll replacement that will allow Windows programs to embed web pages using the Mozilla engine. The optional emulators/wine-mono will let Wine run Windows programs written in versions 1.x or 2.0 of the .NET Framework without using the proprietary .NET runtime. You can also install emulators/winetricks, a script containing Wine installation recipes for popular software, and you may find a Wine GUI such as emulators/swine useful for maintaining separate Wine prefixes. Installing 64-bit Wine on an amd64 FreeBSD system normally precludes you from running 32-bit Windows software, a.k.a. most of the software you probably care about. As a workaround, i386 Wine packages are also available. You can install them from emulators/i386-wine, emulators/i386-wine-devel, or emulators/i386-wine-staging. If you plan to use Wine to run browser plugins, use the staging-patched version of wine in emulators/wine-staging or emulators/i386-wine-staging. Wine is very impressively-compatible these days. I use it to run a lot of games from Humble Store and GOG so I don’t have to fire up a Windows computer or VM. Wine is so good it is used to create the Linux versions of many of these titles, such as Freedom Planet, and in that case it’s a lot easier to run the same executable in FreeBSD Wine than to try and get the Linux Wine binaries running via Linuxulator. If every wine command fails with ELF interpreter /libexec/ld-elf.so.1 not found your 64-bit system is missing the 32-bit libraries necessary for Wine. You’ll need to install them. From the releases FTP, grab the lib32.txz matching your version of the OS and extract it either as root or with sudo to the root of your filesystem to install. The archive contains a full directory hierarchy so all the files will end up in the right place. fetch ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/11.0-RELEASE/lib32.txz tar xfp lib32.txz -C / Browser Plugins NOTE on NPAPI Deprecation: Firefox and Chromium are deprecating support for NPAPI plugins, so everything in this section will stop working at that time. Chromium removed support as of version 32. Firefox 52 is the last version with support and will be available as www/firefox-esr until the release of ESR 60. Adobe Flash Player is not released for FreeBSD but is usable on FreeBSD i386 and amd64 through your choice of two wrappers. The 32-bit Linux version of the Flash plugin can be installed via www/linux-c6-flashplugin24 or www/linux-c7-flashplugin24, executed through Linuxulator, and adapted to 32-bit or 64-bit native browsers with www/nspluginwrapper. Adobe dropped support for the NPAPI Linux version of Flash with version 11.2 back in 2012. They left development up to Google who deprecated NPAPI and only released a PPAPI version for many years as part of their proprietary Chrome browser bundle, something that isn’t even available for FreeBSD. Adobe, in a surprising move, resumed Linux NPAPI Flash plugin development in 2016. To use nspluginwrapper, make sure linprocfs is mounted and execute nspluginwrapper -v -a -i as your normal user to locate and enable the Linux Flash plugin. -a automatically finds available plugins and -i installs them. It’s important to remember it makes a copy of the Flash library in your home directory when you do this, so every time you update the version of Flash installed through Ports you need to remove your local cory with nspluginwrapper -v -a -r and install the new one with nspluginwrapper -v -a -i. Adobe promised security updates for the NPAPI Flash Player through 2017, and if history is any indication you’re going to need them. A newer and arguably better solution is emulators/pipelight, a Wine-based wrapper for Windows browsers plugins. It supports the very newest version of Windows Flash, freeing us from the limitations of Adobe’s Linux development, and also supports Shockwave, Silverlight, Unity, Widevine, and more. It requires a special patched version of Wine, emulators/wine-staging or emulators/i386-wine-staging. Once installed, activate plugins as root. pipelight-plugin --update pipelight-plugin --create-mozilla-plugins pipelight-plugin --enable flash Silverlight is available as well and can allow you to watch DRMed NetFlix content via your browser on FreeBSD. I have no experience using it since I don’t buy DRMed streaming media subscriptions, but it can be installed the same way. pipelight-plugin --enable silverlight5.1 Heed www/pipelight’s pkg-message warning about Silverlight DRM if you have a ZFS-based system: For users running with ZFS on root, watching DRM protected content requires extensive xattr support. If you run into issues with DRM failing, you can use the “pipelight-mkufs” command to create a UFS formatted ZVOL mounted on your users ~/.wine-pipelight directory. Other plugins are enabled the same way, and the list of available plugins can be seen in pipelight-plugin --help. VirtualizationIt’s pretty common to virtualize another operating system on your computer, possibly to run a proprietary program or access a proprietary office groupware system. Whatever the reason, it’s easy to accomplish on FreeBSD. FreeBSD 10 has a new built-in hypervisor known as bhyve capable of running FreeBSD natively and other operating systems via sysutils/grub2-bhyve. Originally bhyve supported only a serial console but as of FreeBSD 11 also supports graphics. Alternatively, VirtualBox open source edition is available at emulators/virtualbox-ose. Build it with Guest Additions enabled for the best experience virtualizing Windows and Linux. To use VirtualBox, configure loader.conf to load the VirtualBox kernel module and configure rc.conf to start VirtualBox bridged networking. /boot/loader.conf vboxdrv_load=&quot;YES&quot; /etc/rc.conf vboxnet_enable=&quot;YES&quot; /etc/devfs.conf # Allow VirtualBox network access own vboxnetctl root:vboxusers perm vboxnetctl 0660 pw usermod okeeblow -G vboxusers SkypeSkype is bad, proprietary software that doesn’t value your freedom. Use audio/mumble or net-im/ekiga instead if you can. If you still wish to use Skype, make sure you have Linuxulator enabled and install net-im/skype. Version 2.1 of Skype’s Linux client dropped support for OSS, found in FreeBSD as the default sound API. Thanks to this, Skype 2.0 persisted for years as the version in Ports. With the introduction of an ALSA compatibility shim in FreeBSD 8.3 and 9.0 and audio/linux-c6-alsa-plugins-oss, we can use the newer ALSA-only Skype 2.1 client. The ALSA client, unlike the old OSS client, requires some explicit configuration to use our sound devices. They must be defined manually in /compat/linux/etc/alsa/pcm/pcm-oss.conf, the configuration file of alsa-plugins-oss. In this example, I enable pcm6/dsp6 for audio output, and pcm8/dsp8, a USB webcam, as a microphone source. /compat/linux/etc/alsa/pcm/pcm-oss.conf pcm.oss8 { type oss device /dev/dsp8 hint { description &quot;Open Sound System - Webcam&quot; } } ctl.oss8 { type oss device /dev/mixer8 hint { description &quot;Open Sound System - Webcam&quot; } } pcm.oss6 { type oss device /dev/dsp6 hint { description &quot;Open Sound System - S/PDIF&quot; } } ctl.oss6 { type oss device /dev/mixer6 hint { description &quot;Open Sound System - S/PDIF&quot; } } There is an even newer Skype client available as net-im/skype4, but that version is not usable on FreeBSD 10.x due to missing syscalls in that branch’s Linuxulator. It will work via Pulseaudio in FreeBSD 11 and later. For Skype 4.x, load the Video4Linux2 wrapper module: kldload linux_v4l2wrapper echo &apos;linux_v4l2wrapper_load=&quot;YES&quot;&apos; &gt;&gt; /boot/loader.conf The microphone volume can be controlled by invoking the mixer of your chosen recording device. Let’s raise the microphone volume now from 0% to 75%. mixer -f /dev/mixer8 mic 75 ISO-8601 and other localesThis is personal preference, but I also set my LC_TIME environment variable to the en_DK faux-locale for ISO-8601 date formats instead of the ridiculous American standard. Quick, what date is 6/5/12? Oh, it’s 2012-06-05, of course. The locale isn’t included with the FreeBSD base system as it is in many Linux distributions, but it’s available from Ivan Voras’ blog. tar -C /usr/share/locale -zxf /path/to/your/en_DK.UTF-8.tgz Enable it in the login database and /etc/profile. /etc/login.conf @@ -46,7 +46,8 @@ :ignoretime@: :umask=022: :charset=UTF-8: - :lang=en_US.UTF-8: + :lang=en_US.UTF-8: + :setenv=LC_TIME=en_DK.UTF-8: cap_mkdb /etc/login.conf /etc/profile LC_TIME=en_DK.UTF-8; export LC_TIME Upgrade NotesThis guide assumes you will track the newest STABLE branch, upgrading to new stable branches at the initial .0 release. That’s not a thing I would ever recommend with OS X, but I haven’t been burned by a new major FreeBSD version yet. This section notes things you need to know to keep your system in top shape when upgrading. 9.x to 10.0If you are updating from 9.x to 10.0 or higher, run pkg2ng after rebooting into the new OS. This conversion script will convert the list of installed packages from the format used by the old pkg_ tools to the format used by pkgng, the new binary package manager. If you neglect this step the OS will think you have no packages installed and your life will become very confusing. 10.0 to 10.1WITH_NEW_XORG is no longer a thing. The old version is gone. vt is a new console driver designed to replace syscons. It offers Unicode and graphics support using kernel modesetting. This is necessary to support UEFI. A loader variable kern.vty can select between vt and sc. /boot/loader.conf kern.vty=vt It will default to graphics mode but can be configured to use a text mode instead if necessary. /boot/loader.conf hw.vga.textmode=1","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://hero.triple.net.cn/tags/nginx/"},{"name":"fastdfs","slug":"fastdfs","permalink":"https://hero.triple.net.cn/tags/fastdfs/"},{"name":"消息","slug":"消息","permalink":"https://hero.triple.net.cn/tags/消息/"},{"name":"desktop","slug":"desktop","permalink":"https://hero.triple.net.cn/tags/desktop/"}]},{"title":"[转]深入理解双因子认证","slug":"e8-bd-ac-e6-b7-b1-e5-85-a5-e7-90-86-e8-a7-a3-e5-8f-8c-e5-9b-a0-e5-ad-90-e8-ae-a4-e8-af-81","date":"2017-08-06T07:10:02.000Z","updated":"2018-12-12T09:13:19.508Z","comments":true,"path":"2017/08/06/e8-bd-ac-e6-b7-b1-e5-85-a5-e7-90-86-e8-a7-a3-e5-8f-8c-e5-9b-a0-e5-ad-90-e8-ae-a4-e8-af-81/","link":"","permalink":"https://hero.triple.net.cn/2017/08/06/e8-bd-ac-e6-b7-b1-e5-85-a5-e7-90-86-e8-a7-a3-e5-8f-8c-e5-9b-a0-e5-ad-90-e8-ae-a4-e8-af-81/","excerpt":"","text":"关于两步验证，写的非常好的一篇文章。 来源： [Debug Hacks](http://blog.gaoyuan.xyz/2017/01/05/2fa-a-programmers-perspective/) 去年年初，让ops在服务器上开启了基于google-authenticator的双因子认证。最近花了点时间进行深入了解，记录如下。 双因子认证的相关概念双因子认证（Two-factor authentication，也叫2FA），是一种通过组合两种不同的验证方式进行用户身份验证的机制。Google在2011年3月份，宣布在线上使用双因子认证，MSN和Yahoo紧随其后。 双因子认证，除了需要验证用户名密码外，还要结合另外一种实物设备，如Rsa令牌，或者手机。 如果我们把传统的用户名密码验证称为单因子认证（1FA），那么对比双因子认证（2FA），他们的区别如下： 1FA – What you know (e.g. a password, a pin) 2FA – What you have (e.g. a phone, a hardware token) 3FA – What you are (e.g. your fingerprints, you retina) 双因子认证的产品大致可以分成两类： 可以产生token的硬件设备 智能手机的app 手机短信验证码，登录微信公众号时的扫码确认都可以称为双因子认证。 双因子认证，还会结合一个只有你有的硬件设备。只要这个专属的硬件设备不丢失（察觉这个设备丢失，比用户名密码泄露，会容易很多），就可以大大地提升账号的安全性。 双因子认证的实现[caption id=”” align=”alignleft” width=”1214”] Two-factor authentication flow[/caption] 双因子认证的流程如下： 认证过程中涉及的token，一般会使用一次性密码(One-time password)，相关实现有： HOTP: 基于次数的一次性密码（HMAC-Based One-Time Password） TOTP: 基于时间的一次性密码（Time-Based One-Time Password） HOTP和TOTP的实现都基于HMAC-SHA-1算法。 HOTP的生成算法如下 HOTP(K,C) = Truncate(HMAC-SHA-1(K,C)) 其中： C是一个8-byte的自增变量。对于客户端，每生成一次性密码，其值加1。对于服务端，每次成功认证客户端产生的一次性密码，其值加1。在HOTP生成（客户端）和验证（服务端）过程中，C的值必须同步。 K是客户端和服务端使用的共享密钥，每个客户端的K应该都是唯一的。 生成步骤如下： Step 1: 使用HMAC-SHA-1算法，利用C和K，生成一个长度为20-byte的40个十六进制字符，即：HS = HMAC-SHA-1(K,C) Step 2: 根据前面产品的字符串`HS`，生成一个长度为4-byte的8个十六进制字符，即：Sbits = DT(HS)，DT是根据HS，动态产生Sbits的方法，后面的示例中会提到 Step 3: 根据前面的Sbits，计算一个HOTP的值，一般为6位数字。 2 nibbles (2 hex characters) = 1-byte TOTP可以当做是HOTP算法的一个变种，可以将TOTP的生成算法定义为： TOTP = HOTP(K, T) K同HOTP算法中K的定义，是客户端和服务端使用的共享密钥，T是一个整数，定义如下： T = floor((Current Unix time - T0) / X) 其中： T0是起始的Unix Time，默认为0 X是T增长的步长，默认为30 即T是以30为步长，当前的Unix Time距初始的Unix TimeT0增长的数量。 如果T0=0，X=30，那么当此刻的Unix time是59时，T=1，当此刻的Unix time为60时，T=2。TOTP算法生成的一次性密码，就会每30s变更一次。 一次性密码的生成过程本文以HMAC-SHA-1算法生成的字符串HS的值是0215a7d8c15b492e21116482b6d34fc4e1a9f6ba为例，介绍一次性密码的生成过程。 如果使用TOTP算法进行双因子认证，要让用户在30s内输入40个十六进制的字符，这是一件很难想象的事情。所以我们需要想个办法，将HS转换地更加便于输入，而又不失安全性。这就是前面提到的DT（Dynamic Truncation）的处理过程。 为了更清晰地展示生成过程，用下图表示HS： 前面的图中包含40个字符，每个字符都占4-bits（有16个可能的值0-15），被分成了20组单独的字符串。 我们先去找HS的低4位（最后一个字符），作为截取字符串的起始位置。在我们的例子里，最后一个字符是a： 将十六进制的字符a转成十进制数是10。 我们将第1组字符串的偏移量用0表示，以此类推，如下： 然后，从字符串HS的第10个偏移量开始，截取4组字符串（或者是接下来的31-bits）。 这样截取的最大偏移量是15+4=19，刚好没有越界 因此，我们通过DT（Dynamic Truncation）处理，将HS转换后得到的字符串是6482b6d3： 将十六进制的6482b6d3转成十进制数是1686288083。 因为我们需要一个6位的数字，所以和1000000进行取模运算： 1686288083 modulo 1000000 最后的结果是： 288083 使用google-authenticator，开启服务器双因子认证首先，去你喜欢的android应用市场，或者apple的appStore去安装：“Google Authenticator（google身份验证器）”。 然后登录要开启双因子认证登录的服务器，进行下面的操作。 安装依赖 yum -y install gcc gcc-c++ make wget pam-devel 安装Google Authenticator wget http://google-authenticator.googlecode.com/files/libpam-google-authenticator-1.0-source.tar.bz2 tar jxvf libpam-google-authenticator-1.0-source.tar.bz2 cd libpam-google-authenticator-1.0 make sudo make install 配置SSH登录时调用google-authenticator模块 编辑文件/etc/pam.d/sshd，添加： auth required pam_google_authenticator.so 编辑文件/etc/ssh/sshd_config，在文件中查找ChallengeResponseAuthentication和UsePAM，修改为如下内容： ChallengeResponseAuthentication yes UsePAM yes 重启ssh sudo service ssh restart 下面是配置Google Authenticator的相关步骤。 如果要为用户zhangsan添加ssh登录时的双因子认证，执行如下命令： 12 su - zhangsan google-authenticator 会出现一串问题，让你选y或者n。 Do you want authentication tokens to be time-based (y/n) y https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/zhangsan@ali%3Fsecret%3DWKHM6UVJNTPYSPTQ Your new secret key is: WKHM6UVJNTPYSPTQ Your verification code is 434260 Your emergency scratch codes are: 30287010 70585905 68748337 15176712 38041521 上面的这一步，会生成一个base32编码的共享密钥WKHM6UVJNTPYSPTQ，即前面的K，用于在客户端进行绑定（如果可以翻墙的话，实际上会看到一张二维码，使用Google Authenticator app扫码即可以完成绑定）。 共享密钥使用base32而非base64的原因如下： base32编码的字符串，包含了大写英文字母和数字2-7。不会因字体显示问题，把1，8，0和’I’,‘B’, ‘O’混淆，更利于输入。 base32编码的字符串，出现在url中时，可以不用进行url编码处理（encode），便于直接使用生成二维码的web服务。 同时，基于当前的Unix time，生成了一个动态验证码434260，可用于测试。并生成了5个应急备用验证码（上面的emergency scratch codes），可以在绑定设备丢失的情况下使用（每个应急码只能使用一次）。 剩下的问题，没有特殊癖好，可以都选y。 Do you want me to update your &quot;/home/zhangsan/.google_authenticator&quot; file (y/n) y Do you want to disallow multiple uses of the same authentication token? This restricts you to one login about every 30s, but it increases your chances to notice or even prevent man-in-the-middle attacks (y/n) y By default, tokens are good for 30 seconds and in order to compensate for possible time-skew between the client and the server, we allow an extra token before and after the current time. If you experience problems with poor time synchronization, you can increase the window from its default size of 1:30min to about 4min. Do you want to do so (y/n) y If the computer that you are logging into isn&apos;t hardened against brute-force login attempts, you can enable rate-limiting for the authentication module. By default, this limits attackers to no more than 3 login attempts every 30s. Do you want to enable rate-limiting (y/n) y 之后，ssh登录服务器时，会看到类似这样的提示： verification code: 这时，打开手机上的google身份验证器App，输入对应的code，如下： reference： [^1] https://pthree.org/2014/04/15/time-based-one-time-passwords-how-it-works/ [^2] https://garbagecollected.org/2014/09/14/how-google-authenticator-works/ [^3] https://www.blackmoreops.com/2014/06/26/securing-ssh-two-factor-authentication-using-google-authenticator/","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"google","slug":"google","permalink":"https://hero.triple.net.cn/tags/google/"},{"name":"Two-factor authentication","slug":"Two-factor-authentication","permalink":"https://hero.triple.net.cn/tags/Two-factor-authentication/"},{"name":"两步验证","slug":"两步验证","permalink":"https://hero.triple.net.cn/tags/两步验证/"}]},{"title":"德兰修女 箴言","slug":"e5-be-b7-e5-85-b0-e4-bf-ae-e5-a5-b3-e7-ae-b4-e8-a8-80","date":"2017-08-06T05:49:19.000Z","updated":"2018-12-12T09:08:58.799Z","comments":true,"path":"2017/08/06/e5-be-b7-e5-85-b0-e4-bf-ae-e5-a5-b3-e7-ae-b4-e8-a8-80/","link":"","permalink":"https://hero.triple.net.cn/2017/08/06/e5-be-b7-e5-85-b0-e4-bf-ae-e5-a5-b3-e7-ae-b4-e8-a8-80/","excerpt":"","text":"人们经常是不讲道理的、没有逻辑的和以自我为中心的 不管怎样，你要原谅他们 即使你是友善的，人们可能还是会说你自私和动机不良 不管怎样，你还是要友善 当你功成名就，你会有一些虚假的朋友 和一些真实的敌人 不管怎样，你还是要取得成功 即使你是诚实的和率直的，人们可能还是会欺骗你 不管怎样，你还是要诚实和率直 你多年来营造的东西 有人在一夜之间把它摧毁 不管怎样，你还是要去营造 如果你找到了平静和幸福，他们可能会嫉妒你 不管怎样，你还是要快乐 你今天做的善事，人们往往明天就会忘记 不管怎样，你还是要做善事 即使把你最好的东西给了这个世界 也许这些东西永远都不够 不管怎样，把你最好的东西给这个世界 你看，说到底，它是你和上帝之间的事 而决不是你和他人之间的事","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"德兰修女","slug":"德兰修女","permalink":"https://hero.triple.net.cn/tags/德兰修女/"},{"name":"箴言","slug":"箴言","permalink":"https://hero.triple.net.cn/tags/箴言/"}]},{"title":"JMS发布/订阅消息传送例子","slug":"jms-e5-8f-91-e5-b8-83-e8-ae-a2-e9-98-85-e6-b6-88-e6-81-af-e4-bc-a0-e9-80-81-e4-be-8b-e5-ad-90","date":"2017-08-01T21:14:04.000Z","updated":"2018-12-12T09:19:37.216Z","comments":true,"path":"2017/08/02/jms-e5-8f-91-e5-b8-83-e8-ae-a2-e9-98-85-e6-b6-88-e6-81-af-e4-bc-a0-e9-80-81-e4-be-8b-e5-ad-90/","link":"","permalink":"https://hero.triple.net.cn/2017/08/02/jms-e5-8f-91-e5-b8-83-e8-ae-a2-e9-98-85-e6-b6-88-e6-81-af-e4-bc-a0-e9-80-81-e4-be-8b-e5-ad-90/","excerpt":"","text":"在Tomcat中配置JNDI配置连接工厂和话题 &lt;Resource name=&quot;topic/connectionFactory&quot; auth=&quot;Container&quot; type=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot; description=&quot;JMS Connection Factory&quot; factory=&quot;org.apache.activemq.jndi.JNDIReferenceFactory&quot; brokerURL=&quot;failover:(tcp://localhost:61616)?initialReconnectDelay=100&amp;amp;maxReconnectAttempts=5&quot; brokerName=&quot;LocalActiveMQBroker&quot; useEmbeddedBroker=&quot;false&quot; /&gt; &lt;Resource name=&quot;topic/topic0&quot; auth=&quot;Container&quot; type=&quot;org.apache.activemq.command.ActiveMQTopic&quot; description=&quot;My Topic&quot; factory=&quot;org.apache.activemq.jndi.JNDIReferenceFactory&quot; physicalName=&quot;TestTopic&quot; /&gt; 在Web工厂中编写代码新建一个发布者Servlet package pubSub; import java.io.IOException;import java.io.PrintWriter; import javax.naming.InitialContext;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.jms.Topic;import javax.jms.Session;import javax.jms.TextMessage;import javax.jms.TopicPublisher;import javax.jms.DeliveryMode;import javax.jms.TopicSession;import javax.jms.TopicConnection;import javax.jms.TopicConnectionFactory; /** * Servlet implementation class JMSTest */@WebServlet(“/Publish”)public class Publisher extends HttpServlet { private static final long serialVersionUID = 1L; /\\*\\* \\* @see HttpServlet#HttpServlet() */ public Publisher() { super(); // TODO Auto-generated constructor stub } /\\*\\* \\* @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse \\* response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter out = response.getWriter(); try { // get the initial context InitialContext ctx = new InitialContext(); // lookup the topic object Topic topic = (Topic) ctx.lookup(&quot;java:comp/env/topic/topic0&quot;); // lookup the topic connection factory TopicConnectionFactory connFactory = (TopicConnectionFactory) ctx .lookup(&quot;java:comp/env/topic/connectionFactory&quot;); // create a topic connection TopicConnection topicConn = connFactory.createTopicConnection(); // create a topic session TopicSession topicSession = topicConn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE); // create a topic publisher TopicPublisher topicPublisher = topicSession.createPublisher(topic); topicPublisher.setDeliveryMode(DeliveryMode.NON_PERSISTENT); // create the &quot;Hello World&quot; message TextMessage message = topicSession.createTextMessage(); message.setText(&quot;Hello World&quot;); // publish the messages topicPublisher.publish(message); // print what we did out.write(&quot;Message published: &quot; + message.getText()); // close the topic connection topicConn.close(); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } } /\\*\\* \\* @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse \\* response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // TODO Auto-generated method stub } } 新建一个订阅者Servlet package pubSub; import java.io.IOException;import java.io.PrintWriter; import javax.jms.Session;import javax.jms.TextMessage;import javax.jms.Topic;import javax.jms.TopicConnection;import javax.jms.TopicConnectionFactory;import javax.jms.TopicSession;import javax.jms.TopicSubscriber;import javax.naming.InitialContext;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse; /** * Servlet implementation class Receive */@WebServlet(“/Subscribe”)public class Subscriber extends HttpServlet { private static final long serialVersionUID = 1L; /\\*\\* \\* @see HttpServlet#HttpServlet() */ public Subscriber() { super(); // TODO Auto-generated constructor stub } /\\*\\* \\* @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse \\* response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter out = response.getWriter(); try { // get the initial context InitialContext ctx = new InitialContext(); // lookup the topic object Topic topic = (Topic) ctx.lookup(&quot;java:comp/env/topic/topic0&quot;); // lookup the topic connection factory TopicConnectionFactory connFactory = (TopicConnectionFactory) ctx .lookup(&quot;java:comp/env/topic/connectionFactory&quot;); // create a topic connection TopicConnection topicConn = connFactory.createTopicConnection(); // create a topic session TopicSession topicSession = topicConn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE); // create a topic subscriber TopicSubscriber topicSubscriber = topicSession .createSubscriber(topic); // start the connection topicConn.start(); // receive the message TextMessage message = (TextMessage) topicSubscriber.receive(); // print the message out.write(&quot;Message received: &quot; + message.getText()); // close the topic connection topicConn.close(); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } } /\\*\\* \\* @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse \\* response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // TODO Auto-generated method stub } } 运行Web工程，分别打开多个标签访问订阅servlet，然后访问发布servlet，结果如下： 在订阅者订阅消息的时候，一开始没接收到消息，一旦发布者发布消息后，订阅者马上收到消息。 参考资料http://howtodoinjava.com/jms/jms-publish-subscribe-message-example/","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"fastdfs","slug":"fastdfs","permalink":"https://hero.triple.net.cn/tags/fastdfs/"},{"name":"socket","slug":"socket","permalink":"https://hero.triple.net.cn/tags/socket/"},{"name":"字节流","slug":"字节流","permalink":"https://hero.triple.net.cn/tags/字节流/"},{"name":"ActiveMQ","slug":"ActiveMQ","permalink":"https://hero.triple.net.cn/tags/ActiveMQ/"},{"name":"jms","slug":"jms","permalink":"https://hero.triple.net.cn/tags/jms/"},{"name":"message","slug":"message","permalink":"https://hero.triple.net.cn/tags/message/"},{"name":"消息","slug":"消息","permalink":"https://hero.triple.net.cn/tags/消息/"}]},{"title":"FastDFS 以字节方式上传文件","slug":"fastdfs-e4-bb-a5-e5-ad-97-e8-8a-82-e6-96-b9-e5-bc-8f-e4-b8-8a-e4-bc-a0-e6-96-87-e4-bb-b6","date":"2017-07-31T19:40:42.000Z","updated":"2018-12-12T09:19:14.586Z","comments":true,"path":"2017/08/01/fastdfs-e4-bb-a5-e5-ad-97-e8-8a-82-e6-96-b9-e5-bc-8f-e4-b8-8a-e4-bc-a0-e6-96-87-e4-bb-b6/","link":"","permalink":"https://hero.triple.net.cn/2017/08/01/fastdfs-e4-bb-a5-e5-ad-97-e8-8a-82-e6-96-b9-e5-bc-8f-e4-b8-8a-e4-bc-a0-e6-96-87-e4-bb-b6/","excerpt":"","text":"在阅读本文之前，请您先通过《FastDFS的配置、部署与API使用解读（1）Get Started with FastDFS》一文中给出的参考博文中的部署篇和测试篇来完成前期的准备工作。 1、下载FastDFS的API FastDFS提供Java和PHP等语言的客户端API。可以到FastDFS在Google Code的项目主页 http://code.google.com/p/fastdfs/downloads/list 下载。本文以Java API为例。 2、调用API的上传接口 通过Servlet得到InputStream、文件名称和文件长度，然后通过调用FastDFS提供的Java API把文件上传到FastDFS服务器。下段代码中的getFileBuffer可参考本博客上一篇博文。（by Poechant） /** Upload File to DFS. @param fileBuff, file to be uploaded. @param uploadFileName, the name of the file. @param fileLength, the length of the file. @return the file ID in DFS. @throws IOException */ public String uploadFile(InputStream inStream, String uploadFileName, long fileLength) throws IOException { byte[] fileBuff = getFileBuffer(inStream, fileLength); String fileId = “”; String fileExtName = “”; if (uploadFileName.contains(“.”)) { fileExtName = uploadFileName.substring(uploadFileName.lastIndexOf(“.”) + 1); } else { logger.warn(“Fail to upload file, because the format of filename is illegal.”); return fileId; } //建立连接 TrackerClient tracker = new TrackerClient(); TrackerServer trackerServer = tracker.getConnection(); StorageServer storageServer = null; StorageClient1 client = new StorageClient1(trackerServer, storageServer); //设置元信息 NameValuePair[] metaList = new NameValuePair[3]; metaList[0] = new NameValuePair(“fileName”, uploadFileName); metaList[1] = new NameValuePair(“fileExtName”, fileExtName); metaList[2] = new NameValuePair(“fileLength”, String.valueOf(fileLength)); //上传文件 try { fileId = client.upload_file1(fileBuff, fileExtName, metaList); } catch (Exception e) { logger.warn(“Upload file “” + uploadFileName + “”fails”); } trackerServer.close(); return fileId; } 3、调用方式详解 （1）客户端与Tracker Server通信 根据《FastDFS的配置、部署与API使用解读（1）Get Started with FastDFS》一文中提供的FastDFS的工作原理，结合上面的代码，首先通过TrackerClient构造函数从全局配置中获取Tracker Servers的IP和端口初始化一个TrackerClient对象tracker，并与其建立连接，我们可以从API的源码中看到： /** constructor with global tracker group */ public TrackerClient() { this.tracker_group = ClientGlobal.g_tracker_group; } /** constructor with specified tracker group @param tracker_group the tracker group object */ public TrackerClient(TrackerGroup tracker_group) { this.tracker_group = tracker_group; } 上述代码中ClientGlobal是一个提供很多静态成员供外部读取的类。通过tracker这个TrackerClient建立的与Tracker Server的连接，实例化了一个trackerServer对象。 （2）客户端与Storage Server通信 通过trackerServer取得某一个可用的Storage Server的地址并用其实例化一个StorageClient1对象。这样就完成了FastDFS的客户端调用上传、下载、删除等所有操作的前期建立连接的工作。 （3）调用文件操作API 这些操作包括upload、download、append、delete等。上例中提供的是上传的实例。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"fastdfs","slug":"fastdfs","permalink":"https://hero.triple.net.cn/tags/fastdfs/"},{"name":"socket","slug":"socket","permalink":"https://hero.triple.net.cn/tags/socket/"},{"name":"字节流","slug":"字节流","permalink":"https://hero.triple.net.cn/tags/字节流/"}]},{"title":"FastDFS 在 CentOS 下配置安装部署","slug":"fastdfs-e5-9c-a8-centos-e4-b8-8b-e9-85-8d-e7-bd-ae-e5-ae-89-e8-a3-85-e9-83-a8-e7-bd-b2","date":"2017-07-31T18:20:55.000Z","updated":"2018-12-12T09:19:14.586Z","comments":true,"path":"2017/08/01/fastdfs-e5-9c-a8-centos-e4-b8-8b-e9-85-8d-e7-bd-ae-e5-ae-89-e8-a3-85-e9-83-a8-e7-bd-b2/","link":"","permalink":"https://hero.triple.net.cn/2017/08/01/fastdfs-e5-9c-a8-centos-e4-b8-8b-e9-85-8d-e7-bd-ae-e5-ae-89-e8-a3-85-e9-83-a8-e7-bd-b2/","excerpt":"","text":"centos安装fastdfs 少啰嗦，直接装看过上一篇分布式文件系统 - FastDFS 简单了解一下的朋友应该知道，本次安装是使用目前余庆老师开源的最新 V5.05 版本，是余庆老师放在 Github 上的，和目前你能在网络上搜索到的 Google Code 的 V4.06 或更低版本不一样，而且按照他们的步骤坑很多，我反正被坑了很久。 你只需要记住，这也许是目前 FastDFS 最新最稳定最简单坑最少的一个配置安装部署教程了。期间我也会把我踩的坑都放出来，我保证大家照着做就几乎不会有坑。哈哈… 安装 libfastcommon 和 FastDFS1.下载安装 libfastcommon ，这里是通过wget下载（我喜欢这种方式）。 wget https://github.com/happyfish100/libfastcommon/archive/V1.0.7.tar.gz 压 libfastcommon，命令： tar -zxvf V1.0.7.tar.gz 编译，进入libfastcommon-1.0.7目录，命令： cd libfastcommon-1.0.7./make.sh 安装，命令： ./make.sh install 2.下载安装 FastDFS，这里也是通过wget下载。 wget https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz 解压 FastDFS ，命令： tar -zxvf V5.05.tar.gz 编译，进入fastfds-5.05目录，命令： cd fastdfs-5.05./make.sh 安装，命令： ./make.sh install 配置 Tracker 服务 上述安装成功后，在/etc/目录下会有一个fdfs的目录，进入它。会看到三个.sample后缀的文件，这是作者给我们的示例文件，我们需要把其中的tracker.conf.sample文件改为tracker.conf配置文件并修改它。看命令： cp tracker.conf.sample tracker.conf vim tracker.conf 打开tracker.conf文件，只需要找到你只需要该这两个参数就可以了。 # the base path to store data and log files base_path=/data/fastdfs # HTTP port on this tracker server http.server_port=80 当然前提是你要有或先创建了/data/fastdfs目录。port=22122这个端口参数不建议修改，除非你已经占用它了。 修改完成保存并退出 vim ，这时候我们可以使用/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start来启动 Tracker服务，但是这个命令不够优雅，怎么做呢？使用ln -s 建立软链接： ln -s /usr/bin/fdfs_trackerd /usr/local/bin ln -s /usr/bin/stop.sh /usr/local/bin ln -s /usr/bin/restart.sh /usr/local/bin 这时候我们就可以使用service fdfs_trackerd start来优雅地启动 Tracker服务了，是不是比刚才带目录的命令好记太多了（懒是社会生产力）。你也可以启动过服务看一下端口是否在监听，命令： 启动服务：service fdfs_trackerd start 查看监听：netstat -unltp|grep fdfs 看到22122端口正常被监听后，这时候就算 Tracker服务安装成功啦！ 配置 Storage 服务现在开始配置 Storage 服务，由于我这是单机器测试，你把 Storage 服务放在多台服务器也是可以的，它有 Group(组)的概念，同一组内服务器互备同步，这里不再演示。直接开始配置，依然是进入/etc/fdfs的目录操作，首先进入它。会看到三个.sample后缀的文件，我们需要把其中的storage.conf.sample文件改为storage.conf配置文件并修改它。还看命令： cp storage.conf.sample storage.conf vim storage.conf 打开storage.conf文件后，找到这两个参数进行修改： # the base path to store data and log files base_path=/data/fastdfs/storage # store_path#, based 0, if store_path0 not exists, it&apos;s value is base_path # the paths must be exist store_path0=/data/fastdfs/storage #store_path1=/home/yuqing/fastdfs2 # tracker_server can ocur more than once, and tracker_server format is # &quot;host:port&quot;, host can be hostname or ip address tracker_server=192.168.198.129:22122 当然你的/data/fastdfs目录下要有storage文件夹，没有就创建一个，不然会报错的，日志以及文件都会在这个下面，启动时候会自动生成许多文件夹。stroage的port=23000这个端口参数也不建议修改，默认就好，除非你已经占用它了。 修改完成保存并退出 vim ，这时候我们依然想优雅地启动 Storage服务，带目录的命令不够优雅，这里还是使用ln -s 建立软链接： ln -s /usr/bin/fdfs_storaged /usr/local/bin 执行命令启动服务： service fdfs_storaged start netstat -unltp|grep fdfs 很好，22122 和 23000端口都在监听了，这个时候你去/data/fastdfs/storage文件夹下看的话，会出现一大堆文件夹，而且进去还有一大堆，哈哈，这就是存放文件的啦！下一篇会讲它们的作用和怎么存储的。 这就完成了？应该是完成了。我们安装配置并启动了 Tracker 和 Storage 服务，也没有报错了。那他俩是不是在通信呢？我们可以监视一下： /usr/bin/fdfs_monitor /etc/fdfs/storage.conf 这个时候你就可以进行上传测试 这篇文章只是进行了 FastDFS 的安装与配置，没有任何难度可言，只要按照步骤一步步走下去就可以搞定。可能中间过程中我们会由于不细心经历各种错误，只要仔细看日志信息都能解决掉的，你解决掉一个个错误的时候难道没有披荆斩棘战士般的感觉么？反正我没遇到错… 由于余老师在 V4.05 以后的版本就把内置 HTTP服务去掉了，推荐大家结合 Nginx 使用 fastdfs-nginx-module 模块，所以，就算这篇你测试上传成功了，你也访问不了，哈哈哈… 下一篇分布式文件系统 - FastDFS 配置 Nginx 模块及上传测试 中会进行配合 Nginx 完成全部FastDFS的安装测试上传下载等等全部工作。等着吧…","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://hero.triple.net.cn/tags/centos/"},{"name":"fastdfs","slug":"fastdfs","permalink":"https://hero.triple.net.cn/tags/fastdfs/"}]},{"title":"Java已知InputStream长度，将其转换为byte[]","slug":"java-e5-b7-b2-e7-9f-a5inputstream-e9-95-bf-e5-ba-a6-ef-bc-8c-e5-b0-86-e5-85-b6-e8-bd-ac-e6-8d-a2-e4-b8-babyte","date":"2017-07-31T08:02:19.000Z","updated":"2018-12-12T09:19:37.197Z","comments":true,"path":"2017/07/31/java-e5-b7-b2-e7-9f-a5inputstream-e9-95-bf-e5-ba-a6-ef-bc-8c-e5-b0-86-e5-85-b6-e8-bd-ac-e6-8d-a2-e4-b8-babyte/","link":"","permalink":"https://hero.triple.net.cn/2017/07/31/java-e5-b7-b2-e7-9f-a5inputstream-e9-95-bf-e5-ba-a6-ef-bc-8c-e5-b0-86-e5-85-b6-e8-bd-ac-e6-8d-a2-e4-b8-babyte/","excerpt":"","text":"###Java已知InputStream长度，将其转换为byte[] /** * Transfer java.io.InpuStream to byte array. * @param inStream, input stream of the uploaded file. * @param fileLength, the length of the file. * @return the byte array transferred from java.io.Inputstream. * @throws IOException occurred by the method read(byte\\[\\]) of java.io.InputStream. */ private byte\\[\\] getFileBuffer(InputStream inStream, long fileLength) throws IOException { byte\\[\\] buffer = new byte\\[256 * 1024\\]; byte\\[\\] fileBuffer = new byte\\[(int) fileLength\\]; int count = 0; int length = 0; while((length = inStream.read(buffer)) != -1){ for (int i = 0; i &lt; length; ++i) { fileBuffer\\[count + i\\] = buffer\\[i\\]; } count += length; } return fileBuffer; }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"byte","slug":"byte","permalink":"https://hero.triple.net.cn/tags/byte/"},{"name":"inputstream","slug":"inputstream","permalink":"https://hero.triple.net.cn/tags/inputstream/"}]},{"title":"Emacs 中替换 ^M","slug":"replace-m-in-emacs","date":"2017-07-23T03:36:55.000Z","updated":"2018-12-12T09:50:30.321Z","comments":true,"path":"2017/07/23/replace-m-in-emacs/","link":"","permalink":"https://hero.triple.net.cn/2017/07/23/replace-m-in-emacs/","excerpt":"","text":"以为简单的 m-x repl RET s RET 再输入_^M_ 替换一下就可以,但是很快发现,这个办法根本不行, _^M_ 这个根本不是输入的研究了一下, 终于找到了办法: 1. M-S &lt; # 到文档的最开始处 2. M-x replace-string RET C-q C-m RET RET 这样就ok了, 注意上面的C-q C-m就是换行符的生成方法,而不是简单的输入_^M_. enjoy.","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://hero.triple.net.cn/tags/emacs/"}]},{"title":"使用screen命令长期执行远程命令","slug":"e4-bd-bf-e7-94-a8screen-e5-91-bd-e4-bb-a4-e9-95-bf-e6-9c-9f-e6-89-a7-e8-a1-8c-e8-bf-9c-e7-a8-8b-e5-91-bd-e4-bb-a4","date":"2017-07-19T07:41:25.000Z","updated":"2018-12-12T09:05:36.324Z","comments":true,"path":"2017/07/19/e4-bd-bf-e7-94-a8screen-e5-91-bd-e4-bb-a4-e9-95-bf-e6-9c-9f-e6-89-a7-e8-a1-8c-e8-bf-9c-e7-a8-8b-e5-91-bd-e4-bb-a4/","link":"","permalink":"https://hero.triple.net.cn/2017/07/19/e4-bd-bf-e7-94-a8screen-e5-91-bd-e4-bb-a4-e9-95-bf-e6-9c-9f-e6-89-a7-e8-a1-8c-e8-bf-9c-e7-a8-8b-e5-91-bd-e4-bb-a4/","excerpt":"","text":"使用 screen 命令长期执行远程命令经常需要登录到 linux 里执行一些长时间运行的命令， 后台执行的方法有很多，包括 nhup &amp; 等等 但是这些不支持全部的功能，比如我执行一个命令，需要在开始时接受用户输入，比如 密码、是否确认执行 这个时候比较适合用 screen 最常用的命令： 开启一个名为 task1 的 screen：screen -S task1 这时可以看到终端闪了一下，然后屏幕变成干干净净的了，其实标题行还显示着 screen 0 ×××× 等信息 即表示已经进入了screen的 Session 中了 然后就可以在这里执行任意的命令，和普通终端一模一样， 如果执行了一个需要很久才能结束的命令 ，又怕中途 SSH 断掉而中断命令， 可以在screen 窗口直接按键： Ctrl+a d ↑ 让 screen 进入 Detached 模式（将任务（Session）转移到后台） 当你需要再次进入screen以查看刚刚的命令执行的怎么样了， 可以先 list 一下： screen -ls 现在会显示出所有正在执行的命令，比如 [root@SJHL199-29 ~]# screen -ls There is a screen on: 32353.task1 (Detached) 1 Socket in /var/run/screen/S-root. 然后使用 screen -r 32353 ↑进入刚才执行的命令/session中使用 Ctrl + d 可以终止当前窗口 常用的 screen 命令 按键方式 意义 C-a ? 显示所有键绑定信息 C-a w 显示所有窗口列表 C-a C-a 切换到之前显示的窗口 C-a c 创建一个新的运行shell的窗口并切换到该窗口 C-a n 切换到下一个窗口 C-a p 切换到前一个窗口(与C-a n相对) C-a 0..9 切换到窗口0..9 C-a a 发送 C-a到当前窗口 C-a d 暂时断开screen会话 C-a k 杀掉当前窗口 C-a [ 进入拷贝/回滚模式","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"screen","slug":"screen","permalink":"https://hero.triple.net.cn/tags/screen/"},{"name":"ssh","slug":"ssh","permalink":"https://hero.triple.net.cn/tags/ssh/"},{"name":"后台","slug":"后台","permalink":"https://hero.triple.net.cn/tags/后台/"}]},{"title":"PHP 命令行输出颜色","slug":"php-terminal-using-colors","date":"2017-07-13T01:49:05.000Z","updated":"2018-12-12T09:53:38.087Z","comments":true,"path":"2017/07/13/php-terminal-using-colors/","link":"","permalink":"https://hero.triple.net.cn/2017/07/13/php-terminal-using-colors/","excerpt":"","text":"有时候会使用CLI模式运行一些PHP程序，特别是在执行一些任务的时候。 CLI 有不会超时的特点，在执行一些不在意UI 的功能时很适合 而且还不用考虑UI设计。 下面的代码实现了使用命令行时，通过颜色来标识字符串 先看源码： &lt;?php class Colors { private $foreground_colors = array(); private $background_colors = array(); public function __construct() { // Set up shell colors $this-&gt;foreground_colors[&apos;black&apos;] = &apos;0;30&apos;; $this-&gt;foreground_colors[&apos;dark_gray&apos;] = &apos;1;30&apos;; $this-&gt;foreground_colors[&apos;blue&apos;] = &apos;0;34&apos;; $this-&gt;foreground_colors[&apos;light_blue&apos;] = &apos;1;34&apos;; $this-&gt;foreground_colors[&apos;green&apos;] = &apos;0;32&apos;; $this-&gt;foreground_colors[&apos;light_green&apos;] = &apos;1;32&apos;; $this-&gt;foreground_colors[&apos;cyan&apos;] = &apos;0;36&apos;; $this-&gt;foreground_colors[&apos;light_cyan&apos;] = &apos;1;36&apos;; $this-&gt;foreground_colors[&apos;red&apos;] = &apos;0;31&apos;; $this-&gt;foreground_colors[&apos;light_red&apos;] = &apos;1;31&apos;; $this-&gt;foreground_colors[&apos;purple&apos;] = &apos;0;35&apos;; $this-&gt;foreground_colors[&apos;light_purple&apos;] = &apos;1;35&apos;; $this-&gt;foreground_colors[&apos;brown&apos;] = &apos;0;33&apos;; $this-&gt;foreground_colors[&apos;yellow&apos;] = &apos;1;33&apos;; $this-&gt;foreground_colors[&apos;light_gray&apos;] = &apos;0;37&apos;; $this-&gt;foreground_colors[&apos;white&apos;] = &apos;1;37&apos;; $this-&gt;background_colors[&apos;black&apos;] = &apos;40&apos;; $this-&gt;background_colors[&apos;red&apos;] = &apos;41&apos;; $this-&gt;background_colors[&apos;green&apos;] = &apos;42&apos;; $this-&gt;background_colors[&apos;yellow&apos;] = &apos;43&apos;; $this-&gt;background_colors[&apos;blue&apos;] = &apos;44&apos;; $this-&gt;background_colors[&apos;magenta&apos;] = &apos;45&apos;; $this-&gt;background_colors[&apos;cyan&apos;] = &apos;46&apos;; $this-&gt;background_colors[&apos;light_gray&apos;] = &apos;47&apos;; } // Returns colored string public function getColoredString($string, $foreground_color = null, $background_color = null) { $colored_string = &quot;&quot;; // Check if given foreground color found if (isset($this-&gt;foreground_colors[$foreground_color])) { $colored_string .= &quot;33[&quot; . $this-&gt;foreground_colors[$foreground_color] . &quot;m&quot;; } // Check if given background color found if (isset($this-&gt;background_colors[$background_color])) { $colored_string .= &quot;33[&quot; . $this-&gt;background_colors[$background_color] . &quot;m&quot;; } // Add string and end coloring $colored_string .= $string . &quot;33[0m&quot;; return $colored_string; } // Returns all foreground color names public function getForegroundColors() { return array_keys($this-&gt;foreground_colors); } // Returns all background color names public function getBackgroundColors() { return array_keys($this-&gt;background_colors); } } ?&gt; 使用方式很简单， 调用$colors-&gt;getColoredString([字符串]，[前景色]，[背景色]);方法就可以： &lt;?php // Create new Colors class $colors = new Colors(); // Test some basic printing with Colors class echo $colors-&gt;getColoredString(&quot;Testing Colors class, this is purple string on yellow background.&quot;, &quot;purple&quot;, &quot;yellow&quot;) . &quot;n&quot;; echo $colors-&gt;getColoredString(&quot;Testing Colors class, this is blue string on light gray background.&quot;, &quot;blue&quot;, &quot;light_gray&quot;) . &quot;n&quot;; echo $colors-&gt;getColoredString(&quot;Testing Colors class, this is red string on black background.&quot;, &quot;red&quot;, &quot;black&quot;) . &quot;n&quot;; echo $colors-&gt;getColoredString(&quot;Testing Colors class, this is cyan string on green background.&quot;, &quot;cyan&quot;, &quot;green&quot;) . &quot;n&quot;; echo $colors-&gt;getColoredString(&quot;Testing Colors class, this is cyan string on default background.&quot;, &quot;cyan&quot;) . &quot;n&quot;; echo $colors-&gt;getColoredString(&quot;Testing Colors class, this is default string on cyan background.&quot;, null, &quot;cyan&quot;) . &quot;n&quot;; ?&gt; 如果你想打印出所有的颜色，参考下面的代码： 1234567891011121314151617181920212223242526272829&lt;?php22// Create new Colors class22$colors = new Colors();22// Get Foreground Colors22$fgs = $colors-&gt;getForegroundColors();22// Get Background Colors22$bgs = $colors-&gt;getBackgroundColors();22// Loop through all foreground and background colors22$count = count($fgs);22for ($i = 0; $i &lt; $count; $i++) &#123;222echo $colors-&gt;getColoredString(&quot;Test Foreground colors&quot;, $fgs[$i]) . &quot;t&quot;;222if (isset($bgs[$i])) &#123;2222echo $colors-&gt;getColoredString(&quot;Test Background colors&quot;, null, $bgs[$i]);222&#125;222echo &quot;n&quot;;22&#125;22echo &quot;n&quot;;22// Loop through all foreground and background colors22foreach ($fgs as $fg) &#123;222foreach ($bgs as $bg) &#123;2222echo $colors-&gt;getColoredString(&quot;Test Colors&quot;, $fg, $bg) . &quot;t&quot;;222&#125;222echo &quot;n&quot;;22&#125; ?&gt;","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"命令行","slug":"命令行","permalink":"https://hero.triple.net.cn/tags/命令行/"},{"name":"terminal","slug":"terminal","permalink":"https://hero.triple.net.cn/tags/terminal/"}]},{"title":"Linux中记录终端（Terminal）输出到文本文件","slug":"linux-e4-b8-ad-e8-ae-b0-e5-bd-95-e7-bb-88-e7-ab-af-ef-bc-88terminal-ef-bc-89-e8-be-93-e5-87-ba-e5-88-b0-e6-96-87-e6-9c-ac-e6-96-87-e4-bb-b6","date":"2017-07-11T06:02:26.000Z","updated":"2018-12-12T09:20:50.271Z","comments":true,"path":"2017/07/11/linux-e4-b8-ad-e8-ae-b0-e5-bd-95-e7-bb-88-e7-ab-af-ef-bc-88terminal-ef-bc-89-e8-be-93-e5-87-ba-e5-88-b0-e6-96-87-e6-9c-ac-e6-96-87-e4-bb-b6/","link":"","permalink":"https://hero.triple.net.cn/2017/07/11/linux-e4-b8-ad-e8-ae-b0-e5-bd-95-e7-bb-88-e7-ab-af-ef-bc-88terminal-ef-bc-89-e8-be-93-e5-87-ba-e5-88-b0-e6-96-87-e6-9c-ac-e6-96-87-e4-bb-b6/","excerpt":"","text":"一，如何把命令运行的结果保存到文件当中?这个问题太简单了，大家都知道，用 > 把输出转向就可以了 例子: [lhd@hongdi ~]$ ls &gt; ls.txt [lhd@hongdi ~]$ cat ls.txt 1.gtkrc-2.0 2009 a amsn_received a.tar.gz 说明: > 是把输出转向到指定的文件，如文件已存在的话也会重新写入，文件原内容不会保留 > 是把输出附向到文件的后面，文件原内容会保留下来 二，如何能在输出信息的同时把信息记录到文件中?我们在上面的例子中可以看到，我们使用输出转向，命令在终端上的输出转向到了文件中，但如果我希望能同时在终端上看到输出信息怎么办？ 我们可以使用这个命令: tee 解释一下tee的作用: read from standard input and write to standard output and files 它从标准输入读取内容并将其写到标准输出和文件中 看例子: [lhd@hongdi ~]$ ls | tee ls_tee.txt 1.gtkrc-2.0 2009 a amsn_received a.tar.gz [lhd@hongdi ~]$ cat ls_tee.txt 1.gtkrc-2.0 2009 a amsn_received a.tar.gz 备注：使用 tee时,如果想保留目标文件原有的内容怎么办？ 可以使用 -a参数 -a, --append append to the given FILEs, do not overwrite 附加至给出的文件，而不是覆盖它 三，多个命令的输出都需要记录，可以用scriptscript这个命令很强大，可以记录终端的所有输出到相应的文件中 看例子: [lhd@hongdi ~]$ script Script. started, file is typescript [lhd@hongdi ~]$ ls 1.gtkrc-2.0 c.tar kmess-2.0alpha2.tar.gz secpanel-0.5.3-1.noarch.rpm 2009 DownZipAction.php kmesslog secpanel-0.5.4-2.noarch.rpm [lhd@hongdi ~]$ exit exit Script. done, file is typescript [lhd@hongdi ~]$ cat typescript Script. started on 2009年02月08日 星期日 18时56分52秒 [lhd@hongdi ~]$ ls 1.gtkrc-2.0 c.tar kmess-2.0alpha2.tar.gz secpanel-0.5.3-1.noarch.rpm 2009 DownZipAction.php kmesslog secpanel-0.5.4-2.noarch.rpm [lhd@hongdi ~]$ exit exit Script. done on 2009年02月08日 星期日 18时57分00秒 说明: 1 我们在启动script时没有指定文件名，它会自动记录到当前目录下一个名为 typescript的文件中。也可以用 -a参数 指定文件名 例子: [lhd@hongdi ~]$ script. -a example.txt Script. started, file is example.txt 此时终端的输出内容被记录到 example.txt这个文件中 2 退出script时，用exit 感到奇怪吗？事实上script就是启动了一个shell 看一下ps auxfww 的信息就知道了 lhd 17738 0.1 3.2 152028 33328 ? Sl 18:30 0:03 /usr/bin/konsole lhd 17740 0.0 0.1 6372 1720 pts/1 Ss 18:30 0:00 _ /bin/bash lhd 17900 0.0 0.0 5344 628 pts/1 S 19:01 0:00 | _ script lhd 17901 0.0 0.0 5348 464 pts/1 S 19:01 0:00 | _ script lhd 17902 0.5 0.1 6372 1688 pts/2 Ss 19:01 0:00 | _ bash -i 3,查看typescript的内容，可以看到它同时记录下了script的启动和结束时间 四，用script录制并播放session的内容我们可以用 script把整个终端会话的所有操作和输出录制下来，然后再用scriptreplay进行播放。 如果录制时记录下来了操作时的时间数据，那么播放时和操作时的使用时间完全相同。 这个很有用吧，比如：我们可以把安装软件时编译的过程记录下来，然后给别人进行演示 看例子: [lhd@hongdi ~]$ script. -t 2&gt;example.time -a example.txt Script. started, file is example.txt [lhd@hongdi ~]$ ls 说明: -t 2&gt;example.time -t是把时间数据输出到标准错误(standard error)，所以我们使用 2&gt;example.time 把数据转向到 example.time这个文件当中 如何播放所记录的内容? 第一步：安装scriptreplay 下载 wget ftp://ftp.kernel.org/pub/linux/utils/util-linux/util-linux-2.12r.tar.bz2 解压 tar -jxvf util-linux-2.12r.tar.bz2 之后复制文件到系统的命令目录中即可 [root@hongdi 下载]# cp util-linux-2.12r/misc-utils/scriptreplay.pl /usr/bin/scriptreplay [root@hongdi 下载]# chmod 755 /usr/bin/scriptreplay 备注: fedora 10的util-linux-ng-2.14.1-3.2.fc10.i386.rpm 此包中已包含 scriptreplay,已无需另行安装 第二步：播放所录制的session内容 [lhd@hongdi ~]$ scriptreplay example1.time example1.txt [lhd@hongdi ~]$ ls 1.gtkrc-2.0 c.tar jeffray_lee@hotmail.com pass [lhd@hongdi ~]$ abcd bash: abcd: command not found [lhd@hongdi ~]$ exit","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"终端","slug":"终端","permalink":"https://hero.triple.net.cn/tags/终端/"},{"name":"保存","slug":"保存","permalink":"https://hero.triple.net.cn/tags/保存/"}]},{"title":"mysql在like中使用参数化查询","slug":"mysql-e5-9c-a8like-e4-b8-ad-e4-bd-bf-e7-94-a8-e5-8f-82-e6-95-b0-e5-8c-96-e6-9f-a5-e8-af-a2","date":"2017-07-10T11:06:09.000Z","updated":"2018-12-12T09:20:50.358Z","comments":true,"path":"2017/07/10/mysql-e5-9c-a8like-e4-b8-ad-e4-bd-bf-e7-94-a8-e5-8f-82-e6-95-b0-e5-8c-96-e6-9f-a5-e8-af-a2/","link":"","permalink":"https://hero.triple.net.cn/2017/07/10/mysql-e5-9c-a8like-e4-b8-ad-e4-bd-bf-e7-94-a8-e5-8f-82-e6-95-b0-e5-8c-96-e6-9f-a5-e8-af-a2/","excerpt":"","text":"参数化查询是防注入最简单有效的 方式了 推荐在所有需要交互的语句中使用， 只要在where子句中添加一个问号，然后在execute时赋值就好了。 但是 Like 这个语法有个例外，需要这么写:select * from a where a.name like concat(&#39;%&#39;,?,&#39;%&#39;) or a.mobile like concat(&#39;%&#39;,?,&#39;%&#39;) 记住：问号(?)上面不用加引号","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"参数化","slug":"参数化","permalink":"https://hero.triple.net.cn/tags/参数化/"},{"name":"参数化查询","slug":"参数化查询","permalink":"https://hero.triple.net.cn/tags/参数化查询/"}]},{"title":"msyql 快速创建用户及数据库","slug":"create-user-and-database-in-mysql","date":"2017-07-10T11:01:53.000Z","updated":"2018-12-12T09:55:43.109Z","comments":true,"path":"2017/07/10/create-user-and-database-in-mysql/","link":"","permalink":"https://hero.triple.net.cn/2017/07/10/create-user-and-database-in-mysql/","excerpt":"","text":"下面的代码快速建立了一个wordpress数据库，以及一个只能在本地登录的用户wordpress 密码被设置为password，并且拥有对wordpress数据库的所有权限， see it： 123456CREATE DATABASE wordpress;GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTERON wordpress.*TO wordpress@localhostIDENTIFIED BY &apos;password&apos;;FLUSH PRIVILEGES;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"}]},{"title":"解决lxde桌面环境下Google-Chrome不在菜单中显示的问题","slug":"resolve-chrome-not-appear-in-menus-under-lxde","date":"2017-07-10T07:09:18.000Z","updated":"2018-12-18T08:28:52.783Z","comments":true,"path":"2017/07/10/resolve-chrome-not-appear-in-menus-under-lxde/","link":"","permalink":"https://hero.triple.net.cn/2017/07/10/resolve-chrome-not-appear-in-menus-under-lxde/","excerpt":"","text":"用的是 Debian8.x LXDE 环境， 装好了Google Chrome，重启。然后发现菜单中并没有出现熟悉的 Chrome 应用，并且在 网络/互联网 选项中也没有 Google 的身影 解决办法： 先看看当前登录用户的目录下有没有chrome的menu文件， 比如，我下面的截图显示的 是 mslagee 这个用户的目录中存在的 chrome 的配置 然后将 user-chrome-apps.menu 配置文件拷贝至 /etc/xdg/menus 目录 系统菜单立刻就能看到 Chrome 的身影了","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"google","slug":"google","permalink":"https://hero.triple.net.cn/tags/google/"},{"name":"chrome","slug":"chrome","permalink":"https://hero.triple.net.cn/tags/chrome/"},{"name":"lxde","slug":"lxde","permalink":"https://hero.triple.net.cn/tags/lxde/"}]},{"title":"Linux 下面配置 Oracle JDK","slug":"linux-e4-b8-8b-e9-9d-a2-e9-85-8d-e7-bd-ae-oracle-jdk","date":"2017-07-07T02:55:34.000Z","updated":"2018-12-12T09:20:50.250Z","comments":true,"path":"2017/07/07/linux-e4-b8-8b-e9-9d-a2-e9-85-8d-e7-bd-ae-oracle-jdk/","link":"","permalink":"https://hero.triple.net.cn/2017/07/07/linux-e4-b8-8b-e9-9d-a2-e9-85-8d-e7-bd-ae-oracle-jdk/","excerpt":"","text":"关于这个我好像已经写了无数次了。。。。 假设你已经下载到 Oracle 的JDK 安装包了： mv jdk-8u131-linux-x64.tar.gz /usr/lib/jvm/ cd /usr/lib/jvm/ tar xzf jdk-8u131-linux-x64.tar.gz ln -s jdk1.8.0_131/ java-8 vi /etc/profile # 这里注意， 按 G 到文件最后，然后按 a 进入 Insert 模式，把下面的配置粘贴进去， （Shift+Insert 或者 Ctrl+Shift + v） export JAVA_HOME=/usr/lib/jvm/java-8 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH 接下来，配置默认JDK版本 update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300 update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300 update-alternatives --config java 根据你想要的版本选择序号，然后回车就好，通常是最后一个（如果系统中已有open JDK的话）","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://hero.triple.net.cn/tags/jdk/"}]},{"title":"owncloud 配置小记","slug":"owncloud-e9-85-8d-e7-bd-ae-e5-b0-8f-e8-ae-b0","date":"2017-07-06T03:47:58.000Z","updated":"2018-12-12T09:21:19.294Z","comments":true,"path":"2017/07/06/owncloud-e9-85-8d-e7-bd-ae-e5-b0-8f-e8-ae-b0/","link":"","permalink":"https://hero.triple.net.cn/2017/07/06/owncloud-e9-85-8d-e7-bd-ae-e5-b0-8f-e8-ae-b0/","excerpt":"","text":"本文记录了自用 owncloud 的配置情况， 目前我用的是 10.0.2，界面比原来漂亮很多，用起来似乎也更舒服了 官方文档其实非常全，英文好的还是仔细读读原文吧， 这里是我个人的服务器配置： PHP 环境变量： 除了www.conf 中的owner-user/owner-group、listen 之外，还要配置环境变量 我的： vim /etc/php/7.0/fpm/pool.d/www.conf 搜索 HOSTNAME 可以找到类似下面的段落： ;env[HOSTNAME] = $HOSTNAME ;env[PATH] = /usr/local/bin:/usr/bin:/bin ;env[TMP] = /tmp ;env[TMPDIR] = /tmp ;env[TEMP] = /tmp 把前面的注释（;）去掉，然后 systemctl restart php7.0-fpm.service 重启 PHP-FPM nginx 的配置： # /etc/nginx/nginx.conf 没改动任何配置项 # vim /etc/nginx/site-enabled/default : upstream php-handler { server unix:/run/php/php7.0-fpm.sock; # 本机 php-fpm handler 路径 } # ==== SSL 证书的配置 ==== # ...... # ==== end SSL 证书的配置 end ==== # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this topic first. #add_header Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options &quot;SAMEORIGIN&quot;; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; # Path to the root of your installation root /var/www/html/owncloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you&apos;re planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } location ^~ /.well-known/acme-challenge { } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_page 403 /core/templates/403.php; error_page 404 /core/templates/404.php; location / { rewrite ^ /index.php$uri; } location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ { return 404; } location ~ ^/(?:.|autotest|occ|issue|indie|db_|console) { return 404; } location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34]).php(?:$|/) { fastcgi_split_path_info ^(.+.php)(/.*)$; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; # fastcgi_param HTTPS on; fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice fastcgi_param front_controller_active true; fastcgi_pass php-handler; fastcgi_intercept_errors on; fastcgi_request_buffering off; #Available since NGINX 1.7.11 } location ~ ^/(?:updater|ocs-provider)(?:$|/) { try_files $uri $uri/ =404; index index.php; } # Adding the cache control header for js and css files # Make sure it is BELOW the PHP block location ~* .(?:css|js)$ { try_files $uri /index.php$uri$is_args$args; add_header Cache-Control &quot;max-age=15778463&quot;; # Add headers to serve security related headers (It is intended to have those duplicated to the ones above) # Before enabling Strict-Transport-Security headers please read into this topic first. #add_header Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options &quot;SAMEORIGIN&quot;; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; # Optional: Don&apos;t log access to assets access_log off; } location ~* .(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ { try_files $uri /index.php$uri$is_args$args; # Optional: Don&apos;t log access to other assets access_log off; } } SSL 证书的配置块： server { listen 80 default_server; listen [::]:80 default_server; # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response. return 301 https://$host$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate ssl_certificate /path/to/signed_cert_plus_intermediates; # crt 文件的路径，该文件权限最好设置成 400 ssl_certificate_key /path/to/private_key; # key 文件的路径，该文件权限最好设置成 400 ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits ssl_dhparam /path/to/dhparam.pem; # 没有，注释掉。。。 # intermediate configuration. tweak to your needs. ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers &apos;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS&apos;; ssl_prefer_server_ciphers on; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; ## verify chain of trust of OCSP response using Root CA and Intermediate certs ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates; # 没有，注释掉。。。 resolver ; # 这里写域名的dns地址，比如我这个域名的 dns31.hichina.com dns32.hichina.com .... }","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://hero.triple.net.cn/tags/nginx/"},{"name":"owncloud","slug":"owncloud","permalink":"https://hero.triple.net.cn/tags/owncloud/"},{"name":"https","slug":"https","permalink":"https://hero.triple.net.cn/tags/https/"},{"name":"ssl","slug":"ssl","permalink":"https://hero.triple.net.cn/tags/ssl/"}]},{"title":"PHP数组转换为javascript 数组的方法","slug":"php-e6-95-b0-e7-bb-84-e8-bd-ac-e6-8d-a2-e4-b8-bajavascript-e6-95-b0-e7-bb-84-e7-9a-84-e6-96-b9-e6-b3-95","date":"2017-07-04T10:28:40.000Z","updated":"2018-12-12T09:22:01.253Z","comments":true,"path":"2017/07/04/php-e6-95-b0-e7-bb-84-e8-bd-ac-e6-8d-a2-e4-b8-bajavascript-e6-95-b0-e7-bb-84-e7-9a-84-e6-96-b9-e6-b3-95/","link":"","permalink":"https://hero.triple.net.cn/2017/07/04/php-e6-95-b0-e7-bb-84-e8-bd-ac-e6-8d-a2-e4-b8-bajavascript-e6-95-b0-e7-bb-84-e7-9a-84-e6-96-b9-e6-b3-95/","excerpt":"","text":"需要从PHP 后台读取一些数据到前台的js中，然后使用图表显示，。 下面是转换 PHP 数组到 js 数组 的方法（之一）： var js_array = JSON.parse(&apos;&apos;); 需要注意的几点： 1. JSON.parse 方法内的数组需要用引号，并且是单引号包起来 2. 别忘记了 echo 3. 直接 echo json_encode($arr_php); 是没用的，我就这么妄想过。。。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"转换","slug":"转换","permalink":"https://hero.triple.net.cn/tags/转换/"},{"name":"数组","slug":"数组","permalink":"https://hero.triple.net.cn/tags/数组/"}]},{"title":"在 Debian 下安装 WordPress","slug":"745","date":"2017-07-04T06:44:42.000Z","updated":"2018-12-12T08:57:54.157Z","comments":true,"path":"2017/07/04/745/","link":"","permalink":"https://hero.triple.net.cn/2017/07/04/745/","excerpt":"","text":"Basic Installation guide for Wheezy# apt-get install wordpress curl apache2 mysql-server Set the mysql admin root user password when prompted Create a site# nano /etc/apache2/sites-available/wp.conf Add this content: Alias /wp/wp-content /var/lib/wordpress/wp-content Alias /wp /usr/share/wordpress &lt;Directory /usr/share/wordpress&gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Order allow,deny Allow from all &lt;/Directory&gt; &lt;Directory /var/lib/wordpress/wp-content&gt; Options FollowSymLinks Order allow,deny Allow from all &lt;/Directory&gt; For Apache 2.4 (Jessie) you’ll need a slightly different site configuration: # nano /etc/apache2/sites-available/wp.conf add this content: Alias /wp/wp-content /var/lib/wordpress/wp-content Alias /wp /usr/share/wordpress &lt;Directory /usr/share/wordpress&gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted &lt;/Directory&gt; &lt;Directory /var/lib/wordpress/wp-content&gt; Options FollowSymLinks Require all granted &lt;/Directory&gt; Enable the site# a2ensite wp Restart the webserver # service apache2 reload Create /etc/wordpress/config-$DM.php. $DM is the domain name e.g. if the fully qualified domain name is www.debianwordpress.dev, create one of the following files: /etc/wordpress/config-www.debianwordpress.dev.php (this is the default, use it if you are unsure) /etc/wordpress/config-debianwordpress.dev.php (this is used for multisite with subdomains) /etc/wordpress/config-default.php (this is used as a fallback if no other file matches your domain name) WordPress searches in the above order and uses the first configuration file it can find. The domain name is taken from the HTTP-Request of your browser. That way you may be able to define different configuration files for different domains you are hosting. # nano /etc/wordpress/config-www.debianwordpress.dev.php Add this content:- &lt;?php define(‘DB_NAME’, ‘wordpress’); define(‘DB_USER’, ‘wordpress’); define(‘DB_PASSWORD’, ‘password’); define(‘DB_HOST’, ‘localhost’); define(‘WP_CONTENT_DIR’, ‘/var/lib/wordpress/wp-content’); ?&gt; replace password with a suitably secure password Create a file to hold the database creation instructions # nano ~/wp.sql Add this content:- CREATE DATABASE wordpress;GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTERON wordpress.*TO wordpress@localhostIDENTIFIED BY ‘password’;FLUSH PRIVILEGES; replace password with your “suitably secure password” Create the database:- # cat ~/wp.sql | mysql –defaults-extra-file=/etc/mysql/debian.cnf Navigate to the wordpress directory in browser e.g.:- http://debianwordpress.dev/wp which redirects to http://debianwordpress.dev/wp/wp-admin/install.php where you’ll see the “classic” wordpress 5 minute install page (actually a 5 second install thanks to the Debian packaging) replace debianwordpress.dev with your domain name (or localhost if running on the same box as your browser). At time of writing this provides WordPress v3.6.1. WordPress v3.7.1 is available in Testing and Unstable. I haven’t tested it but it should install fine on Wheezy. Upgrading the installed WordPress versionFor keep your WordPress up to date and receive security fixes use Debian package manager: # apt-get update &amp;&amp; apt-get upgrade If you would like to use a more recent version of WordPress, consider using Backports or Debian testing. An alternate installation methodI believe this method conforms more with how the maintainer recommends it should be done. Various sources are drawn upon using this method, and it is also affected by a few bugs as at this writing. It is basically centric around a “kind of” multisite install, but I recommend this method even for a single blog, otherwise when you decide down the track to have more than one and share the packages’ codebase, you’ll have a fair bit of work on your hands. The key useful script here is /usr/share/doc/wordpress/examples/setup-mysql. This gem does a few things: Creates a WordPress config file under /etc/wordpress Creates the WordPress database and user Sets up a wp-content structure under /srv/www/wp-content/DOMAIN (this is key for a non-WordPress multisite install, which is covered more below) Install required packages# apt-get install wordpress apache2 mysql-server Run the helper scriptNow run /usr/share/doc/wordpress/examples/setup-mysql, passing an argument of your site name; eg. myblog.com. You will most probably need other arguments too – just try an initial -h to get help. At this point, as per above, you should have a database created for you, and the /etc/wordpress/config-myblog.com.php config file. Peruse that and sanity check it. Create the Apache siteQuoting /usr/share/doc/wordpress/examples/apache.conf: There are several ways to setup Wordpress &amp; Apache in Debian. However the maintainer’s recommended way with the helper script setup-mysql uses: ## Virtual host VirtualDocumentRoot NameVirtualHost *:80 &lt;VirtualHost *:80&gt; UseCanonicalName Off VirtualDocumentRoot /usr/share/wordpress Options All # wp-content in /srv/www/wp-content/$0 RewriteEngine On RewriteRule ^/wp-content/(.*)$ /srv/www/wp-content/%{HTTP_HOST}/$1 &lt;/VirtualHost&gt; For this configuration to work you’ll also need to have mod_rewrite and mod_vhost_alias loaded and working in Apache. To enable these modules run # a2enmod rewrite &amp;&amp; a2enmod vhost_alias &amp;&amp; service apache2 restart Place this config into something like /etc/apache2/sites-available/myblog.com and modify according to your needs (IP-based virtual host, name-based, logging, etc.) If you’re using any Wordpress functionality that requires URL rewriting (such as permalinks), then you will also need something like this in your Apache config: RewriteRule ^index.php$ - \\[L\\] RewriteCond /usr/share/wordpress%{REQUEST_URI} !-f RewriteCond /usr/share/wordpress%{REQUEST_URI} !-d RewriteRule . /usr/share/wordpress/index.php \\[L\\] # Also needed if using PHP-FPM / Fast-CGI RewriteCond %{REQUEST_URI} !^/php5-fcgi/* The above rewrite conditions rely on Apache finding the required files in /usr/share/wordpress for non-permalinks (such as wp-admin). This may require the following line to ensure it finds the index file when requesting /wp-admin/ DirectoryIndex index.php Final reading before actual configurationNow would be a great time to read /usr/share/doc/wordpress/README.Debian if you haven’t already. All the rest of the pieces should fall into place once you do. Amongst other things, it explains the great way that the Debian WordPress package utilises the WordPress wp-config.php framework, and more importantly, how to handle the infamous “themes” and “plugins” directories in a WordPress install. The key point is that by symlinking under /var/lib/wordpress, users better abide by the FilesystemHierarchyStandard, and can use the in-app upgrade mechanisms of WordPress to upgrade plugins and themes, without clobbering the package, and risking server security. It also discusses the two choices regarding multisite installs, of which this here describes the non-WordPress version. Enable the Apache siteNow we enable the Apache site config made earlier using a2ensite, which basically just creates a symlink in /etc/apache2/sites-enabled from sites-available, then reload Apache: # a2ensite myblog.com# service apache2 reload Configure WordPressNow, browse to your new domain, and follow the normal WP configuration process, and you should be done. IssuesSadly at this point, there are some issues with symlinking, and messing around generally with WP_CONTENT_DIR. The main bug is being tracked at http://core.trac.wordpress.org/ticket/16953. At this point, basically a fair few things break, especially if plugin or theme authors don’t do things right when determining correct filesystem and URI paths to use. There seems no easy fix right now, other than not using symlinks or non-standard (but configurable!) paths. See also Sample configurations can be found in /usr/share/doc/wordpress/examples/ Debian specific instructions are /usr/share/doc/wordpress/README.Debian LAMP External links Home Page WordPress Online Documentation WordPress Manual Update Guide WordPress (最后修改时间 2017-06-10 18:26:06)","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"debian","slug":"debian","permalink":"https://hero.triple.net.cn/tags/debian/"},{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"wordpress","slug":"wordpress","permalink":"https://hero.triple.net.cn/tags/wordpress/"}]},{"title":"PHP 使用 phpmailer 发送邮件","slug":"php-e4-bd-bf-e7-94-a8-phpmailer-e5-8f-91-e9-80-81-e9-82-ae-e4-bb-b6","date":"2017-07-03T08:02:23.000Z","updated":"2018-12-12T09:22:01.184Z","comments":true,"path":"2017/07/03/php-e4-bd-bf-e7-94-a8-phpmailer-e5-8f-91-e9-80-81-e9-82-ae-e4-bb-b6/","link":"","permalink":"https://hero.triple.net.cn/2017/07/03/php-e4-bd-bf-e7-94-a8-phpmailer-e5-8f-91-e9-80-81-e9-82-ae-e4-bb-b6/","excerpt":"","text":"PHP 使用 phpmailer 发送邮件 必须文件： 1. class.phpmailer.php; 2. class.smtp.php; 代码摘录： require_once(&quot;class.phpmailer.php&quot;); //下载的文件必须放在该文件所在目录 $mail = new PHPMailer(); $mail-&gt;SMTPDebug = 0; // debug or not $mail = new PHPMailer(); //建立邮件发送类 $address = &quot;&quot;; $mail-&gt;IsSMTP(); // 使用SMTP方式发送 $mail-&gt;SMTPAuth = true; // 启用SMTP验证功能 $mail-&gt;SMTPSecure = &quot;tls&quot;; $mail-&gt;Host = &quot;smtp.office365.com&quot;; // 您的企业邮局域名 $mail-&gt;Port = 587; $mail-&gt;Username = &quot;service@example.com&quot;; // 邮局用户名(请填写完整的email地址) $mail-&gt;Password = &quot;aaaa123456&quot;; // 邮局密码 $mail-&gt;CharSet=&quot;utf-8&quot;; $mail-&gt;Encoding = &quot;base64&quot;; $mail-&gt;From = &quot;service@example.com&quot;; //邮件发送者email地址 $mail-&gt;FromName = &quot;service&quot;; $mail-&gt;IsHTML(true); $mail-&gt;Subject = $subject; //邮件标题 $mail-&gt;Body = $body; //邮件内容 $mail-&gt;AddAddress(&quot;user@xxxxxx.com&quot;, &quot;user&quot;); // 收件人地址 $mail-&gt;Send(); class.phpmailer.php &amp; class.smtp.php 下载地址： http://happiz.qiniu.cdn.msla.top/class.phpmailer.php http://happiz.qiniu.cdn.msla.top/class.smtp.php","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"邮件","slug":"邮件","permalink":"https://hero.triple.net.cn/tags/邮件/"},{"name":"mailer","slug":"mailer","permalink":"https://hero.triple.net.cn/tags/mailer/"}]},{"title":"阿里邮箱和QQ邮箱配置参数","slug":"smtp-setting-on-alimail-and-qqmail","date":"2017-06-30T02:52:15.000Z","updated":"2018-12-18T07:02:57.050Z","comments":true,"path":"2017/06/30/smtp-setting-on-alimail-and-qqmail/","link":"","permalink":"https://hero.triple.net.cn/2017/06/30/smtp-setting-on-alimail-and-qqmail/","excerpt":"","text":"阿里邮箱：阿里的邮件响应速度很快 我用手机端，邮件发送来之后基本都是秒级提醒，很方便。 记录下 SMTP 的地址和端口，方便查找： |服务器名称| 服务器地址| 服务器端口号（非加密）| 服务器端口号（SSL加密）|| POP3 |pop3.aliyun.com |110 |995||SMTP |smtp.aliyun.com |25 |465||IMAP |imap.aliyun.com |143 |993| 如果服务器没有启用 https，smtp 端口使用 25,否则提示 timeout ###企业邮箱的POP3、SMTP、IMAP地址是什么？ 协议 服务器地址 服务器端口号（常规） 服务器端口号（加密） POP3 pop3.mxhichina.com 110 995 SMTP smtp.mxhichina.com 25 465 IMAP imap.mxhichina.com 143 993 QQ 邮箱使用SSL的通用配置如下： 接收邮件服务器：pop.qq.com，使用SSL，端口号995 发送邮件服务器：smtp.qq.com，使用SSL，端口号465或587 账户名：您的QQ邮箱账户名（如果您是VIP帐号或Foxmail帐号，账户名需要填写完整的邮件地址） 密码：您的QQ邮箱密码 电子邮件地址：您的QQ邮箱的完整邮件地址 接收邮件服务器：imap.qq.com 发送邮件服务器：smtp.qq.com 账户名：您的QQ邮箱账户名（如果您是VIP邮箱，账户名需要填写完整的邮件地址） 密码：您的QQ邮箱密码 电子邮件地址：您的QQ邮箱的完整邮件地址 如何设置IMAP服务的SSL加密方式？ 使用SSL的通用配置如下： 接收邮件服务器：imap.qq.com，使用SSL，端口号993 发送邮件服务器：smtp.qq.com，使用SSL，端口号465或587 账户名：您的QQ邮箱账户名（如果您是VIP帐号或Foxmail帐号，账户名需要填写完整的邮件地址） 密码：您的QQ邮箱密码 电子邮件地址：您的QQ邮箱的完整邮件地址 IMAP服务目前有什么功能限制？ 目前IMAP暂时还不支持删除文件夹和重命名文件夹的操作（后续版本中会支持）。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"邮箱","slug":"邮箱","permalink":"https://hero.triple.net.cn/tags/邮箱/"},{"name":"SMTP","slug":"SMTP","permalink":"https://hero.triple.net.cn/tags/SMTP/"}]},{"title":"linux查看所有用户和组","slug":"linux-e6-9f-a5-e7-9c-8b-e6-89-80-e6-9c-89-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84","date":"2017-06-28T01:17:30.000Z","updated":"2018-12-12T09:20:50.289Z","comments":true,"path":"2017/06/28/linux-e6-9f-a5-e7-9c-8b-e6-89-80-e6-9c-89-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/","link":"","permalink":"https://hero.triple.net.cn/2017/06/28/linux-e6-9f-a5-e7-9c-8b-e6-89-80-e6-9c-89-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/","excerpt":"","text":"web 目录配置时经常要配置目录访问权限，有时候为了方便就直接用 chmod -R 777 /var/www/ 了，这样会留下安全隐患 一般来讲，仅给所有者的执行权限即可， apache2 或者 nginx 的组一般有 www、www-data、nginx、httpd 等几个，尝试下即可，如果不存在会chmod的时候会报错的 PHP 有一些WebApp 需要用到PHP直接调用系统中的东西，这时，就不能简单的 chown -R www:www 了 而是要给PHP也有执行权限， 有的编译安装的PHP 会有 “php-fpm” 这个用户 或 组，放权的时候可以使用 chown -R www:php-fpm /var/webroot/ 查看所有用户： vim /etc/passwd 查看所有组： vim /etc/group ps: 据说有的系统没有 /etc/group 这个文件，那就只能从 /etc/passwd 这个文件中找了，第一列是用户名，第四列或者第五列是用户所属的组 我在自己的 debian 中可以正常看到 group 文件","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"用户","slug":"用户","permalink":"https://hero.triple.net.cn/tags/用户/"},{"name":"组","slug":"组","permalink":"https://hero.triple.net.cn/tags/组/"}]},{"title":"CodeIngitor  表单带错误和Flash Message代码","slug":"display-flash-message-in-codeigniter-form","date":"2017-06-26T09:34:10.000Z","updated":"2018-12-18T04:43:11.247Z","comments":true,"path":"2017/06/26/display-flash-message-in-codeigniter-form/","link":"","permalink":"https://hero.triple.net.cn/2017/06/26/display-flash-message-in-codeigniter-form/","excerpt":"","text":"1234567891011121314151617/* 用于显示系统提示 &amp; 错误消息 组合在一起的表单 */&amp;lt;?php$_ci =&amp; get_instance();$msg = $_ci-&gt;session-&gt;flashdata(&apos;msg&apos;);if (!empty($msg)) &#123; $htm_msg = &lt;&lt;&lt;HTML_FLASH_MSG &amp;lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt; &#123;$msg&#125; &amp;lt;/div&gt;HTML_FLASH_MSG; echo $htm_msg;&#125;?&gt;&amp;lt;?php echo validation_errors(&apos;&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-exclamation-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; &apos;, &apos;&lt;/div&gt;&apos;); ?&gt;&amp;lt;?php echo form_open(&apos;manager/UserManager/index&apos;, array(&apos;class&apos; =&gt; &apos;form-inline&apos;)); ?&gt; 如果客户端不支持 HTML5 也可以提示错误（或者其他的，不一定是 required 属性的校验）","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"},{"name":"技术分类","slug":"大前端！/技术分类","permalink":"https://hero.triple.net.cn/categories/大前端！/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"CodeIgniter","slug":"CodeIgniter","permalink":"https://hero.triple.net.cn/tags/CodeIgniter/"}]},{"title":"jQuery 获取多个 checkbox 值","slug":"jquery-e8-8e-b7-e5-8f-96-e5-a4-9a-e4-b8-aa-checkbox-e5-80-bc","date":"2017-06-20T07:23:49.000Z","updated":"2018-12-12T09:19:37.236Z","comments":true,"path":"2017/06/20/jquery-e8-8e-b7-e5-8f-96-e5-a4-9a-e4-b8-aa-checkbox-e5-80-bc/","link":"","permalink":"https://hero.triple.net.cn/2017/06/20/jquery-e8-8e-b7-e5-8f-96-e5-a4-9a-e4-b8-aa-checkbox-e5-80-bc/","excerpt":"","text":"如何获取多个复选框的值？ Try this &lt;input name=&quot;selector[]&quot; id=&quot;ad_Checkbox1&quot; class=&quot;ads_Checkbox&quot; type=&quot;checkbox&quot; value=&quot;1&quot; /&gt; &lt;input name=&quot;selector[]&quot; id=&quot;ad_Checkbox2&quot; class=&quot;ads_Checkbox&quot; type=&quot;checkbox&quot; value=&quot;2&quot; /&gt; &lt;input name=&quot;selector[]&quot; id=&quot;ad_Checkbox3&quot; class=&quot;ads_Checkbox&quot; type=&quot;checkbox&quot; value=&quot;3&quot; /&gt; &lt;input name=&quot;selector[]&quot; id=&quot;ad_Checkbox4&quot; class=&quot;ads_Checkbox&quot; type=&quot;checkbox&quot; value=&quot;4&quot; /&gt; &lt;input type=&quot;button&quot; id=&quot;save_value&quot; name=&quot;save_value&quot; value=&quot;Save&quot; /&gt; function $(function(){ $(&apos;#save_value&apos;).click(function(){ var val = []; $(&apos;:checkbox:checked&apos;).each(function(i){ val[i] = $(this).val(); }); }); });","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hero.triple.net.cn/tags/javascript/"},{"name":"jquery","slug":"jquery","permalink":"https://hero.triple.net.cn/tags/jquery/"},{"name":"checkbox","slug":"checkbox","permalink":"https://hero.triple.net.cn/tags/checkbox/"},{"name":"复选框","slug":"复选框","permalink":"https://hero.triple.net.cn/tags/复选框/"}]},{"title":"PHP 获取客户端IP","slug":"php-e8-8e-b7-e5-8f-96-e5-ae-a2-e6-88-b7-e7-ab-afip","date":"2017-06-16T10:11:44.000Z","updated":"2018-12-12T09:22:01.298Z","comments":true,"path":"2017/06/16/php-e8-8e-b7-e5-8f-96-e5-ae-a2-e6-88-b7-e7-ab-afip/","link":"","permalink":"https://hero.triple.net.cn/2017/06/16/php-e8-8e-b7-e5-8f-96-e5-ae-a2-e6-88-b7-e7-ab-afip/","excerpt":"","text":"stackoverflow 上搜到的，获取客户端IP （using PHP） https://stackoverflow.com/questions/15699101/get-the-client-ip-address-using-php // Function to get the client IP address function get_client_ip() { $ipaddress = &apos;&apos;; if (isset($_SERVER[&apos;HTTP_CLIENT_IP&apos;])) $ipaddress = $_SERVER[&apos;HTTP_CLIENT_IP&apos;]; else if(isset($_SERVER[&apos;HTTP_X_FORWARDED_FOR&apos;])) $ipaddress = $_SERVER[&apos;HTTP_X_FORWARDED_FOR&apos;]; else if(isset($_SERVER[&apos;HTTP_X_FORWARDED&apos;])) $ipaddress = $_SERVER[&apos;HTTP_X_FORWARDED&apos;]; else if(isset($_SERVER[&apos;HTTP_FORWARDED_FOR&apos;])) $ipaddress = $_SERVER[&apos;HTTP_FORWARDED_FOR&apos;]; else if(isset($_SERVER[&apos;HTTP_FORWARDED&apos;])) $ipaddress = $_SERVER[&apos;HTTP_FORWARDED&apos;]; else if(isset($_SERVER[&apos;REMOTE_ADDR&apos;])) $ipaddress = $_SERVER[&apos;REMOTE_ADDR&apos;]; else $ipaddress = &apos;UNKNOWN&apos;; return $ipaddress; }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"ip","slug":"ip","permalink":"https://hero.triple.net.cn/tags/ip/"}]},{"title":"CodeIgniter项目 环境配置","slug":"codeigniter-e9-a1-b9-e7-9b-ae-e7-8e-af-e5-a2-83-e9-85-8d-e7-bd-ae","date":"2017-06-02T02:23:46.000Z","updated":"2018-12-12T08:59:32.149Z","comments":true,"path":"2017/06/02/codeigniter-e9-a1-b9-e7-9b-ae-e7-8e-af-e5-a2-83-e9-85-8d-e7-bd-ae/","link":"","permalink":"https://hero.triple.net.cn/2017/06/02/codeigniter-e9-a1-b9-e7-9b-ae-e7-8e-af-e5-a2-83-e9-85-8d-e7-bd-ae/","excerpt":"","text":"CodeIgniter项目 环境配置 先来看一个实际的例子，项目中存在这样一个配置文件： $STATUS = &apos;normal&apos;; //测试为test,正式为normal $KEY_INFO = array( &apos;a_test&apos; =&gt; array( &apos;key&apos; =&gt; &apos;a_test_key&apos;, &apos;value&apos; =&gt; &apos;a_test_value&apos; ), &apos;a_normal&apos; =&gt; array( &apos;key&apos; =&gt; &apos;a_normal_key&apos;, &apos;value&apos; =&gt; &apos;a_normal_value&apos; ), &apos;b_test&apos; =&gt; array( &apos;key&apos; =&gt; &apos;b_test_key&apos;, &apos;value&apos; =&gt; &apos;b_test_value&apos; ), &apos;b_normal&apos; =&gt; array( &apos;key&apos; =&gt; &apos;b_normal_key&apos;, &apos;value&apos; =&gt; &apos;b_normal_value&apos; ), ); 生产环境和测试环境的开关通过$STATUS 变量来控制，而$STATUS定义和配置文件在同一个文件中，这意味着每次发布的时候都需要把这个值改成normal，测试的时候在调整回来，这样就无缘无故增加了发布的难度和错误产生的几率，每次提交的时候都得小心翼翼。产生该问题的主要原因就是把环境和配置没有分离开，环境和配置耦合在一个文件里了。很多时候我们写一个类的时候也会有类似的做法，将类需要配置的信息直接写死在属性中，不方便调整。 所以多环境的配置是十分有必要的，而Codeigniter框架是支持多环境配置的，环境的配置在index.php入口文件的第 21 行 /* *--------------------------------------------------------------- * APPLICATION ENVIRONMENT *--------------------------------------------------------------- * * You can load different configurations depending on your * current environment. Setting the environment also influences * things like logging and error reporting. * * This can be set to anything, but default usage is: * * development * testing * production * * NOTE: If you change these, also change the error_reporting() code below * */ define(&apos;ENVIRONMENT&apos;, &apos;development&apos;); 即CI开篇就定义了环境配置，那不同的环境配置会影响到哪些方面？ 1、 报错机制。不同的环境设置的报错级别不同，如开发环境（development）会显示所有错误信息，而生成环境（production）则会屏蔽所有错误信息。 2、 加载的配置文件不同，从而实现多套环境配置。 在开发过程中会将数据库配置设置为测试服或本机，而生成环境下会修改为正式服。那这么多环境该如何设置？ 先看看application目录下的config目录，该目录主要为系统的配置目录，如数据库配置、路由配置等。以数据库配置为例，当连接DB时，会读取 config/database.php 的配置文件，但这种情况是在没有自定义配置时。当我们定义ENVIRONMENT为development是，并创建config/development/database.php 时，系统会从此环境来读取数据库配置，而非 config/database.php 所以针对开发环境我们可以创建development目录，并将开发的配置文件放置于此目录下，创建production目录，用于发布时生产环境的配置，如下图所示： 注意: 对于个人定义的配置文件，若通过$this-&gt;load-&gt;config的方式加载，也适用多套环境，若是通过include加载则不行。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"ci","slug":"ci","permalink":"https://hero.triple.net.cn/tags/ci/"},{"name":"CodeIginter","slug":"CodeIginter","permalink":"https://hero.triple.net.cn/tags/CodeIginter/"},{"name":"开发环境","slug":"开发环境","permalink":"https://hero.triple.net.cn/tags/开发环境/"},{"name":"环境配置","slug":"环境配置","permalink":"https://hero.triple.net.cn/tags/环境配置/"}]},{"title":"PHP 多维数组排序方法","slug":"php-e5-a4-9a-e7-bb-b4-e6-95-b0-e7-bb-84-e6-8e-92-e5-ba-8f-e6-96-b9-e6-b3-95","date":"2017-05-31T07:59:42.000Z","updated":"2018-12-12T09:22:01.218Z","comments":true,"path":"2017/05/31/php-e5-a4-9a-e7-bb-b4-e6-95-b0-e7-bb-84-e6-8e-92-e5-ba-8f-e6-96-b9-e6-b3-95/","link":"","permalink":"https://hero.triple.net.cn/2017/05/31/php-e5-a4-9a-e7-bb-b4-e6-95-b0-e7-bb-84-e6-8e-92-e5-ba-8f-e6-96-b9-e6-b3-95/","excerpt":"","text":"接口需要，要对一些数组进行排序， 从数据库方面操作起来很麻烦， 只能放到程序里面去做， 发现默认的sort排序很奇怪，不知道为什么把一些以数字开头的key的item不放在第一位。。。 Google之，发现可以使用 usort() 这个方法： http://php.net/manual/zh/function.usort.php 先来看原始数组是什么样子的： Array ( [0] =&gt; Array ( [brand_id] =&gt; -10 [brand_name] =&gt; 天猫 面膜 [status] =&gt; 3 [favourite] =&gt; 0 ) [1] =&gt; Array ( [brand_id] =&gt; 20032 [brand_name] =&gt; A. by bom [status] =&gt; 1 [favourite] =&gt; 1 ) [2] =&gt; Array ( [brand_id] =&gt; 20063 [brand_name] =&gt; 妆色 [status] =&gt; 1 [favourite] =&gt; 1 ) [3] =&gt; Array ( [brand_id] =&gt; 20161 [brand_name] =&gt; 安米娜 [status] =&gt; 1 [favourite] =&gt; 1 ) [4] =&gt; Array ( [brand_id] =&gt; 20823 [brand_name] =&gt; 瑰柏翠 [status] =&gt; 1 [favourite] =&gt; 1 ) [5] =&gt; Array ( [brand_id] =&gt; 21325 [brand_name] =&gt; 芙丽诗贝 [status] =&gt; 1 [favourite] =&gt; 1 ) [6] =&gt; Array ( [brand_id] =&gt; 21443 [brand_name] =&gt; gram [status] =&gt; 1 [favourite] =&gt; 1 ) [7] =&gt; Array ( [brand_id] =&gt; 22115 [brand_name] =&gt; 蕾舒翠 [status] =&gt; 1 [favourite] =&gt; 1 ) [8] =&gt; Array ( [brand_id] =&gt; 23356 [brand_name] =&gt; 台盐 [status] =&gt; 1 [favourite] =&gt; 1 ) [9] =&gt; Array ( [brand_id] =&gt; 23029 [brand_name] =&gt; SASA [status] =&gt; 0 [favourite] =&gt; 1 ) [10] =&gt; Array ( [brand_id] =&gt; 23444 [brand_name] =&gt; 魔法森林 [status] =&gt; 0 [favourite] =&gt; 1 ) [11] =&gt; Array ( [brand_id] =&gt; 25589 [brand_name] =&gt; 纯即 [status] =&gt; 0 [favourite] =&gt; 1 ) [12] =&gt; Array ( [brand_id] =&gt; 24293 [brand_name] =&gt; 同仁堂 [status] =&gt; 0 [favourite] =&gt; 1 ) [13] =&gt; Array ( [brand_id] =&gt; 20003 [brand_name] =&gt; 10度 [status] =&gt; 0 [favourite] =&gt; 0 ) [14] =&gt; Array ( [brand_id] =&gt; 20014 [brand_name] =&gt; 3 CONCEPT EYES [status] =&gt; 0 [favourite] =&gt; 0 ) [15] =&gt; Array ( [brand_id] =&gt; 20033 [brand_name] =&gt; 珂泊亚 [status] =&gt; 0 [favourite] =&gt; 0 ) ) 要求是，不要按照brand_id排，而是按照 brand_name，这个 brand_name 来头不小——不是一成不变的，而是会根据用户语言自行变化，比如英文环境下 A.H.C 这个品牌，到中文中会显示成 柯泊亚， 解决方法： //声明 private function custom_sort($key){ return function ($a, $b) use ($key) { return strnatcmp($a[$key], $b[$key]); }; } /* .... .... .... */ //调用 usort($arr_brands,$this-&gt;custom_sort(&apos;brand_name&apos;)); 排序结果：","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"usort","slug":"usort","permalink":"https://hero.triple.net.cn/tags/usort/"},{"name":"排序","slug":"排序","permalink":"https://hero.triple.net.cn/tags/排序/"},{"name":"数组","slug":"数组","permalink":"https://hero.triple.net.cn/tags/数组/"}]},{"title":"yaf 在 nginx 中的配置一例","slug":"yaf-e5-9c-a8-nginx-e4-b8-ad-e7-9a-84-e9-85-8d-e7-bd-ae-e4-b8-80-e4-be-8b","date":"2017-05-24T07:43:35.000Z","updated":"2018-12-12T09:24:02.398Z","comments":true,"path":"2017/05/24/yaf-e5-9c-a8-nginx-e4-b8-ad-e7-9a-84-e9-85-8d-e7-bd-ae-e4-b8-80-e4-be-8b/","link":"","permalink":"https://hero.triple.net.cn/2017/05/24/yaf-e5-9c-a8-nginx-e4-b8-ad-e7-9a-84-e9-85-8d-e7-bd-ae-e4-b8-80-e4-be-8b/","excerpt":"","text":"server { listen 80 default_server; listen [::]:80 default_server; server_name _; index index.php index.html; root /usr/share/nginx/html/yaf_prj; include /etc/nginx/default.d/*.conf; location / { try_files $uri $uri/ @rewrite; expires max; } location ~ .php$ { try_files $uri =404; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } location @rewrite{ rewrite ^/(.*)$ /index.php?q=$1; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } }","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://hero.triple.net.cn/tags/nginx/"},{"name":"yaf","slug":"yaf","permalink":"https://hero.triple.net.cn/tags/yaf/"}]},{"title":"Sqlite比BDB更快？","slug":"sqlite-e6-af-94bdb-e6-9b-b4-e5-bf-ab-ef-bc-9f","date":"2017-05-05T03:34:46.000Z","updated":"2018-12-12T09:27:29.835Z","comments":true,"path":"2017/05/05/sqlite-e6-af-94bdb-e6-9b-b4-e5-bf-ab-ef-bc-9f/","link":"","permalink":"https://hero.triple.net.cn/2017/05/05/sqlite-e6-af-94bdb-e6-9b-b4-e5-bf-ab-ef-bc-9f/","excerpt":"","text":"简单的 Sqlite DB 和 Berkeley DB 性能对比最近在找一些 简单、快速存取、方便移植的数据库 首先发现了BerkeleyDB，测试下来 ，觉得速度还可以，尝试过插入1亿条记录，在我本地虚拟机里大概耗时700秒左右（6.1G 内存, i5 4590 CPU, SSD 40G） 正准备生产用一下，突然发现了一个文章，原文在这里 http://blog.csdn.net/mynicedream/article/details/2252398 。 文中提到 Sqlite 速度高于 BDB 不少，有点疑惑， 遂自己测试了一下，就拿简单的Insert，也没做任何优化，没有用大批量Insert 的方法（这也许更接近实际应用环境） 测试环境： 内存: 8GCPU: Intel® Core i3-4130 CPU @ 3.40GHz × 4磁盘： 500GB 普通台式机机械盘系统： Ubuntu 16.04.2 先来BerkeleyDB的插入性能测试代码： #coding:utf8 import time import bsddb3 import hashlib test_num = 100 def md5(s): return hashlib.md5(s).hexdigest() def insert_md5(db): t0 = time.time() for i in xrange(1,test_num+1): if i%10000 == 0: print i if not db.has_key(i): str_md5 = md5(str(i)) db[i] = str_md5 print time.time() - t0 def main(): t0 = time.time() db = bsddb3.rnopen(&apos;md5_digest.db&apos;, &apos;c&apos;) #insert_md5(db) print db.get(23152346) print str(time.time()-t0) if __name__ == &apos;__main__&apos;: main() —- 测试结果 1千万条数据大概12秒左右 1. 10000000 120.37905097 2. 10000000 126.873742104 3. 10000000 102.667818069 4. 10000000 106.770079136 --- Sqlite 的测试源码事先准备好空的 sqlitedb 数据库文件，包含一张表 test_1，有 md5 varchar(36) 和 numb integer 两个字段 #coding=utf8 import time import sqlite3 import hashlib test_num = 10000000 def md5(s): return hashlib.md5(s).hexdigest() def insert_md5(): t0 = time.time() conn = sqlite3.connect(&apos;test_sqlite.db&apos;) cursor = conn.cursor() for i in xrange(1,test_num+1): if i%10000 == 0: t_1 = time.time() print i print &quot;----&gt; Being Last: &quot; + str(t_1-t0) + &quot; avg: &quot; + str((time.time()-t0)/float(i)) + &quot; seconds/10,000&quot; cursor.execute(&apos;insert into test_1 (md5, numb) values (&apos;&apos;+md5(str(i))+&apos;&apos;, &apos;&apos;+str(i)+&apos;&apos;)&apos;) print time.time() - t0 cursor.close() conn.commit() conn.close() def main(): t0 = time.time() insert_md5() print str(time.time()-t0) if __name__ == &apos;__main__&apos;: main() 测试结果 1. 10000000 275.150636196 2. 10000000 250.863370895 3. 10000000 256.767675877 --- 结论也许Sqlite 方面有什么优化吧，我不知道，但是这结果相差很明显，我生产环境的情况基本和这个一样，不愿意去折腾了 我还是相信我自己最初判断 BDB之所以比Sqlite商用份额多， 博客园有网友测试结果BDB比Redis还快（http://www.cnblogs.com/me115/p/3395396.html）， * cdn缓存用BDB而不是Sqlite 等等，都能从侧面说明问题 ps: 还从Google上发现了百度文库里面也有人传了个关于BDB和Sqlite的性能对比，结果就是把文章头和尾重新写了一堆废话，然后把上面CSDN上面的那个测试结果贴在中间 。。。。 无语了，鄙视这样的人。。","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"berkeleydb","slug":"berkeleydb","permalink":"https://hero.triple.net.cn/tags/berkeleydb/"},{"name":"dbd","slug":"dbd","permalink":"https://hero.triple.net.cn/tags/dbd/"},{"name":"sqlite","slug":"sqlite","permalink":"https://hero.triple.net.cn/tags/sqlite/"}]},{"title":"Nginx下CodeIginter配置","slug":"nginx-e4-b8-8bcodeiginter-e9-85-8d-e7-bd-ae","date":"2017-05-04T03:26:21.000Z","updated":"2018-12-12T09:21:19.232Z","comments":true,"path":"2017/05/04/nginx-e4-b8-8bcodeiginter-e9-85-8d-e7-bd-ae/","link":"","permalink":"https://hero.triple.net.cn/2017/05/04/nginx-e4-b8-8bcodeiginter-e9-85-8d-e7-bd-ae/","excerpt":"","text":"Example, when none-configured: http://127.0.0.1/ci/index.php/hello/index Method 1:当nginx找不到文件和目录时，不返回404，而是重定向到index.php入口文件 location /ci/ { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ /ci/index.php; } Method 2：location /ci/ { if (!-e $request_filename) { rewrite ^/(.*)$ /ci/index.php?$1 last; break; } } 个人配置： --- application —// config.php base_url : http://172.16.85.221:1981/ index_url: /index.php? useage:1.1 on view, normal &lt;?php echo anchor(&apos;manager/password/reset&apos;, &apos;Password reset&apos;);?&gt; &lt;a href=&quot;&lt;?php%20echo%20site_url(&apos;manager/AppTranslate&apos;)%20?&gt;&quot;&gt;Translate&lt;/a&gt; 1.2 on view, ajax request(javascript block) $.ajax({ &apos;method&apos;: &apos;POST&apos;, &apos;dataType&apos;: &apos;json&apos;, &apos;data&apos;: {&apos;uid&apos;: uid, &apos;uname&apos;: uname}, &apos;url&apos;: &apos;&lt;?php echo site_url(&apos;manager/UserManager/delete&apos;); ?&gt;&apos;, &apos;success&apos;: function (data) { if (data &amp;&amp; data.data.status == true) { alert(&apos;Selected user&apos;s state already delete&apos;); } else { alert(&apos;Delete user failed.&apos;); } }, &apos;error&apos;: function (err_data){ alert(&apos;delete failed.&apos;); console.log(err_data); } }); 2.1 on controller $this-&gt;load-&gt;library(&apos;pagination&apos;); $config[&apos;base_url&apos;] = &apos;index.php?/manager/ListUser/index&apos;; $config[&apos;total_rows&apos;] = $this-&gt;users-&gt;get_user_count(&apos;&apos;); $this-&gt;pagination-&gt;initialize($config); $page_size = $this-&gt;config-&gt;item(&apos;per_page&apos;); $pagination_link = $this-&gt;pagination-&gt;create_links(); --- nginx —38 server { 39 &gt;---listen 1081 default_server; 40 &gt;---listen [::]:1081 default_server; 41 &gt;---root /home/wwwroot/Maret_API_MGR; 42 43 &gt;---index index.php index.html; 44 45 &gt;---server_name _; 46 47 &gt;---location / { 48 try_files $uri $uri/ /index.php; 49 if (!-e $request_filename) { 50 rewrite ^/(index.php?/)(.*)([/])$ 51 http://172.16.85.221:1981/$2/index.php break; 52 } 53 &gt;---} 54 55 &gt;---location ~ .php$ { 56 &gt;---&gt;---include snippets/fastcgi-php.conf; 57 &gt;---&gt;---fastcgi_pass unix:/run/php/php7.0-fpm.sock; 58 &gt;---} 59 }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"nginx","slug":"nginx","permalink":"https://hero.triple.net.cn/tags/nginx/"},{"name":"ci","slug":"ci","permalink":"https://hero.triple.net.cn/tags/ci/"},{"name":"CodeIginter","slug":"CodeIginter","permalink":"https://hero.triple.net.cn/tags/CodeIginter/"}]},{"title":"PHP 获取目录下的所有文件","slug":"gets-all-files-in-the-directory-with-php","date":"2017-04-28T08:00:25.000Z","updated":"2018-12-18T08:33:27.501Z","comments":true,"path":"2017/04/28/gets-all-files-in-the-directory-with-php/","link":"","permalink":"https://hero.triple.net.cn/2017/04/28/gets-all-files-in-the-directory-with-php/","excerpt":"","text":"PHP 获取目录下的所有文件转载了一篇通过PHP获取指定目录下所有文件/子文件并打印出来的方法，实测可用 运行示例：执行文件在 home 目录下，指定要获取的是 home 下的 Picture 目录（包含子目录） 1. 获取目录下文件，不包括子目录 //获取某目录下所有文件、目录名（不包括子目录下文件、目录名） $handler = opendir($dir); while (($filename = readdir($handler)) !== false) {//务必使用!==，防止目录下出现类似文件名“0”等情况 if ($filename != “.” &amp;&amp; $filename != “..”) { $files[] = $filename ; } } } closedir($handler); //打印所有文件名 foreach ($filens as $value) { echo $value.&quot;&quot;; } 1234567891011121314151617181920212223242526272829303132### 2\\. 获取目录下所有文件，包括子目录注意，最好使用绝对路径，相对路径不能用 &quot;../xxxx/bbb&quot; 或者 &quot;~/aaa/bbb/ccc&quot; 这样的``` function get_allfiles($path,&amp;$files) &#123; if(is_dir($path))&#123; $dp = dir($path); while ($file = $dp -&gt;read())&#123; if($file !=&quot;.&quot; &amp;&amp; $file !=&quot;..&quot;)&#123; get_allfiles($path.&quot;/&quot;.$file, $files); &#125; &#125; $dp -&gt;close(); &#125; if(is_file($path))&#123; $files[] = $path; &#125; &#125; function get_filenamesbydir($dir)&#123; $files = array(); get_allfiles($dir,$files); return $files; &#125; // 路径末尾可以不用放斜线 $filenames = get_filenamesbydir(&quot;Picture&quot;); //打印所有文件名，包括路径 foreach ($filenames as $value) &#123; echo $value.&quot;&quot;; &#125;","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"}]},{"title":"nginx配置location总结及rewrite规则写法","slug":"nginx-e9-85-8d-e7-bd-aelocation-e6-80-bb-e7-bb-93-e5-8f-8arewrite-e8-a7-84-e5-88-99-e5-86-99-e6-b3-95","date":"2017-04-27T07:11:24.000Z","updated":"2018-12-12T09:21:19.275Z","comments":true,"path":"2017/04/27/nginx-e9-85-8d-e7-bd-aelocation-e6-80-bb-e7-bb-93-e5-8f-8arewrite-e8-a7-84-e5-88-99-e5-86-99-e6-b3-95/","link":"","permalink":"https://hero.triple.net.cn/2017/04/27/nginx-e9-85-8d-e7-bd-aelocation-e6-80-bb-e7-bb-93-e5-8f-8arewrite-e8-a7-84-e5-88-99-e5-86-99-e6-b3-95/","excerpt":"","text":"1. location正则写法一个示例： location = / { # 精确匹配 / ，主机名后面不能带任何字符串 [ configuration A ] }location / { # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求 # 但是正则和最长字符串会优先匹配 [ configuration B ] }location /documents/ { # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索 # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条 [ configuration C ] }location ~ /documents/Abc { # 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索 # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条 [ configuration CC ] }location ^~ /images/ { # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。 [ configuration D ] } location ~ \\.(gif|jpg|jpeg)$ { # 匹配所有以 gif,jpg或jpeg 结尾的请求 # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则 [ configuration E ] } location /images/ { # 字符匹配到 /images/，继续往下，会发现 ^~ 存在 [ configuration F ] } location /images/abc { # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在 # F与G的放置顺序是没有关系的 [ configuration G ] } location ~ /images/abc/ { # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用 [ configuration H ] } location ~ /js/.*/\\.js 已=开头表示精确匹配 如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。 ^~ 开头表示uri以某个常规字符串开头，不是正则匹配 ~ 开头表示区分大小写的正则匹配; ~* 开头表示不区分大小写的正则匹配 / 通用匹配, 如果没有其它匹配,任何请求都会匹配到 顺序 no优先级： (location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/) 上面的匹配结果 按照上面的location写法，以下的匹配示例成立： / -> config A 精确完全匹配，即使/index.html也匹配不了 /downloads/download.html -&gt; config B 匹配B以后，往下没有任何匹配，采用B /images/1.gif -&gt; configuration D 匹配到F，往下匹配到D，停止往下 /images/abc/def -&gt; config D 最长匹配到G，往下匹配D，停止往下 你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序 /documents/document.html -&gt; config C 匹配到C，往下没有任何匹配，采用C /documents/1.jpg -&gt; configuration E 匹配到C，往下正则匹配到E /documents/Abc.jpg -&gt; config CC 最长匹配到C，往下正则顺序匹配到CC，不会往下到E 实际使用建议所以实际使用中，个人觉得至少有三个匹配规则定义，如下： #直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。 #这里是直接转发给后端应用服务器了，也可以是一个静态首页 # 第一个必选规则 location = / { proxy_pass http://tomcat:8080/index } # 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项 # 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用 location ^~ /static/ { root /webroot/static/; } location ~* \\.(gif|jpg|jpeg|png|css|js|ico)$ { root /webroot/res/; } #第三个规则就是通用规则，用来转发动态请求到后端应用服务器 #非静态文件请求就默认是动态请求，自己根据实际把握 #毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了 location / { proxy_pass http://tomcat:8080/ } http://tengine.taobao.org/book/chapter_02.html http://nginx.org/en/docs/http/ngx_http_rewrite_module.html 2. Rewrite规则rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 http://seanlook.com/a/we/index.php?id=1&amp;u=str 只对/a/we/index.php重写。语法rewrite regex replacement [flag]; 如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。 表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是： 执行server块的rewrite指令 执行location匹配 执行选定的location中的rewrite指令 如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。 2.1 flag标志位 last : 相当于Apache的[L]标记，表示完成rewrite break : 停止执行当前虚拟主机的后续rewrite指令集 redirect : 返回302临时重定向，地址栏会显示跳转后的地址 permanent : 返回301永久重定向，地址栏会显示跳转后的地址 因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解： last一般写在server和if中，而break一般使用在location中 last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配 break和last都能组织继续执行后面的rewrite指令 2.2 if指令与全局变量if判断指令 语法为if(condition){...}，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容： 当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false 直接比较变量和内容时，使用=或!= ~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配 -f和!-f用来判断是否存在文件 -d和!-d用来判断是否存在目录 -e和!-e用来判断是否存在文件或目录 -x和!-x用来判断文件是否可执行 例如： if ($http_user_agent ~ MSIE) { rewrite ^(.)$ /msie/$1 break; } //如果UA包含”MSIE”，rewrite请求到/msid/目录下if ($http_cookie ~ “id=([^;]+)(?:;|$)”) { set $id $1; } //如果cookie匹配正则，设置变量$id等于正则引用部分if ($request_method = POST) { return 405; } //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302if ($slow) { limit_rate 10k; } //限速，$slow可以通过 set 指令设置if (!-f $request_filename){ break; proxy_pass http://127.0.0.1; } //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查 if ($args ~ post=140){ rewrite ^ http://example.com/ permanent; } //如果query string中包含”post=140”，永久重定向到example.com location ~* \\.(gif|jpg|png|swf|flv)$ { valid_referers none blocked www.jefflei.com www.leizhenfang.com; if ($invalid_referer) { return 404; } //防盗链 } 全局变量 下面是可以用作if判断的全局变量 $args ： #这个变量等于请求行中的参数，同$query_string $content_length ： 请求头中的Content-length字段。 $content_type ： 请求头中的Content-Type字段。 $document_root ： 当前请求在root指令中指定的值。 $host ： 请求主机头字段，否则为服务器名称。 $http_user_agent ： 客户端agent信息 $http_cookie ： 客户端cookie信息 $limit_rate ： 这个变量可以限制连接速率。 $request_method ： 客户端请求的动作，通常为GET或POST。 $remote_addr ： 客户端的IP地址。 $remote_port ： 客户端的端口。 $remote_user ： 已经经过Auth Basic Module验证的用户名。 $request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。 $scheme ： HTTP方法（如http，https）。 $server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。 $server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。 $server_name ： 服务器名称。 $server_port ： 请求到达服务器的端口号。 $request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。 $uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。 $document_uri ： 与$uri相同。 例：http://localhost:88/test1/test2/test.php $host：localhost $server_port：88 $request_uri：http://localhost:88/test1/test2/test.php $document_uri：/test1/test2/test.php $document_root：/var/www/html $request_filename：/var/www/html/test1/test2/test.php 2.3 常用正则 . ： 匹配除换行符以外的任意字符 ? ： 重复0次或1次 + ： 重复1次或更多次 * ： 重复0次或更多次 \\d ：匹配数字 ^ ： 匹配字符串的开始 $ ： 匹配字符串的介绍 {n} ： 重复n次 {n,} ： 重复n次或更多次 [c] ： 匹配单个字符c [a-z] ： 匹配a-z小写字母的任意一个 小括号()之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容。正则里面容易让人困惑的是\\转义特殊字符。 2.4 rewrite实例_例1_： http { # 定义image日志格式 log_format imagelog ‘[$time_local] ‘ $image_file ‘ ‘ $image_type ‘ ‘ $body_bytes_sent ‘ ‘ $status; # 开启重写日志 rewrite_log on;server { root /home/www;location / { # 重写规则信息 error_log logs/rewrite.log notice; # 注意这里要用‘’单引号引起来，避免{} rewrite ‘^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\\.(png|jpg|gif)$’ /data?file=$3.$4; # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行 set $image_file $3; set $image_type $4; }location /data { # 指定针对图片的日志格式，来分析图片类型和大小 access_log logs/images.log mian; root /data/images; # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里 try_files /$arg_file /image404.html; } location = /image404.html { # 图片不存在返回特定的信息 return 404 “image not found\\n”; } } 对形如/images/ef/uh7b3/test.png的请求，重写到/data?file=test.png，于是匹配到location /data，先看/data/images/test.png文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。 _例2_： 1 rewrite ^/images/(.*)_(\\d+)x(\\d+)\\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&amp;height=$3? last; 对形如/images/bla_500x400.jpg的文件请求，重写到/resizer/bla.jpg?width=500&amp;height=400地址，并会继续尝试匹配location。 _例3_： 见 ssl部分页面加密 。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://hero.triple.net.cn/tags/nginx/"}]},{"title":"GlusterFS 调研","slug":"glusterfs-e8-b0-83-e7-a0-94","date":"2017-04-21T10:55:19.000Z","updated":"2018-12-12T09:19:14.605Z","comments":true,"path":"2017/04/21/glusterfs-e8-b0-83-e7-a0-94/","link":"","permalink":"https://hero.triple.net.cn/2017/04/21/glusterfs-e8-b0-83-e7-a0-94/","excerpt":"","text":"与Hadoop HDFS不同的是：GlusterFS使用了弹性哈希算法来定位文件存储的位置。 由于使用了弹性哈希算法，GlusterFS不需要专门的Meta-Data Server来保存元数据，因此可以避免因为元数据服务器宕机导致的整个集群不可用。也正是因为不需要元数据服务器，所以GlusterFS在多个挂载点同时进行数据读写的时候，其整体性能很突出。 在GlusterFS 3.3版本中增加的新功能包括 统一的文件和对象存储：GlusterFS实现了OpenStack里的对象存储API提供同步读取和写入文件或对象的数据的访问。 HDFS兼容： 使Hadoop的管理员在GlusterFS的非结构化数据上运行MapReduce任务，并可以通过常用的工具和shell脚本访问GlusterFS上的数据。 主动自我修复：GlusterFS卷可以在宕机恢复之后自动从备份服务器上恢复数据。 Granular锁：允许在对大文件的自我修复过程中访问数据，这个功能对于把GlusterFS作为虚拟机磁盘镜像存储服务器时及其重要。 改进的复制策略：系统在写入数据时，只有当用户指定的备份数量的写入操作都完成时才返回。该功能为用户提供了在数据安全性和性能之间做权衡的能力。 CentOS7 配置：https://wiki.centos.org/zh/HowTos/GlusterFSonCentOS","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"GlusterFS","slug":"GlusterFS","permalink":"https://hero.triple.net.cn/tags/GlusterFS/"},{"name":"文件存储","slug":"文件存储","permalink":"https://hero.triple.net.cn/tags/文件存储/"}]},{"title":"Yaf 使用注意事项","slug":"yaf-e4-bd-bf-e7-94-a8-e6-b3-a8-e6-84-8f-e4-ba-8b-e9-a1-b9","date":"2017-04-19T01:13:14.000Z","updated":"2018-12-12T09:24:02.382Z","comments":true,"path":"2017/04/19/yaf-e4-bd-bf-e7-94-a8-e6-b3-a8-e6-84-8f-e4-ba-8b-e9-a1-b9/","link":"","permalink":"https://hero.triple.net.cn/2017/04/19/yaf-e4-bd-bf-e7-94-a8-e6-b3-a8-e6-84-8f-e4-ba-8b-e9-a1-b9/","excerpt":"","text":"配置文件格式需要仔细校对，第二个section中的product是和 php.ini 中的 yaf.envrion 配置项的值对应。并且common 节一定要继承自 common section，否则需要把common section 的配置写到 product 中。 如果 php.ini 中 yaf.use_namespace:设置为1的话，表示开启了命名空间（默认不开启），则在读取配置文件时，也要相应的在前面加上命名空间的名称（比如Yaf_Application要变成YafApplication），否则会提示 Class &#39;Yaf_Application&#39; not found [ps2id id=&apos;configure_struct&apos; target=&apos;&apos;/] [common] application.directory = APPLICATION_PATH &quot;/application&quot; application.dispatcher.catchException = TRUE [dev : common] database.dsn = &apos;mysql:host=127.0.0.1;dbname=test&apos; database.host = &apos;localhost&apos; database.user = &apos;db_user&apos; database.pwd = &apos;db_password&apos; 配置文件调用示例Model 用于提供数据访问的各种方法，这里示例是在 /application/models/User.php 下面 private $conf = null; function __construct() { $this-&gt;conf = Yaf_Application::app()-&gt;getConfig(); } /** * List 10 Users */ function listUser(){ $arr_users = array(); $dsn = $this-&gt;conf-&gt;database-&gt;dsn; $db_user = $this-&gt;conf-&gt;database-&gt;user; $db_pwd = $this-&gt;conf-&gt;database-&gt;pwd; $sql = &apos;select email,password from users limit 10&apos;; try{ $pdo = new PDO($dsn,$db_user,$db_pwd); if ($pdo){ $stmt = $pdo-&gt;prepare($sql); $stmt-&gt;execute(); $arr_data = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC); foreach ($arr_data as $datum){ $arr_users[] = array( &apos;email&apos;=&gt;$datum[&apos;email&apos;], &apos;pwd&apos;=&gt;$datum[&apos;pwd&apos;], ); } } }catch (PDOException $exception){ throw new PDOException(&apos;PDO Exception: &apos; . $exception-&gt;getMessage()); }catch (Exception $exception){ throw new Exception(&apos;Unknowing Exception: &apos; . $exception-&gt;getMessage()); } return $arr_users; } 调用外部/第三方类库示例一 // 导入： yafoo/application/Bootstrap.php public function _initLoader($dispatcher){ $loader = Yaf_Loader::getInstance(); $loader::import(APPLICATION_PATH . &apos;/application/library/Requests/Requests.php&apos;); } // 调用时： $response = Requests::get(&apos;http://www.baidu.com/?s=&apos;.$key); 示例二 // Boostrap.php $loader::import(APPLICATION_PATH . &apos;/application/library/Raven/Client.php&apos;); Raven_Autoloader::register(); // 调用时 function someAction(){ // code ... // code .... try{ // some code ... } catch (PDOException $exception) { $sentry_client = new Raven_Client($sentry_url); $sentry_client-&gt;captureException($exception,array( &apos;extra&apos;=&gt;array( &apos;php_version&apos;=&gt;phpversion(), &apos;environment&apos;=&gt;Yaf_Application::app()-&gt;environ(), ) )); throw new PDOException(&apos;PDO Exception: &apos; . $exception-&gt;getMessage()); } } 如何设置多个models路径 models, controllers都支持下划线分割, 比如, 如果你是多个modules的不同model, 那么可以命名为 A_B_CModel 那么就会在models目录下的A目录的B目录里面找C yaf控制器使用控制器方法 - 对用户可见的方法(即用户可以直接访问的方法)需要加上Action后缀 - 初始化类的方法为init，不是__construct 独立文件定义操作(方法)1、作用：为了分解大的控制器，让代码更加清晰 2、使用方法 （1）在控制器中绑定操作(即将操作绑定到某个操作类上) class TestController extends YafController_Abstract { public $actions = array( &apos;index&apos;=&gt;&apos;actions/index.php&apos;, &apos;add&apos;=&gt;&apos;actions/add.php&apos;, &apos;detail&apos;=&gt;&apos;actions/detail.php&apos; ); } （2）定义操作类 class DetailAction extends YafAction_Abstract { public function execute() { var_dump($this-&gt;getRequest()-&gt;getParam(&apos;id&apos;)); } } 3、定义操作类 - 操作类位置：一般在application/actions下面，如detail.php(application/actions/detail.php) - 操作类命名：必须以Action为后缀，如DetailAction - 继承：继承自YafAction_abstract - 必须实现的方法：execute,因为其父类YafAction_abstract是一个抽象类，必须实现抽象方法execute - 可以使用的父类方法：不仅可以使用YafAction_abstract的方法，还可以继承YafController_Abstract的方法(因为YafAction_abstract继承自YafController_Abstract) 三、控制器基类YafController_Abstract1、初始化操作 - init:初始化操作(如初始化实例变量，在yaf中替代__construct的功能) - initView:初始化视图 2、视图相关操作 (1)getViewpath:获取视图文件目录，默认在application/views下面，也可以通过setViewpath设置修改 (2)setViewpath:设置视图文件目录 (3)getView:获取当前视图对象 (4)display:渲染一个视图模板, 并直接输出给请求端 (5)render:渲染视图模板, 得到渲染结果 3、获取请求与响应对象 - getRequest:获取当前请求对象，那么它就可以调用request对象所有的方法 - getResponse:获取当前响应对象，那么它就可以调用response对象所有的方法 class TestController extends YafController_Abstract { public function testAction() { $id = $this-&gt;getRequest()-&gt;getParam(&apos;id&apos;); $response = $this-&gt;getResponse(); $response-&gt;setHeader(&apos;content-type&apos;, &apos;application/json&apos;); $json = json_encode(array(&apos;id&apos;=&gt;$id, &apos;message&apos;=&gt;&apos;success&apos;)); $response-&gt;setBody($json); //$response-&gt;response(); } } 注：在浏览器中输入：http://www.domain.com/test/test/id/123，即可输出：{&quot;id&quot;:&quot;123&quot;,&quot;message&quot;:&quot;success&quot;} 4、获取当前请求相关的参数 - getModuleName:获取当前模块名(如果想获取当前控制器名或方法名，可以使用request对象来获取) 获取当前路由参数的简写方式： public function testAction($name, $id) { echo $name; //相当于echo $this-&gt;getRequest()-&gt;getParam(&apos;name&apos;); echo $id; //相当于echo $this-&gt;getRequest()-&gt;getParam(&apos;id&apos;); } 在浏览器中输入：http://www.doamin.com/test/test/id/123/name/shixinke 得到输出内容：shixinke 123 5、页面跳转 - forword : 跳转到某个控制器的某个方法，不会立即跳转，会继续执行它后面的内容 - redirect : 跳转到一个uri 例如：登录的权限控制 (1)使用forward class IndexController extends YafController_Abstract { public function indexAction(){ $logined = $_SESSION[&quot;userId&quot;]; if (!$logined) { $this-&gt;forward(&quot;login&quot;, array(&quot;from&quot; =&gt; &quot;Index&quot;)); // 跳转到当前模块的login操作 return FALSE; //立即返回就不会执行后面的内容了 } //显示内容 } public function loginAction() { echo &quot;login, redirected from &quot;, $this-&gt;_request-&gt;getParam(&quot;from&quot;) , &quot; action&quot;; } } ?&gt; 注:如果要跳转到其他模块，$this-&gt;forward(‘admin’, ‘login’, ‘index’, array(‘from’=&gt;’index’)); //跳转到admin模块的login控制器的index方法 (2)使用redirect public function IndexAction() { $logined = $_SESSION[&apos;userId&apos;]; if (!$logined) { $this-&gt;redirect(&apos;http://www.domain.com/admin/login/index&apos;)); // 跳转到http://www.domain.com/admin/login/index这个地址 return FALSE; //立即返回就不会执行后面的内容了 } } 四、错误处理1、通过ErrorController这个控制器来捕获异常与错误 首先得在启动文件中开启异常捕获： YafDispatcher::getInstance()-&gt;catchException(true); 错误控制器： class ErrorController extends YafController_Abstract { /** * 也可通过$request-&gt;getException()获取到发生的异常 */ public function errorAction($exception) { $constArr = array( YAFERRNOTFOUNDMODULE, YAFERRNOTFOUNDCONTROLLER, YAFERRDISPATCH_FAILED, YAFERRNOTFOUNDACTION, YAFERRNOTFOUNDVIEW ); $err = $exception-&gt;getCode(); if (in_array($err, $constArr)) { $code = 404; $message = &apos;请求的页面不存在&apos;; } else { $code = 500; $message = &apos;系统出错&apos;; } if (ENV == &apos;DEV&apos;) { $message = $exception-&gt;getMessage(); } //记录日志 //ajax输出或显示错误模板 $this-&gt;getView()-&gt;assign(&apos;message&apos;, $message); } } configure_struct 2、通过YafDispatcher的setErrorHandler来捕获错误与异常 在启动文件中定义一个appErrorHandler的函数，并在_initRoute()中添加相应的捕获代码","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"yaf","slug":"yaf","permalink":"https://hero.triple.net.cn/tags/yaf/"}]},{"title":"使用 xdebug调试PHP的技巧","slug":"e4-bd-bf-e7-94-a8-xdebug-e8-b0-83-e8-af-95php-e7-9a-84-e6-8a-80-e5-b7-a7","date":"2017-04-17T12:40:28.000Z","updated":"2018-12-12T09:05:36.340Z","comments":true,"path":"2017/04/17/e4-bd-bf-e7-94-a8-xdebug-e8-b0-83-e8-af-95php-e7-9a-84-e6-8a-80-e5-b7-a7/","link":"","permalink":"https://hero.triple.net.cn/2017/04/17/e4-bd-bf-e7-94-a8-xdebug-e8-b0-83-e8-af-95php-e7-9a-84-e6-8a-80-e5-b7-a7/","excerpt":"","text":"作者：许胜斌 链接：https://www.zhihu.com/question/20348619/answer/101893104 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 我目前遇到的最让我称赞的debug方式是：xdebug的 xdebug_start_trace(); /* 业务代码 */ xdebug_stop_trace(); 他解决了我长久以来一个代码调试问题：比如有以下几个场景： 1、一个有几百行的函数，里面有很多return，现在函数异常返回了，但是我不知道是从哪一行返回的，这时候呢，我一般的做法都是每一行echo();die();太费事了。 2、接触一个新的框架，代码执行出现异常，怎么办呢，肯定也是一行一行的echo();die(); 3、想学习一个新框架，想知道代码的执行轨迹：执行了哪些类、调用了哪些类的方法，等等。 现在呢，xdebug的代码跟踪，能帮我们轻松解决上面的问题。 xdebug的安装 （网上我看到了很多的都是在说xdebug、phpstorm、chrome咋配合起来远程调试，搞得大家好像觉得xdebug用起来那么费事，那么高级，其实没必要）： 1、安装php xdebug扩展（不再细说） 2、配置：这里只讲代码跟踪相关的配置： cat /etc/php.d/xdebug.ini extension=/usr/lib64/php/modules/xdebug.so ;代码跟踪日志文件位置,注意要先新建这个traces目录，并设置777 xdebug.trace_output_dir = /tmp/traces ;代码跟踪日志文件格式 xdebug.trace_output_name = trace.%c.%p ;trace中显示函数的参数值，这个很有用，待会细说 xdebug.collect_params = 4 xdebug.collect_includes = On xdebug.collect_return = On xdebug.show_mem_delta = On 安装好之后，代码执行明细(trace)，就存放在/tmp/traces目录下了: 我截取一段trace日志，大家看下，就能感知到这个用法的方便了： 1、显示了参数的值：就这一点，我想就会节省我们phper很多的调试时间（默认不显示参数值，只显示调用的函数。需要添加xdebug.collect_params这个配置） 1、显示了参数的值：就这一点，我想就会节省我们phper很多的调试时间（默认不显示参数值，只显示调用的函数。需要添加xdebug.collect_params这个配置） 2、显示了代码的执行轨迹。类似于c语言的单步调试吧。 就这些了，反正用了xdebug，我是觉得debug的时候节省了大量时间，分享给大家，希望对你们也有帮助。 ps：如果大家都xdebug的安装有困惑，可以参考http://www.ibm.com/developerworks/cn/opensource/os-php-xdebug/index.html","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"debug","slug":"debug","permalink":"https://hero.triple.net.cn/tags/debug/"},{"name":"调试","slug":"调试","permalink":"https://hero.triple.net.cn/tags/调试/"}]},{"title":"如何优雅的输出PHP调试信息","slug":"e5-a6-82-e4-bd-95-e4-bc-98-e9-9b-85-e7-9a-84-e8-be-93-e5-87-baphp-e8-b0-83-e8-af-95-e4-bf-a1-e6-81-af","date":"2017-04-17T12:38:52.000Z","updated":"2018-12-12T09:08:58.762Z","comments":true,"path":"2017/04/17/e5-a6-82-e4-bd-95-e4-bc-98-e9-9b-85-e7-9a-84-e8-be-93-e5-87-baphp-e8-b0-83-e8-af-95-e4-bf-a1-e6-81-af/","link":"","permalink":"https://hero.triple.net.cn/2017/04/17/e5-a6-82-e4-bd-95-e4-bc-98-e9-9b-85-e7-9a-84-e8-be-93-e5-87-baphp-e8-b0-83-e8-af-95-e4-bf-a1-e6-81-af/","excerpt":"","text":"如何优雅的输出PHP调试信息经常因为出现紧急bug而被老板骂的同事，为了更快的修复而直接利用线上的错误环境现场debug，并直接在页面上echo和dump。结果被老板发现了，又是一通臭骂。那么有没有什么办法更优雅的输出PHP调试信息呢？ 这里提供一个方案：利用浏览器调试模式的Console 1，先定义一个php函数： 1 function console($log=’’) 2 { 3 switch (empty($log)) { 4 case False: 5 $out = json_encode($log); 6 $GLOBALS[‘console’] .= ‘console.log(‘.$out.’);’; 7 break; 8 9 default:10 echo ‘‘.$GLOBALS[‘console’].’‘;11 }12 } 2，在需要调试的地方直接调用它，递交的参数可以是字符串，也可以是数组。 ![](https://tech.msla.top/wp-content/uploads/2018/04/012220393931537.png) 3，在适当的位置调用无参数的console，用来输出调试信息，比如各类php框架入口文件的最底部 ![](https://tech.msla.top/wp-content/uploads/2018/04/012221208472406.png) 4，打开浏览器（比如chrome），载入页面后进入调试模式（比如按F12键），点击Console，你会发现所有数据都在这里等着你查阅。 ![](https://tech.msla.top/wp-content/uploads/2018/04/012221469725658-1.png) 5，其他用途 优秀的PHP开源框架ThinkPHP提供了输出运行状态的功能，你可以通过运行状态来了解某个页面在后台处理了多长时间。但是，很多人都注意到了，它是不准确的。 下面我们试着用刚刚加进来的自定义函数console在浏览器中输出真正的运行时间。 所有工作都在入口文件中完成： ![](https://tech.msla.top/wp-content/uploads/2018/04/012222279878126.png) 在所有代码的最开头，定义变量$s=microtime(true); 在console();的上面再增加console(&apos;exetime:&apos;.round(microtime(true)-$s,4)); 好了，我们来看看真正的运行时间吧： ![](https://tech.msla.top/wp-content/uploads/2018/04/012222584566118.png) 这个课题就这么简单愉快的解决了。 PS：因为这个函数用到了json来输出数组，所以要求编码为UTF-8，如果使用其它编码可能会出现未知问题，需要留意。","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"},{"name":"技术分类","slug":"大前端！/技术分类","permalink":"https://hero.triple.net.cn/categories/大前端！/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"debug","slug":"debug","permalink":"https://hero.triple.net.cn/tags/debug/"},{"name":"调试","slug":"调试","permalink":"https://hero.triple.net.cn/tags/调试/"}]},{"title":"Mongodb亿级数据量的性能测试","slug":"mongodb-e4-ba-bf-e7-ba-a7-e6-95-b0-e6-8d-ae-e9-87-8f-e7-9a-84-e6-80-a7-e8-83-bd-e6-b5-8b-e8-af-95","date":"2017-04-17T05:41:34.000Z","updated":"2018-12-12T09:20:50.323Z","comments":true,"path":"2017/04/17/mongodb-e4-ba-bf-e7-ba-a7-e6-95-b0-e6-8d-ae-e9-87-8f-e7-9a-84-e6-80-a7-e8-83-bd-e6-b5-8b-e8-af-95/","link":"","permalink":"https://hero.triple.net.cn/2017/04/17/mongodb-e4-ba-bf-e7-ba-a7-e6-95-b0-e6-8d-ae-e9-87-8f-e7-9a-84-e6-80-a7-e8-83-bd-e6-b5-8b-e8-af-95/","excerpt":"","text":"进行了一下Mongodb亿级数据量的性能测试，分别测试如下几个项目： （所有插入都是单线程进行，所有读取都是多线程进行） 1） 普通插入性能 （插入的数据每条大约在1KB左右） 2） 批量插入性能 （使用的是官方C#客户端的InsertBatch），这个测的是批量插入性能能有多少提高 3） 安全插入功能 （确保插入成功，使用的是SafeMode.True开关），这个测的是安全插入性能会差多少 4） 查询一个索引后的数字列，返回10条记录（也就是10KB）的性能，这个测的是索引查询的性能 5） 查询两个索引后的数字列，返回10条记录（每条记录只返回20字节左右的2个小字段）的性能，这个测的是返回小数据量以及多一个查询条件对性能的影响 6） 查询一个索引后的数字列，按照另一个索引的日期字段排序（索引建立的时候是倒序，排序也是倒序），并且Skip100条记录后返回10条记录的性能，这个测的是Skip和Order对性能的影响 7） 查询100条记录（也就是100KB）的性能（没有排序，没有条件），这个测的是大数据量的查询结果对性能的影响 8） 统计随着测试的进行，总磁盘占用，索引磁盘占用以及数据磁盘占用的数量 并且每一种测试都使用单进程的Mongodb和同一台服务器开三个Mongodb进程作为Sharding（每一个进程大概只能用7GB左右的内存）两种方案 其实对于Sharding，虽然是一台机器放3个进程，但是在查询的时候每一个并行进程查询部分数据，再有运行于另外一个机器的mongos来汇总数据，理论上来说在某些情况下性能会有点提高 基于以上的种种假设，猜测某些情况性能会下降，某些情况性能会提高，那么来看一下最后的测试结果怎么样？ 备注：测试的存储服务器是 E5620 @ 2.40GHz，24GB内存，CentOs操作系统，打压机器是E5504 @ 2.0GHz，4GB内存，Windows Server 2003操作系统，两者千兆网卡直连。 从这个测试可以看出，对于单进程的方式： 1） Mongodb的非安全插入方式，在一开始插入性能是非常高的，但是在达到了两千万条数据之后性能骤减，这个时候恰巧是服务器24G内存基本占满的时候（随着测试的进行mongodb不断占据内存，一直到操作系统的内存全部占满），也就是说Mongodb的内存映射方式，使得数据全部在内存中的时候速度飞快，当部分数据需要换出到磁盘上之后，性能下降很厉害。（这个性能其实也不算太差，因为我们对三个列的数据做了索引，即使在内存满了之后每秒也能插入2MB的数据，在一开始更是每秒插入25MB数据）。Foursquare其实也是把Mongodb当作带持久化的内存数据库使用的，只是在查不到达到内存瓶颈的时候Sharding没处理好。 2） 对于批量插入功能，其实是一次提交一批数据，但是相比一次一条插入性能并没有提高多少，一来是因为网络带宽已经成为了瓶颈，二来我想写锁也会是一个原因。 3） 对于安全插入功能，相对来说比较稳定，不会波动很大，我想可能是因为安全插入是确保数据直接持久化到磁盘的，而不是插入内存就完事。 4） 对于一列条件的查询，性能一直比较稳定，别小看，每秒能有8000-9000的查询次数，每次返回10KB，相当于每秒查询80MB数据，而且数据库记录是2亿之后还能维持这个水平，性能惊人。 5） 对于二列条件返回小数据的查询，总体上性能会比4）好一点，可能返回的数据量小对性能提高比较大，但是相对来说性能波动也厉害一点，可能多了一个条件就多了一个从磁盘换页的机会。 6） 对于一列数据外加Sort和Skip的查询，在数据量大了之后性能明显就变差了（此时是索引数据量超过内存大小的时候，不知道是否有联系），我猜想是Skip比较消耗性能，不过和4）相比性能也不是差距特别大。 7） 对于返回大数据的查询，一秒瓶颈也有800次左右，也就是80M数据，这就进一步说明了在有索引的情况下，顺序查询和按条件搜索性能是相差无几的，这个时候是IO和网络的瓶颈。 8） 在整个过程中索引占的数据量已经占到了总数据量的相当大比例，在达到1亿4千万数据量的时候，光索引就可以占据整个内存，此时查询性能还是非常高，插入性能也不算太差，mongodb的性能确实很牛。 那么在来看看Sharding模式有什么亮点： 1） 非安全插入和单进程的配置一样，在内存满了之后性能急剧下降。安全插入性能和单进程相比慢不少，但是非常稳定。 2） 对于一个条件和两个条件的查询，性能都比较稳定，但条件查询性能相当于单进程的一半，但是在多条件下有的时候甚至会比单进程高一点。我想这可能是某些时候数据块位于两个Sharding，这样Mongos会并行在两个Sharding查询，然后在把数据进行合并汇总，由于查询返回的数据量小，网络不太可能成为瓶颈了，使得Sharding才有出头的机会。 3） 对于Order和Skip的查询，Sharding方式的差距就出来了，我想主要性能损失可能在Order，因为我们并没有按照排序字段作为Sharding的Key，使用的是_id作为Key，这样排序就比较难进行。 4） 对于返回大数据量的查询，Sharding方式其实和单进程差距不是很大，我想数据的转发可能是一个性能损耗的原因（虽然mongos位于打压机本机，但是数据始终是转手了一次）。 5） 对于磁盘空间的占用，两者其实是差不多的，其中的一些差距可能是因为多个进程都会多分配一点空间，加起来有的时候会比单进程多占用点磁盘（而那些占用比单进程少的地方其实是开始的编码错误，把实际数据大小和磁盘文件占用大小搞错了）。 测试最后的各个Sharding分布情况如下： { &quot;sharded&quot;:true, &quot;ns&quot;:&quot;testdb.test&quot;, &quot;count&quot;:209766143, &quot;size&quot;:214800530672, &quot;avgObjSize&quot;:1024.0000011441311, &quot;storageSize&quot;:222462757776, &quot;nindexes&quot;:4, &quot;nchunks&quot;:823, &quot;shards&quot;:{ &quot;shard0000&quot;:{ &quot;ns&quot;:&quot;testdb.test&quot;, &quot;count&quot;:69474248, &quot;size&quot;:71141630032, &quot;avgObjSize&quot;:1024.0000011515058, &quot;storageSize&quot;:74154252592, &quot;numExtents&quot;:65, &quot;nindexes&quot;:4, &quot;lastExtentSize&quot;:2146426864, &quot;paddingFactor&quot;:1, &quot;flags&quot;:1, &quot;totalIndexSize&quot;:11294125824, &quot;indexSizes&quot;:{ &quot;_id_&quot;:2928157632, &quot;Number_1&quot;:2832745408, &quot;Number1_1&quot;:2833974208, &quot;Date_-1&quot;:2699248576 }, &quot;ok&quot;:1 }, &quot;shard0001&quot;:{ &quot;ns&quot;:&quot;testdb.test&quot;, &quot;count&quot;:70446092, &quot;size&quot;:72136798288, &quot;avgObjSize&quot;:1024.00000113562, &quot;storageSize&quot;:74154252592, &quot;numExtents&quot;:65, &quot;nindexes&quot;:4, &quot;lastExtentSize&quot;:2146426864, &quot;paddingFactor&quot;:1, &quot;flags&quot;:1, &quot;totalIndexSize&quot;:11394068224, &quot;indexSizes&quot;:{ &quot;_id_&quot;:2969355200, &quot;Number_1&quot;:2826453952, &quot;Number1_1&quot;:2828403648, &quot;Date_-1&quot;:2769855424 }, &quot;ok&quot;:1 }, &quot;shard0002&quot;:{ &quot;ns&quot;:&quot;testdb.test&quot;, &quot;count&quot;:69845803, &quot;size&quot;:71522102352, &quot;avgObjSize&quot;:1024.00000114538, &quot;storageSize&quot;:74154252592, &quot;numExtents&quot;:65, &quot;nindexes&quot;:4, &quot;lastExtentSize&quot;:2146426864, &quot;paddingFactor&quot;:1, &quot;flags&quot;:1, &quot;totalIndexSize&quot;:11300515584, &quot;indexSizes&quot;:{ &quot;_id_&quot;:2930942912, &quot;Number_1&quot;:2835243968, &quot;Number1_1&quot;:2835907520, &quot;Date_-1&quot;:2698421184 }, &quot;ok&quot;:1 } }, &quot;ok&quot;:1 } 虽然在最后由于时间的关系，没有测到10亿级别的数据量，但是通过这些数据已经可以证明Mongodb的性能是多么强劲了。另外一个原因是，在很多时候可能数据只达到千万我们就会对库进行拆分，不会让一个库的索引非常庞大。在测试的过程中还发现几个问题需要值得注意： 1） 在数据量很大的情况下，对服务进行重启，那么服务启动的初始化阶段，虽然可以接受数据的查询和修改，但是此时性能很差，因为mongodb会不断把数据从磁盘换入内存，此时的IO压力非常大。 2） 在数据量很大的情况下，如果服务没有正常关闭，那么Mongodb启动修复数据库的时间非常可观，在1.8中退出的-dur貌似可以解决这个问题，据官方说对读取没影响，写入速度会稍稍降低，有空我也会再进行下测试。 3） 在使用Sharding的时候，Mongodb时不时会对数据拆分搬迁，这个时候性能下降很厉害，虽然从测试图中看不出（因为我每一次测试都会测试比较多的迭代次数），但是我在实际观察中可以发现，在搬迁数据的时候每秒插入性能可能会低到几百条。其实我觉得能手动切分数据库就手动切分或者手动做历史库，不要依赖这种自动化的Sharding，因为一开始数据就放到正确的位置比分隔再搬迁效率不知道高多少。个人认为Mongodb单数据库存储不超过1亿的数据比较合适，再大还是手动分库吧。 4） 对于数据的插入，如果使用多线程并不会带来性能的提高，反而还会下降一点性能（并且可以在http接口上看到，有大量的线程处于等待）。 5） 在整个测试过程中，批量插入的时候遇到过几次连接被远程计算机关闭的错误，怀疑是有的时候Mongodb不稳定关闭了连接，或是官方的C#客户端有BUG，但是也仅仅是在数据量特别大的时候遇到几次。 最新补充：在之后我又进行了几天测试，把测试数据量进一步加大到5亿，总磁盘占用超过500G，发现和2亿数据量相比，所有性能都差不多，只是测试6和测试7在超过2亿级别数据之后，每400万记录作为一个循环，上下波动30%的性能，非常有规律。 文章来源： http://www.taocms.org/435.html","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"Mongodb","slug":"Mongodb","permalink":"https://hero.triple.net.cn/tags/Mongodb/"},{"name":"海量数据","slug":"海量数据","permalink":"https://hero.triple.net.cn/tags/海量数据/"}]},{"title":"PHP Tips","slug":"php-tips","date":"2017-04-12T01:37:05.000Z","updated":"2018-12-12T09:27:29.782Z","comments":false,"path":"2017/04/12/php-tips/","link":"","permalink":"https://hero.triple.net.cn/2017/04/12/php-tips/","excerpt":"","text":"php中实现后台执行的方法：ignore_user_abort(true); // 后台运行 set_time_limit(0); // 取消脚本运行时间的超时上限 PHP 连接 RedisServer 时提示 Message: Redis::connect(): connect() failed: Permission denied第一次出现是连接远程的 Redis 服务器。之后尝试在本地也安装了一个 redis-server，然后手动启动，并连接——错误依旧 解决方法： 首先保证当前服务器已经安装了与当前执行的 PHP 版本对应的 Redis 扩展 然后到命令行执行： /usr/sbin/setsebool httpd_can_network_connect=1 参考来源： http://stackoverflow.com/questions/8765848/troubleshooting-permission-denied-when-attempting-to-connect-to-redis-from-php PHP 生成随机不可逆字符比如用作抵御csrf攻击的token // 命令行执行即可看到结果 php -r &quot;echo sha1(uniqid(rand(), true));&quot;","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"}]},{"title":"PHP 运行socket 时报错 too many open files的解决","slug":"php-socket-error-too-many-open-files","date":"2017-03-31T04:14:17.000Z","updated":"2018-12-12T09:58:23.220Z","comments":true,"path":"2017/03/31/php-socket-error-too-many-open-files/","link":"","permalink":"https://hero.triple.net.cn/2017/03/31/php-socket-error-too-many-open-files/","excerpt":"","text":"PHP 运行socket 时报错 too many open files的解决我用socket保存数据流为本地文件，然后向数据库追加一条记录，并返回给客户端 跑了一段时间之后，socket就挂掉了，并提示 too many open files 之前一直以为是 file_put_contents 函数或者socket未合理关闭导致的，结果查了好久也没找到原因，有不少网友说可以加大 ulimit 的句柄数（linux 下输入： ulimit -n 就可以看到当前系统的默认允许句柄大小，默认1024），但是个人觉得这个治标不治本。后来也尝试了，不解决问题，因为我传输的文件有数千万张。。。 后来发现，有可能是mysql 的问题，解决顺序如下： 使用 lsof -n |awk &apos;{print $2}&apos;|sort|uniq -c |sort -nr|more 命令可以查看系统中不同程序占用的句柄数，lsof 可能系统中默认没有安装，需要手动 install 一下 然后可以看到的结果类似下面这样： 第一列表示的是打开的句柄数，第二列是对应的进程ID 之后使用 ps -ef | grep [进程ID] 就可以看到哪个程序在大量占用句柄 然后，我发现我的是 mysql …弱智错误 —— PDO没有即使关闭。。因为平时写的程序都是非持续性运行的，PDO在PHP脚本执行完之后自动关闭， 但是这个 listen server 是不断打开、写入的，需要手动关闭官方文档说，$pdo=null 就可以了。。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"socket","slug":"socket","permalink":"https://hero.triple.net.cn/tags/socket/"}]},{"title":"PHP 检测socket服务端运行状态","slug":"php-e6-a3-80-e6-b5-8bsocket-e6-9c-8d-e5-8a-a1-e7-ab-af-e8-bf-90-e8-a1-8c-e7-8a-b6-e6-80-81","date":"2017-03-31T02:58:17.000Z","updated":"2018-12-12T09:22:01.268Z","comments":true,"path":"2017/03/31/php-e6-a3-80-e6-b5-8bsocket-e6-9c-8d-e5-8a-a1-e7-ab-af-e8-bf-90-e8-a1-8c-e7-8a-b6-e6-80-81/","link":"","permalink":"https://hero.triple.net.cn/2017/03/31/php-e6-a3-80-e6-b5-8bsocket-e6-9c-8d-e5-8a-a1-e7-ab-af-e8-bf-90-e8-a1-8c-e7-8a-b6-e6-80-81/","excerpt":"","text":"做了一个通过socket传输文件用的程序，分别部署在不同的机器上 但是经常会出现 socket-server 断掉的情况，所以 Google 了一下，有没有什么办法可以通过 PHP 检测socket服务端运行状态。 可以像下面这么写： /** * 检测socket端口是否开放(0超时，1正常，2关闭) * @param $ip * @param $port * @return string */ public static function checkPort($ip,$port) { $sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP); socket_set_nonblock($sock); socket_connect($sock,$ip, $port); socket_set_block($sock); $s_state = @socket_select($r = array($sock), $w = array($sock), $f = array($sock), 3); socket_close($sock); return $s_state; } 这样就可以了 title： PHP 检测socket服务端运行状态 from ： https://my.oschina.net/u/2663124/blog/740174","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"socket","slug":"socket","permalink":"https://hero.triple.net.cn/tags/socket/"}]},{"title":"在centos上使用yum安装redis及php扩展php-redis","slug":"e5-9c-a8centos-e4-b8-8a-e4-bd-bf-e7-94-a8yum-e5-ae-89-e8-a3-85redis-e5-8f-8aphp-e6-89-a9-e5-b1-95php-redis","date":"2017-03-24T09:50:35.000Z","updated":"2018-12-12T09:08:58.653Z","comments":true,"path":"2017/03/24/e5-9c-a8centos-e4-b8-8a-e4-bd-bf-e7-94-a8yum-e5-ae-89-e8-a3-85redis-e5-8f-8aphp-e6-89-a9-e5-b1-95php-redis/","link":"","permalink":"https://hero.triple.net.cn/2017/03/24/e5-9c-a8centos-e4-b8-8a-e4-bd-bf-e7-94-a8yum-e5-ae-89-e8-a3-85redis-e5-8f-8aphp-e6-89-a9-e5-b1-95php-redis/","excerpt":"","text":"1. 下载wget http://mirrors.ustc.edu.cn/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -ivh epel-release-6-8.noarch.rpm yum install redis php-redis 在CentOS下有时候用rpm安装软件会提示： warning: .rpm: Header V3 RSA/SHA256 Signature, keykey ID c105b9de: NOKEY 解决的方法就是在rpm 语句后面加上 –force –nodeps 即原本为 rpm -ivh .rpm 现在改成 rpm -ivh *.rpm –force –nodeps就可以了。nodeps的意思是忽视依赖关系。因为各个软件之间会有多多少少的联系。有了这两个设置选项就忽略了这些依赖关系，强制安装或者卸载 2.配置防火墙，让外网可以访问redis的6379端口vim /etc/sysconfig/iptables 添加 -A INPUT -p tcp -m tcp –dport 6379 -j ACCEPT 重启服务：/etc/init.d/iptables restart(或者service iptables restart) 3.外网访问的话，就打开redis的配置文件，在bind 127.0.0.1前面加上#号 执行vi /etc/redis.conf进行修改,然后重启redis服务 service redis restart(或者/etc/init.d/redis restart) 3.为php配置文件引入redis.so。1.cd /usr/lib64/php/modules/ 这个目录下有个redis.so 2.echo ‘extension=redis.so’ &gt; /etc/php.d/redis.ini 然后vi /etc/php.d/redis.ini，去掉里面的单引号 4.重启apacheservice httpd restart(或者/etc/init.d/httpd restart)","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"centos","slug":"centos","permalink":"https://hero.triple.net.cn/tags/centos/"},{"name":"redis","slug":"redis","permalink":"https://hero.triple.net.cn/tags/redis/"}]},{"title":"FREEBSD 使用代理上网的方法","slug":"freebsd-e4-bd-bf-e7-94-a8-e4-bb-a3-e7-90-86-e4-b8-8a-e7-bd-91-e7-9a-84-e6-96-b9-e6-b3-95","date":"2017-03-24T02:28:56.000Z","updated":"2018-12-12T09:19:14.604Z","comments":true,"path":"2017/03/24/freebsd-e4-bd-bf-e7-94-a8-e4-bb-a3-e7-90-86-e4-b8-8a-e7-bd-91-e7-9a-84-e6-96-b9-e6-b3-95/","link":"","permalink":"https://hero.triple.net.cn/2017/03/24/freebsd-e4-bd-bf-e7-94-a8-e4-bb-a3-e7-90-86-e4-b8-8a-e7-bd-91-e7-9a-84-e6-96-b9-e6-b3-95/","excerpt":"","text":"FREEBSD 使用代理上网的方法 FreeBSD 取消了第三方源，所以所有软件都要从主服务器下载，导致国内下载速度非常慢，通常只有 30-40k 左右。 如果有国外的代理，可以用来加速下载和更新软件 —– 为便于今后翻阅，实例预设公司代理服务器地址 192.168.10.100，对应服务端口是： http ====== 8080 ftp ======= 2121 socket ==== 1080 需要用户名和密码验证：用户名 user ，密码 123 1、fetch 的配置： fetch用于下载文件，无论是pkg_add -r 方式安装软件包，以及使用ports下载源程序包编译运行，默认都需要使用fetch 配置方法： ee ~/.cshrc setenv HTTP_PROXY http://user:123@192.168.10.100:8080 若无用户验证 setenv HTTP_PROXY http://192.168.10.100:8080 说明：HTTP_PROXY 是 fetch 程序所支持的环境变量，设置正确后，即可进行文件下载。 ————————————– 上面的方式已通过验证，验证OS： FreeBSD 11.0-RELEASE-p1 未使用密码、socket /etc/make.conf 在我的系统中不存在该文件 在/etc/make.conf中设置： FETCH_ENV =”HTTP_PROXY=IP[:端口]“ 如果需要，在FETCH_ENV值后面加入空格， HTTP_PROXY_AUTH=basic:*:user:password 2、使用 csup 更新 ports 和源代码 csup是FreeBSD基本系统所提供的更新ports和src的工具，因为它使用的是cvs协议，所以不能使用HTTP_PROXY的配置，一个解决的办法是使用socket，相关配置如下： 首先要安装 socks5 这个ports，方法是： cd /usr/ports/net/socks5 make install clean rehash 这个软件提供了一个代理服务器实现，但在这里使用的是它的客户端程序 runsocks 网络配置也是通过socks所支持的环境变量来实现，具体配置是： setenv SOCKS5_SERVER 192.168,10.100:1080 setenv SOCKS5_USER user setenv SOCKS5_PASSWD 123 runsocks使用这三个环境变量确定主机、端口、用户名和密码，至于使用sock4还是socket 5，虽说也提供了相关环境变量，但实际runsocks可进行自动检测。 更新ports和src的命令行： runsocks csup -L 2 ports-supfiles runsocks csup -L 2 your-src-supfiles 3、通过代理服务器使用 subvirsion 提示：若访问FreeBSD的svn库，推荐使用 /usr/ports/devel/subversion-freebsd 这个ports，这个ports提供了一个patch，用于访问FreeBSD的svn代码库 svn使用配置文件的方式设置代理服务器访问网络。配置文件具体路径为： ~/.subversion/ 以上，FREEBSD 使用代理上网的方法","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"代理","slug":"代理","permalink":"https://hero.triple.net.cn/tags/代理/"},{"name":"freebsd","slug":"freebsd","permalink":"https://hero.triple.net.cn/tags/freebsd/"}]},{"title":"华为手机解锁方式","slug":"e5-8d-8e-e4-b8-ba-e6-89-8b-e6-9c-ba-e8-a7-a3-e9-94-81-e6-96-b9-e5-bc-8f","date":"2017-03-21T03:52:54.000Z","updated":"2018-12-12T09:08:58.651Z","comments":true,"path":"2017/03/21/e5-8d-8e-e4-b8-ba-e6-89-8b-e6-9c-ba-e8-a7-a3-e9-94-81-e6-96-b9-e5-bc-8f/","link":"","permalink":"https://hero.triple.net.cn/2017/03/21/e5-8d-8e-e4-b8-ba-e6-89-8b-e6-9c-ba-e8-a7-a3-e9-94-81-e6-96-b9-e5-bc-8f/","excerpt":"","text":"首先要获取解锁码：http://emui.huawei.com/plugin/hwdownload/download 搜索框右下角，“刷机解锁” 第一步：准备工作 1. 在PC上正确安装手机驱动程序，驱动请在华为终端官网上下载。 2. 下载Google提供的ADB工具包并在PC上安装，如安装到D:adb_tools-2.0目录，确认目录中带有fastboot.exe文件。 第二步：解锁操作 1. 手机进入fastboot模式： 先将手机关机（注意需要首先在设置菜单中，关闭“快速启动”功能，或者关机后拔下电池，超过2秒后再重新插入），然后同时按下音量下键以及开机键（平板请同时按下音量上键及开机键），并保持10秒钟以上时间，就可以进入fastboot模式。 如果上述操作无法进入fastboot模式，请尝试使用如下步骤： 将手机关机（注意需要首先在设置菜单中，关闭“快速启动”功能，或者关机后拔下电池，超过2秒后再重新插入），然后插入USB线，紧接着同时按下音量下键和开机键，保持10秒钟以上时间，就可以进入fastboot模式。 2. 连接手机和PC机： 使用USB线连接手机和PC机，打开PC机的命令行窗口，进入ADB安装目录，确认手机与PC连接正常，确认方法为在命令行窗口输入fastboot devices，可以看到正常连接的信息，如：9e42530e fastboot。 3. 执行解锁命令： 在PC机命令行窗口中输入fastboot oem unlock **，*号为16位解锁密码，例如：fastboot oem unlock 1234567812345678。 4. 等待手机解锁完成： 输入解锁密码后，手机将自动重启，如果输入密码正确，手机将进入恢复出厂设置模式。恢复出厂设置完成后，手机自动重启，进入待机界面，完成整个解锁操作。如果用户输入密码信息不正确，手机将提示出错信息，并进入待机界面。 5. 查询手机解锁是否成功： 重复1、2步，然后在PC的命令行窗口中输入fastboot oem get-bootinfo，将显示当前手机bootloader的状态信息，例如“Bootloader Lock State: LOCKED”，表示bootloader仍处于锁定状态，请重新进行解锁操作或者确认密码是否正确后再进行；如果显示“Bootloader Lock State: UNLOCKED”，表示手机已经解锁，可以进行刷机操作。 注意：解锁成功后，如果希望将手机重新加锁请按以下步骤操作：首先，通过SD卡升级方式，将手机版本重新恢复为华为官方发布版本；然后，进入fastboot模式，在PC的命令行下输入命令fastboot oem relock **，*号为16位解锁密码。手机将自动重启，bootloader转换为“RELOCKED”状态。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"root","slug":"root","permalink":"https://hero.triple.net.cn/tags/root/"},{"name":"华为","slug":"华为","permalink":"https://hero.triple.net.cn/tags/华为/"},{"name":"手机","slug":"手机","permalink":"https://hero.triple.net.cn/tags/手机/"},{"name":"解锁","slug":"解锁","permalink":"https://hero.triple.net.cn/tags/解锁/"}]},{"title":"centos7 安装 fastdfs","slug":"centos7-e5-ae-89-e8-a3-85-fastdfs","date":"2017-03-16T07:17:58.000Z","updated":"2018-12-12T08:59:08.075Z","comments":true,"path":"2017/03/16/centos7-e5-ae-89-e8-a3-85-fastdfs/","link":"","permalink":"https://hero.triple.net.cn/2017/03/16/centos7-e5-ae-89-e8-a3-85-fastdfs/","excerpt":"","text":"安装编译环境 yum -y install gcc gcc-c++ 其他依赖库（是否必须尚未验证） yum -y groupinstall ‘Development Tools’ yum -y install wget 公共依赖，不执行会在编译 FASTDFS 时提示找不到 logger.h wget https://github.com/happyfish100/libfastcommon/archive/master.zip unzip master.zip cd libfastcommon-master ./make.sh ./make.sh install 安装主体程序 wget https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz tar -zxvf V5.05.tar.gz cd fastdfs-5.05/ ./make.sh ./make.sh install 关闭**firewall**： systemctl stop firewalld.service #停止firewall systemctl disable firewalld.service #禁止firewall开机启动 测试 连接**/**调用 Java 客户端： https://github.com/happyfish100/fastdfs-client-java","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://hero.triple.net.cn/tags/centos/"},{"name":"fastdfs","slug":"fastdfs","permalink":"https://hero.triple.net.cn/tags/fastdfs/"}]},{"title":"CentOS 7 安装 LNMP","slug":"centos-7-e5-ae-89-e8-a3-85-lnmp","date":"2017-03-16T07:02:41.000Z","updated":"2018-12-18T04:21:16.995Z","comments":true,"path":"2017/03/16/centos-7-e5-ae-89-e8-a3-85-lnmp/","link":"","permalink":"https://hero.triple.net.cn/2017/03/16/centos-7-e5-ae-89-e8-a3-85-lnmp/","excerpt":"","text":"FROM DigitalOcean Install Nginx1234567sudo yum install epel-releasesudo yum install nginxsudo systemctl start nginxsudo systemctl enable nginx Install MySQL (MariaDB)123456789 sudo yum install mariadb-server mariadb sudo systemctl start mariadb sudo mysql_secure_installation sudo systemctl enable mariadb## Install PHP sudo yum install php php-mysql php-fpm sudo vi /etc/php.ini /* 设置对应配置为： */ cgi.fix_pathinfo=0 sudo vi /etc/php-fpm.d/www.conf 12修改相应配置： listen = /var/run/php-fpm/php-fpm.sock listen.owner = nobody listen.group = nobody user = nginx group = nginx sudo systemctl start php-fpm sudo systemctl enable php-fpm 12## Configure Nginx to Process PHP Pages sudo vi /etc/nginx/conf.d/default.conf 12修改为类似下面的： server { listen 80; server_name server_domain_name_or_IP; # note that these lines are originally from the &quot;location /&quot; block root /usr/share/nginx/html; index index.php index.html index.htm; location / { try_files $uri $uri/ =404; } error_page 404 /404.html; error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } location ~ .php$ { try_files $uri =404; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } 12 ### 重新启动 nginx sudo systemctl restart nginx 1## Test PHP Processing on your Web Server sudo vi /usr/share/nginx/html/info.php # 输入以下内容： &lt;?php phpinfo(); ?&gt; sudo rm /usr/share/nginx/html/info.php","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"},{"name":"centos","slug":"centos","permalink":"https://hero.triple.net.cn/tags/centos/"},{"name":"nginx","slug":"nginx","permalink":"https://hero.triple.net.cn/tags/nginx/"}]},{"title":"Emacs编辑ASP.NET","slug":"coding-asp-net-in-emacs24","date":"2017-03-15T08:42:38.000Z","updated":"2018-12-12T09:48:31.731Z","comments":true,"path":"2017/03/15/coding-asp-net-in-emacs24/","link":"","permalink":"https://hero.triple.net.cn/2017/03/15/coding-asp-net-in-emacs24/","excerpt":"","text":"要求，Emacs24 以上 首先在配置文件中（默认位置是 C:Users\\[UserName\\]AppDataRoaming.emacs）添加如下代码 1234567(when (&gt;= emacs-major-version 24) (require &apos;package) (add-to-list &apos;package-archives &apos;(&quot;melpa&quot; . &quot;http://melpa.org/packages/&quot;) t) (package-initialize)) 完成之后，重启Emacs 然后 M-x list-packages 运行 根据需要安装插件http://ergoemacs.org/emacs/emacs\\_package\\_system.html","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"asp.net","slug":"asp-net","permalink":"https://hero.triple.net.cn/tags/asp-net/"},{"name":"emacs","slug":"emacs","permalink":"https://hero.triple.net.cn/tags/emacs/"}]},{"title":"CentOS下pip和shadowsocks的安装使用","slug":"centos-e4-b8-8bpip-e5-92-8cshadowsocks-e7-9a-84-e5-ae-89-e8-a3-85-e4-bd-bf-e7-94-a8","date":"2016-04-27T06:57:13.000Z","updated":"2018-12-12T08:59:08.123Z","comments":false,"path":"2016/04/27/centos-e4-b8-8bpip-e5-92-8cshadowsocks-e7-9a-84-e5-ae-89-e8-a3-85-e4-bd-bf-e7-94-a8/","link":"","permalink":"https://hero.triple.net.cn/2016/04/27/centos-e4-b8-8bpip-e5-92-8cshadowsocks-e7-9a-84-e5-ae-89-e8-a3-85-e4-bd-bf-e7-94-a8/","excerpt":"","text":"centos 我机器上装的时候，不能直接通过yum install pip, 而通过下面的， easy_install 安装成功了。 可以通过使用 “sudo yum install epel-release” 来安装 python-pip 另一点要注意的是，配置文件中的名称和值之间虽然是通过冒号分割的，但是还是要留出空格，否则会提示找不到服务器: “server”:”123.123.123.123” // 错误！ “server” : “123.123.123.123” // 正确 Pip是安装Python包的工具，提供了安装、列举已安装包、升级以及卸载包的功能。Pip 是对easy_install的取代，提供了和easy_install相同的查找包的功能，因此可以使用easy_install安装的包也同样可以使用pip进行安装。 目前有很多Python程序都是可以直接通过Pip来一键安装了，比如众所周知的Django、Markdown、Shadowsocks等。 简要介绍一下Pip的用法（以安装Shadowsocks举例）： 1、安装package pip install shadowsocks 2、列出已安装的packages pip freeze 3、安装特定版本的package pip install shadowsocks=1.3.3′ pip install shadowsocks&gt;1.0,&lt;1.3.3′ 4、升级已安装的package到最新版本 pip install -U shadowsocks 5、卸载已安装的package pip uninstall shadowsocks 6、查询已安装的package pip search “shadowsocks” 安装Pip之前必须要先安装setuptools，安装setuptools之前，必须要安装了Python，这之间的安装过程存在依赖关系，缺一不可。因此，整个过程还是比较麻烦的。 1、 检查Python版本 python –version CentOS 6.5默认安装的Python版本是2.6.6，返回值为：Python 2.6.6 2、 安装setuptools yum install -y python-setuptools 安装完毕后，easy_install命令就可以使用了。 3、 安装pip easy_install pip 通过easy_install安装pip是最为简单的方法。pip默认安装到/usr/bin目录下。 4、 安装shadowsocks pip install shadowsocks 截至目前，通过pip安装的shadowsocks版本为2.8.2 [2018-2-1] Shadowsocks的配置和使用 至于Shadowsocks可以拿来做什么，这里就毋须赘述了。直接开始吧。 1、 创建Shadowsocks的配置文件： CentOS下通过vim创建该配置，运行命令： vi /etc/config.json 内容如下： { &quot;server&quot;:&quot;my_server_ip&quot;, &quot;server_port&quot;:8989, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;teddysun.com&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot; } 各字段的含义： server 服务器 IP (IPv4/IPv6)，注意这也将是服务端监听的 IP 地址 server_port 服务器端口 local_port 本地端端口 password 用来加密的密码 timeout 超时时间（秒） method 加密方法，可选择 “bf-cfb”, “aes-256-cfb”, “des-cfb”, “rc4″, 等等。默认是一种不安全的加密，推荐用 “aes-256-cfb” 创建完毕后，赋予权限： chmod 755 /etc/config.json 2、 安装M2Crypto 默认加密方法 table 速度很快，但很不安全。推荐使用 “aes-256-cfb” 或者 “bf-cfb”。请不要使用 “rc4″，它不安全。如果选择 “table” 之外的加密，需要安装 M2Crypto。 先安装依赖包： yum install -y openssl-devel gcc swig python-devel autoconf libtool 安装setuptools： wget --no-check-certificate https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py python ez_setup.py install再通过pip安装M2Crypto： pip install M2Crypto 3、 安装 gevent 安装 gevent可以提高 Shadowsocks 的性能。CentOS下安装gevent依赖libevent和greenlet。 安装libevent： yum install -y libevent 安装greenlet： pip install greenlet 安装gevent： pip install gevent 4、 命令行参数（服务器端启动命令） ssserver -c /etc/config.json 如果想在后台一直运行Shadowsocks，启动命令如下： nohup ssserver -c /etc/config.json &gt; /dev/null 2&gt;&amp;1 &amp;备注：关于nohup，是可以让程序在后台运行的命令，当执行以上命令后，屏幕输出进程的pid，同时提示： nohup: ignoring input and redirecting stderr to stdout 此时，再次回车一下，回到shell输入命令窗口即可。 同时可以用命令行参数覆盖 config.json 里的设置： sslocal -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法 ssserver -p 服务器端口 -k 密码 -m 加密方法 备注：sslocal是客户端程序；ssserver是服务端程序。 5、 防火墙设置（如有） 编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。 新增一条防火墙规则： -A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT重启防火墙iptables： service iptables restart 至此，服务器端的Shadowsocks安装和配置完毕。 6、客户端配置 Windows客户端有图形界面也有命令行，我们这里以配置图形化界面的shadowsocks-csharp为例说明。 下载客户端shadowsocks-csharp（最新版1.1.2）： https://shadowsocks-csharp.googlecode.com/files/shadowsocks-csharp-1.1.2.zip 解压至任意目录下，双击shadowsocks-csharp.exe运行程序，各参数选项填入： Server IP: 服务器 IP (IPv4/IPv6)，填入在服务器端设置的IP地址（server） Server Port: 服务器端口，填入在服务器端设置的端口号（server_port） Password: 用来加密的密码，填入在服务器端设置的加密密码（password） Proxy Port: 本地端代理的端口，填入在服务器端设置的本地端端口（local_port） Encryptor: 加密方法，填入在服务器端设置的加密方法（method） 备注：本地客户端填写的参数一定要与服务器端设置的一致才可以。 下面就可以利用浏览器插件无障碍浏览国外网站了。插件的设置过程这里略过。 AutoProxy（用于Firefox）、Proxy SwitchySharp（用于Chrome）","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"centos","slug":"centos","permalink":"https://hero.triple.net.cn/tags/centos/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://hero.triple.net.cn/tags/shadowsocks/"}]},{"title":"什么时候该使用 LVM？","slug":"e4-bb-80-e4-b9-88-e6-97-b6-e5-80-99-e8-af-a5-e4-bd-bf-e7-94-a8-lvm-ef-bc-9f","date":"2016-04-11T01:15:22.000Z","updated":"2018-12-12T09:05:36.286Z","comments":true,"path":"2016/04/11/e4-bb-80-e4-b9-88-e6-97-b6-e5-80-99-e8-af-a5-e4-bd-bf-e7-94-a8-lvm-ef-bc-9f/","link":"","permalink":"https://hero.triple.net.cn/2016/04/11/e4-bb-80-e4-b9-88-e6-97-b6-e5-80-99-e8-af-a5-e4-bd-bf-e7-94-a8-lvm-ef-bc-9f/","excerpt":"","text":"Linux 2.4 之后就开始在内核上支持 LVM 分区管理模式了，具体介绍网上一搜一大堆，找了下适用情况： 使用 LVM 的优势： 文件系统可以跨多个磁盘，因此大小不会受物理磁盘的限制。 可以在系统运行状态下动态地扩展文件系统大小。 可以增加新磁盘到 LVM 的存储池中。 可以以镜像的方式冗余重要数据到多个物理磁盘上。 可以很方便地导出整个卷组，并导入到另外一台机器上。 使用 LVM 的限制： 在从卷组中移除一个磁盘时必须使用 reducevg，否则会出问题。 当卷组中的一个磁盘损坏时，整个卷组都会受影响。 不能减小文件系统大小（受文件系统类型限制）。 因为加入了额外的操作，存储性能会受影响（使用 Stripe 的情况另当别论）。 使用 LVM 将获得更好的可扩展性和可操作性，但却损失了可靠性和存储性能，总的说来就是在这两者间选择。 使用要点 按需分配文件系统大小，不要一次性分配太大的空间给文件系统，剩余的空间可以放在存储池中，在需要时再扩充到文件系统中。 把不同的数据放在不同的卷组中，这样在做系统升级或数据迁移操作时会比较方便。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"lvm","slug":"lvm","permalink":"https://hero.triple.net.cn/tags/lvm/"}]},{"title":"emacs 关闭当前缓冲区","slug":"emacs-e5-85-b3-e9-97-ad-e5-bd-93-e5-89-8d-e7-bc-93-e5-86-b2-e5-8c-ba","date":"2016-03-31T05:26:58.000Z","updated":"2018-12-12T09:19:14.511Z","comments":true,"path":"2016/03/31/emacs-e5-85-b3-e9-97-ad-e5-bd-93-e5-89-8d-e7-bc-93-e5-86-b2-e5-8c-ba/","link":"","permalink":"https://hero.triple.net.cn/2016/03/31/emacs-e5-85-b3-e9-97-ad-e5-bd-93-e5-89-8d-e7-bc-93-e5-86-b2-e5-8c-ba/","excerpt":"","text":"一般方式Ctrl+x 0 是将当前缓冲区隐藏（当同时显示多个分区时）Ctrl+x 1 是将当前缓冲区撑满（当同时显示多个分区时）Ctrl+x 2 横向划分编辑区Ctrl+x 3 纵向划分编辑区 Ctrl+x k 彻底关闭该缓冲区，并释放和缓冲区关联的文件 高级一点的用法Ctrl + x 5 2 打开一个新的窗口Ctrl + x 5 1 关闭其他窗口（当有多个窗口时） 其他方式M-x kill-this-buffer","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://hero.triple.net.cn/tags/emacs/"},{"name":"缓冲区","slug":"缓冲区","permalink":"https://hero.triple.net.cn/tags/缓冲区/"}]},{"title":"easyui 自定义事件绑定","slug":"easyui-e8-87-aa-e5-ae-9a-e4-b9-89-e4-ba-8b-e4-bb-b6-e7-bb-91-e5-ae-9a","date":"2016-03-29T05:17:35.000Z","updated":"2018-12-12T09:19:14.481Z","comments":true,"path":"2016/03/29/easyui-e8-87-aa-e5-ae-9a-e4-b9-89-e4-ba-8b-e4-bb-b6-e7-bb-91-e5-ae-9a/","link":"","permalink":"https://hero.triple.net.cn/2016/03/29/easyui-e8-87-aa-e5-ae-9a-e4-b9-89-e4-ba-8b-e4-bb-b6-e7-bb-91-e5-ae-9a/","excerpt":"","text":"举例： 给文本框绑定 onkeypress 事件： $(“#pro_quotation”).textbox(‘textbox’).bind(‘keypress’, function () { console.log(“pro_price:”+$(“#pro_quotation”).textbox(‘getValue’)); calc();}); 另一种绑定方式： $(‘#txtPwd’).textbox({ inputEvents: $.extend({}, $.fn.textbox.defaults.inputEvents, { keypress: function (e) { if (e.keyCode == 13) { UserLogin(); } } })}); 实测下来，这样的方式其实也是有局限性的， easyui 在页面渲染时，实际上把用户自定义的 textbox 给转换成 了。而渲染完成后，在页面上显示、等待用户输入的文本框是自动生成的。自定义的方法不一定会准确的获取到输入的值。 也就是说，即使在 bind 中重写了 keypress 方法，输入的内容也不会立即被获取到（如上文示例）只有在失去焦点时才会重新赋值。所以如果企图用 keyup 、 keydown 、 keypress 这样的方法来即时获取文本框的值，是取不到的。 只能等待失去焦点后才行。 参考文章：http://www.cnblogs.com/david--huang/p/4681022.html","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"},{"name":"技术分类","slug":"大前端！/技术分类","permalink":"https://hero.triple.net.cn/categories/大前端！/技术分类/"}],"tags":[{"name":"easyui","slug":"easyui","permalink":"https://hero.triple.net.cn/tags/easyui/"},{"name":"javascript","slug":"javascript","permalink":"https://hero.triple.net.cn/tags/javascript/"}]},{"title":"js给表格新增行","slug":"js-e7-bb-99-e8-a1-a8-e6-a0-bc-e6-96-b0-e5-a2-9e-e8-a1-8c","date":"2016-03-25T06:28:48.000Z","updated":"2018-12-12T09:19:37.255Z","comments":true,"path":"2016/03/25/js-e7-bb-99-e8-a1-a8-e6-a0-bc-e6-96-b0-e5-a2-9e-e8-a1-8c/","link":"","permalink":"https://hero.triple.net.cn/2016/03/25/js-e7-bb-99-e8-a1-a8-e6-a0-bc-e6-96-b0-e5-a2-9e-e8-a1-8c/","excerpt":"","text":"如题，有时候会有这样的需求 记录下，核心代码就两个方法：insertRow 和 insertCell 具体使用方式自己摸索下，或者参考 w3c 文档 bill killed td{border:solid 1px red} Name value 11111 +Add 2222 3333 function addNewLine() { alert(“welcome to new world!”); var new_world = document.getElementById(“tb_the_world”).insertRow(2); console.log(new_world); var new_title = new_world.insertCell(0); var new_balance = new_world.insertCell(1); var new_story = new_world.insertCell(2); new_title.innerHTML = (“New Name”); new_balance.innerHTML = (“$100000”); new_story.innerHTML=”long long ago, and there before….”; } 界面效果截图：","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"},{"name":"技术分类","slug":"大前端！/技术分类","permalink":"https://hero.triple.net.cn/categories/大前端！/技术分类/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hero.triple.net.cn/tags/javascript/"}]},{"title":"依赖注入","slug":"474","date":"2016-03-25T02:21:23.000Z","updated":"2018-12-12T08:57:54.150Z","comments":true,"path":"2016/03/25/474/","link":"","permalink":"https://hero.triple.net.cn/2016/03/25/474/","excerpt":"","text":"依赖注入###1. 依赖如果在 Class A 中，有 Class B 的实例，则称 Class A 对 Class B 有一个依赖。例如下面类 Human 中用到一个 Father 对象，我们就说类 Human 对类 Father 有一个依赖。 12345678public class Human &#123; ... Father father; ... public Human() &#123; father = new Father(); &#125;&#125; 仔细看这段代码我们会发现存在一些问题：(1). 如果现在要改变 father 生成方式，如需要用`new Father(String name)`初始化 father，需要修改 Human 代码；(2). 如果想测试不同 Father 对象对 Human 的影响很困难，因为 father 的初始化被写死在了 Human 的构造函数中；(3). 如果`new Father()`过程非常缓慢，单测时我们希望用已经初始化好的 father 对象 Mock 掉这个过程也很困难。 ###2. 依赖注入上面将依赖在构造函数中直接初始化是一种 Hard init 方式，弊端在于两个类不够独立，不方便测试。我们还有另外一种 Init 方式，如下： 12345678public class Human &#123; ... Father father; ... public Human(Father father) &#123; this.father = father; &#125;&#125; 上面代码中，我们将 father 对象作为构造函数的一个参数传入。在调用 Human 的构造方法之前外部就已经初始化好了 Father 对象。像这种非自己主动初始化依赖，而通过外部来传入依赖的方式，我们就称为依赖注入。现在我们发现上面 1 中存在的两个问题都很好解决了，简单的说依赖注入主要有两个好处：(1). 解耦，将依赖之间解耦。(2). 因为已经解耦，所以方便做单元测试，尤其是 Mock 测试。 ###3. Java 中的依赖注入 依赖注入的实现有多种途径，而在 Java 中，使用注解是最常用的。通过在字段的声明前添加 @Inject 注解进行标记，来实现依赖对象的自动注入。 1234567public class Human &#123; ... @Inject Father father; ... public Human() &#123; &#125;&#125; 上面这段代码看起来很神奇：只是增加了一个注解，Father 对象就能自动注入了？这个注入过程是怎么完成的？ 实质上，如果你只是写了一个 @Inject 注解，Father 并不会被自动注入。你还需要使用一个依赖注入框架，并进行简单的配置。现在 Java 语言中较流行的依赖注入框架有 [Google Guice](https://github.com/google/guice)、\\[Spring\\](http://projects.spring.io/spring-framework/) 等，而在 Android 上比较流行的有 [RoboGuice](https://github.com/roboguice/roboguice)、\\[Dagger\\](http://square.github.io/dagger/) 等。其中 Dagger 是我现在正在项目中使用的。如果感兴趣，你可以到 [Dagger 实现原理解析](https://github.com/android-cn/android-open-project-analysis/tree/master/dagger) 了解更多依赖注入和 Dagger 实现原理相关信息。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"依赖注入","slug":"依赖注入","permalink":"https://hero.triple.net.cn/tags/依赖注入/"}]},{"title":"Dropbox 使用技巧","slug":"dropbox-e4-bd-bf-e7-94-a8-e6-8a-80-e5-b7-a7","date":"2016-03-19T11:57:02.000Z","updated":"2018-12-12T08:59:32.223Z","comments":true,"path":"2016/03/19/dropbox-e4-bd-bf-e7-94-a8-e6-8a-80-e5-b7-a7/","link":"","permalink":"https://hero.triple.net.cn/2016/03/19/dropbox-e4-bd-bf-e7-94-a8-e6-8a-80-e5-b7-a7/","excerpt":"","text":"原文：The Best Apps for your Dropbox Dropbox全球拥有五千万用户，因为这种巨大的普及，围绕Dropbox创建的基于在线存储服务的新的功能和扩展已经形成了一个完整的生态系统。下面是一些最好的应用程序，你应该用你的Dropbox帐户体验一下。 1。使用Dropbox的搭建一个网站或博客 你的Dropbox有一个公共文件夹，你在这个文件夹中添加的文件，网络上任何人都可以访问到，只要他们有一个链接指向该文件。从而可以把所有的HTML，JAVASCRIPT，CSS和图像文件放到这个文件夹中， 定向到你的域名，你的迷你网站就正式上线了。 另外，如果你想有一个更简单的解决方案，使用 http://DropPages.com，Scriptogr.am 和 http://Pancake.io这样的应用，它们都可以使用Dropbox免费的发布你的简单的网站。DropPages和Pancake适合定期发布网页，而Scriptogram更适合于博客格式（按时间倒序）。 2。同步Google Docs和Dropbox。 如果你在“Google Docs中写一个文档，离线后在你的Dropbox文件夹内就可以访问到，岂不是很给力？或反之亦然，你在Dropbox中添加一个或多个文件，它们奇迹般地出现在你的Google Docs 帐户中？ 有 一个优秀的服务，叫做insync，可以通过哥小技巧使得你的Google Docs文件可以与你的桌面文件夹同步，你也可以将它与Dropbox整合使用。启动Insync应用程序（在Mac和Windows下都可使用），在 “首选项”下，只是改变默认Insync目录到Dropbox文件夹下。另一种方法是cloudHQ ，不过他们的免费服务有一些限制。 3。在Dropbox中保存电子邮件附件 通过Attachments.me is Shutting Down，你只需要点击一下，就可以快速地将Gmail帐户中的附件保存到你的Dropbox文件夹中。 这样做有两个途径。您既可以安装Attachments.me is Shutting Down的Chrome扩展，只要你正在Gmail中读取消息，就可以发送任意附件到你的Dropbox中，而无需离开Gmail。另外，你可以使用Attachments.me is Shutting Down的网站，来将你的电子邮件附件保存到Dropbox中。 4。保存到网页剪辑到Dropbox Gimme Bar是一个整洁的书签服务，让你剪辑网页，照片和其他一切你在网络上所看到的。它甚至抓取整个网页的截图，所以存档页面的外观酷似你在屏幕上看到的。 你可以将Gimme Bar 帐户与Dropbox帐户连接，它会定期将你保存的所有网页剪报转存到你的Dropbox文件夹中。尽管备份不是及时的。 5。下载在线文件到Dropbox 通过URL Droplet，你可以下载任意在线文件，甚至远程计算机中的文件，到你的Dropbox文件夹。 只需复制和粘贴任何网络文件的网址到URL Droplet，这个应用程序将在后台自动保存该文件到你的Dropbox文件夹。当你想下载文件当你的Dropbox，但你使用的电脑，例如办公室的电脑，登录的不是你的Dropbox帐户时将非常有用。 6。在Dropbox文件夹中接收文件 你希望他人（比如你的客户）将文件上传到你的Dropbox，但又不想与他们分享你的Dropbox文件夹吗？ 有一个称为“DropItToMe”的免费服务，让你可以从任何人、任何地方接收文件，这些文件将直接添加到你的Dropbox中。或者，你可以使用JotForm创建一个在线的表格，通过这个表格上传的任何文件将发送到你的Dropbox。 7。将Dropbox的文件传输到任何云服务 如果你正在寻找一种简单的方式，在不同云服务（例如Dropbox，Google Docs， Picasa等）中传输文件，Otixo是一个近乎完美的解决方案。 Otixo连接到所有流行的云服务，包括Dropbox，并可以让你你在一个地方访问到你所有的在线文件。然后，就像Windows资源管理器或苹果的Finder，你通过简单的拖拽就可以从这个云服务复制或移动文件到另一个云服务。 8。通过电子邮件将文件上传到Dropbox Dropbox，与SugarSync不同，并没有提供一个选项来通过电子邮件上传文件，但有一个叫做“Send To Dropbox”的免费的应用，可以帮助你做到这一点。 一旦你通过这个应用连接到你的Dropbox帐户，它就会提供一个唯一的电子邮件地址，发送到该地址的任何文件将保存到你的Dropbox帐户。从手机上传文件到Dropbox或快速保存Gmail附件保存到Dropbox，这将是很有用的。还有一个DIY 应用备用 。 相关提示：利用Dropbox从手机打印文件。 9。用Dropbox进行无干扰写作 Write Box是最小的用于写作的浏览器应用，自动保存文本到你的Dropbox任意文件夹中。你也可以在Write Box中打开Dropbox中的任意文本文件，并在浏览器中编辑它们。 这个应用没有工具栏，你可以切换到浏览器的全屏模式（按F11）进行更舒适的无干扰写作。按Ctrl + S随时快速同步你编辑文档到Dropbox。 10。让你的Dropbox爆发威力 有了像IFTTT和Dropbox Automator这样的工具，你可以很容易地将Dropbox与其他各种服务，如Facebook、Evernote、Twitter、Instagram等整合，做一些非常有意思的东西，否则可能需要编程。 例 如，你可以设置一个任务，只要在你的Dropbox文件夹添加图片将自动上传到Facebook。或设置任务，当你在指定的Dropbox文件夹添加电子 书或者其他文档时，自动将其添加到你的Kindle。可能性是无穷无尽的，如果你花一些时间理解IFTTT，它可能会是Dropbox所需的唯一插件。 还有.. 这些应用使用OAuth连接到Dropbox，这样你不用分别去登录它们。这就是说，如果你已经尝试了一个Dropbox应用，并且以后不打算再使用它，到这里，并从你的帐户中永久删除该应用程序。 喜欢它的话。这里有更多关于Dropbox的技巧和窍门。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"dropbox","slug":"dropbox","permalink":"https://hero.triple.net.cn/tags/dropbox/"}]},{"title":"重装win7后，修复ubuntu引导方法","slug":"e9-87-8d-e8-a3-85win7-e5-90-8e-ef-bc-8c-e4-bf-ae-e5-a4-8dubuntu-e5-bc-95-e5-af-bc-e6-96-b9-e6-b3-95","date":"2016-03-19T09:33:44.000Z","updated":"2018-12-12T09:13:43.668Z","comments":true,"path":"2016/03/19/e9-87-8d-e8-a3-85win7-e5-90-8e-ef-bc-8c-e4-bf-ae-e5-a4-8dubuntu-e5-bc-95-e5-af-bc-e6-96-b9-e6-b3-95/","link":"","permalink":"https://hero.triple.net.cn/2016/03/19/e9-87-8d-e8-a3-85win7-e5-90-8e-ef-bc-8c-e4-bf-ae-e5-a4-8dubuntu-e5-bc-95-e5-af-bc-e6-96-b9-e6-b3-95/","excerpt":"","text":"电脑本来是win7+ubuntu12.04双系统，后来格式化c盘重装了win7，没了ubuntu的引导，网上试了一些方法，成功恢复了引导。下面是方法： 用u盘做成ubuntu启动盘，或者用刻好的光盘也行，从u盘启动，选择试用ubuntu，不要安装。进入系统后，打开终端： sudo -i //取得root权限 fdisk -l //查看分区信息，找出你的linux的分区，比如我的是sda9 mount /dev/sda9 /mnt //挂载你的boot分区 grub-install –root-directory=/mnt /dev/sda //修复grub 输入完之后如果出现no error report，就已经成功了。 然后重启电脑，就可以看到熟悉的grub启动列表了。 不过还没完，现在只是能进去ubuntu，win7进不去了，然后还要进入ubuntu，打开终端输入： sudo update-grub //更新grub 这样才能启动win7.","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://hero.triple.net.cn/tags/ubuntu/"}]},{"title":"IBM 文章: 用Java开发代理服务器","slug":"ibm-e6-96-87-e7-ab-a0-e7-94-a8java-e5-bc-80-e5-8f-91-e4-bb-a3-e7-90-86-e6-9c-8d-e5-8a-a1-e5-99-a8","date":"2016-03-14T03:37:14.000Z","updated":"2018-12-12T09:19:37.177Z","comments":true,"path":"2016/03/14/ibm-e6-96-87-e7-ab-a0-e7-94-a8java-e5-bc-80-e5-8f-91-e4-bb-a3-e7-90-86-e6-9c-8d-e5-8a-a1-e5-99-a8/","link":"","permalink":"https://hero.triple.net.cn/2016/03/14/ibm-e6-96-87-e7-ab-a0-e7-94-a8java-e5-bc-80-e5-8f-91-e4-bb-a3-e7-90-86-e6-9c-8d-e5-8a-a1-e5-99-a8/","excerpt":"","text":"http://www.ibm.com/developerworks/cn/java/l-javaproxy/ 基础知识不管以哪种方式应用代理服务器，其监控HTTP传输的过程总是如下： 步骤一：内部的浏览器发送请求给代理服务器。请求的第一行包含了目标URL。 步骤二：代理服务器读取该URL，并把请求转发给合适的目标服务器。 步骤三：代理服务器接收来自Internet目标机器的应答，把应答转发给合适的内部浏览器。 例如，假设有一个企业的雇员试图访问www.cn.ibm.com网站。如果没有代理服务器，雇员的浏览器打开的Socket通向运行这个网站的Web服务器，从Web服务器返回的数据也直接传递给雇员的浏览器。如果浏览器被配置成使用代理服务器，则请求首先到达代理服务器；随后，代理服务器从请求的第一行提取目标URL，打开一个通向www.cn.ibm.com的Socket。当www.cn.ibm.com返回应答时，代理服务器把应答转发给雇员的浏览器。 当然，代理服务器并非只适用于企业环境。作为一个开发者，拥有一个自己的代理服务器是一件很不错的事情。例如，我们可以用代理服务器来分析浏览器和Web服务器的交互过程。测试和解决Web应用中存在的问题时，这种功能是很有用的。我们甚至还可以同时使用多个代理服务器（大多数代理服务器允许多个服务器链接在一起使用）。例如，我们可以有一个企业的代理服务器，再加上一个用Java编写的代理服务器，用来调试应用程序。但应该注意的是，代理服务器链上的每一个服务器都会对性能产生一定的影响。 回页首 设计规划正如其名字所示，代理服务器只不过是一种特殊的服务器。和大多数服务器一样，如果要处理多个请求，代理服务器应该使用线程。下面是一个代理服务器的基本规划： 等待来自客户（Web浏览器）的请求。 启动一个新的线程，以处理客户连接请求。 读取浏览器请求的第一行（该行内容包含了请求的目标URL）。 分析请求的第一行内容，得到目标服务器的名字和端口。 打开一个通向目标服务器（或下一个代理服务器，如合适的话）的Socket。 把请求的第一行发送到输出Socket。 把请求的剩余部分发送到输出Socket。 把目标Web服务器返回的数据发送给发出请求的浏览器。 当然，如果考虑细节的话，情况会更复杂一些。实际上，这里主要有两个问题要考虑：第一，从Socket按行读取数据最适合进一步处理，但这会产生性能瓶颈；第二，两个Socket之间的连接必需高效。有几种方法可以实现这两个目标，但每一种方法都有各自的代价。例如，如果要在数据进入的时候进行过滤，这些数据最好按行读取；然而，大多数时候，当数据到达代理服务器时，立即把它转发出去更适合高效这一要求。另外，数据的发送和接收也可以使用多个独立的线程，但大量地创建和拆除线程也会带来性能问题。因此，对于每一个请求，我们将用一个线程处理数据的接收和发送，同时在数据到达代理服务器时，尽可能快速地把它转发出去。 页面备份: PDF","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"}]},{"title":"通过EF更新数据","slug":"e9-80-9a-e8-bf-87ef-e6-9b-b4-e6-96-b0-e6-95-b0-e6-8d-ae","date":"2016-03-03T09:10:52.000Z","updated":"2018-12-12T09:13:43.654Z","comments":true,"path":"2016/03/03/e9-80-9a-e8-bf-87ef-e6-9b-b4-e6-96-b0-e6-95-b0-e6-8d-ae/","link":"","permalink":"https://hero.triple.net.cn/2016/03/03/e9-80-9a-e8-bf-87ef-e6-9b-b4-e6-96-b0-e6-95-b0-e6-8d-ae/","excerpt":"","text":"通过ef（Entity Framework）更新数据的方式： bool flag_upt = false;try{ DbEntityEntry dee = anl.Entry(ct); dee.State = System.Data.EntityState.Unchanged; dee.Property(“LastName”).IsModified = true; dee.Property(“MiddleName”).IsModified = true; dee.Property(“FirstName”).IsModified = true; dee.Property(“CType”).IsModified = true; dee.Property(“Phone1”).IsModified = true; dee.Property(“Phone2”).IsModified = true; dee.Property(“Email”).IsModified = true; dee.Property(“Remark”).IsModified = true; dee.Property(“Sex”).IsModified = true; dee.Property(“Birthday”).IsModified = true; dee.Property(“WeChat”).IsModified = true; dee.Property(“QQ”).IsModified = true; dee.Property(“School”).IsModified = true; dee.Property(“Address”).IsModified = true; anl.SaveChanges(); flag_upt = true; }catch(Exception){}","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"asp.net","slug":"asp-net","permalink":"https://hero.triple.net.cn/tags/asp-net/"},{"name":"c#","slug":"c","permalink":"https://hero.triple.net.cn/tags/c/"},{"name":"ef","slug":"ef","permalink":"https://hero.triple.net.cn/tags/ef/"},{"name":"entity framework","slug":"entity-framework","permalink":"https://hero.triple.net.cn/tags/entity-framework/"}]},{"title":"MSDN官方代码：数据转换时需要捕获的异常","slug":"msdn-e5-ae-98-e6-96-b9-e4-bb-a3-e7-a0-81-ef-bc-9a-e6-95-b0-e6-8d-ae-e8-bd-ac-e6-8d-a2-e6-97-b6-e9-9c-80-e8-a6-81-e6-8d-95-e8-8e-b7-e7-9a-84-e5-bc-82-e5-b8-b8","date":"2016-03-03T08:48:40.000Z","updated":"2018-12-12T09:20:50.323Z","comments":true,"path":"2016/03/03/msdn-e5-ae-98-e6-96-b9-e4-bb-a3-e7-a0-81-ef-bc-9a-e6-95-b0-e6-8d-ae-e8-bd-ac-e6-8d-a2-e6-97-b6-e9-9c-80-e8-a6-81-e6-8d-95-e8-8e-b7-e7-9a-84-e5-bc-82-e5-b8-b8/","link":"","permalink":"https://hero.triple.net.cn/2016/03/03/msdn-e5-ae-98-e6-96-b9-e4-bb-a3-e7-a0-81-ef-bc-9a-e6-95-b0-e6-8d-ae-e8-bd-ac-e6-8d-a2-e6-97-b6-e9-9c-80-e8-a6-81-e6-8d-95-e8-8e-b7-e7-9a-84-e5-bc-82-e5-b8-b8/","excerpt":"","text":"记录下，经常做数据转换，但是捕获异常时有哪些可以做却被忽略了，查了下官方，摘录代码如下 int newInteger = 0;try { System.Console.WriteLine(“Enter an integer:”); newInteger = System.Convert.ToInt32( System.Console.ReadLine());}catch (System.ArgumentNullException) { System.Console.WriteLine(“String is null.”);}catch (System.FormatException) { System.Console.WriteLine(“String does not consist of an “ + “optional sign followed by a series of digits.”);}catch (System.OverflowException) { System.Console.WriteLine( “Overflow in string to int conversion.”);} 来源： https://msdn.microsoft.com/en-us/library/system.convert(v=vs.110).aspx","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"asp.net","slug":"asp-net","permalink":"https://hero.triple.net.cn/tags/asp-net/"},{"name":"c#","slug":"c","permalink":"https://hero.triple.net.cn/tags/c/"},{"name":"异常","slug":"异常","permalink":"https://hero.triple.net.cn/tags/异常/"}]},{"title":"jQuery EasyUI 将单元格改为链接 可点击","slug":"jquery-easyui-e5-b0-86-e5-8d-95-e5-85-83-e6-a0-bc-e6-94-b9-e4-b8-ba-e9-93-be-e6-8e-a5-e5-8f-af-e7-82-b9-e5-87-bb","date":"2016-03-02T03:14:51.000Z","updated":"2018-12-12T09:19:37.254Z","comments":true,"path":"2016/03/02/jquery-easyui-e5-b0-86-e5-8d-95-e5-85-83-e6-a0-bc-e6-94-b9-e4-b8-ba-e9-93-be-e6-8e-a5-e5-8f-af-e7-82-b9-e5-87-bb/","link":"","permalink":"https://hero.triple.net.cn/2016/03/02/jquery-easyui-e5-b0-86-e5-8d-95-e5-85-83-e6-a0-bc-e6-94-b9-e4-b8-ba-e9-93-be-e6-8e-a5-e5-8f-af-e7-82-b9-e5-87-bb/","excerpt":"","text":"先看效果： [caption id=”” align=”alignnone” width=”568”] 给 easyui 中的datagrid 单元格增加链接[/caption] 实现方法： 编号 然后在js代码中编写类似下面的函数(val 参数不需要在调用时显示指定，直接取值即可)： function linkFormat(val,row) { return “&lt;a href=”/List.aspx?rid=”+val+””&gt; “+val+”“; }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"easyui","slug":"easyui","permalink":"https://hero.triple.net.cn/tags/easyui/"},{"name":"datagrid","slug":"datagrid","permalink":"https://hero.triple.net.cn/tags/datagrid/"}]},{"title":"C# 判断一个值是否存在枚举中","slug":"c-e5-88-a4-e6-96-ad-e4-b8-80-e4-b8-aa-e5-80-bc-e6-98-af-e5-90-a6-e5-ad-98-e5-9c-a8-e6-9e-9a-e4-b8-be-e4-b8-ad","date":"2016-02-25T02:25:26.000Z","updated":"2018-12-12T08:58:49.110Z","comments":true,"path":"2016/02/25/c-e5-88-a4-e6-96-ad-e4-b8-80-e4-b8-aa-e5-80-bc-e6-98-af-e5-90-a6-e5-ad-98-e5-9c-a8-e6-9e-9a-e4-b8-be-e4-b8-ad/","link":"","permalink":"https://hero.triple.net.cn/2016/02/25/c-e5-88-a4-e6-96-ad-e4-b8-80-e4-b8-aa-e5-80-bc-e6-98-af-e5-90-a6-e5-ad-98-e5-9c-a8-e6-9e-9a-e4-b8-be-e4-b8-ad/","excerpt":"","text":"在C#中判断指定的值，是否存在于一个枚举中： bool flag = System.Enum.IsDefined(typeof(EnumName), value1); 枚举：EnumName要判断的值(object 类型)：value1 示例：","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"asp.net","slug":"asp-net","permalink":"https://hero.triple.net.cn/tags/asp-net/"},{"name":"枚举","slug":"枚举","permalink":"https://hero.triple.net.cn/tags/枚举/"}]},{"title":"emacs 编辑器，设置默认的打开文件的目录","slug":"emacs-e7-bc-96-e8-be-91-e5-99-a8-ef-bc-8c-e8-ae-be-e7-bd-ae-e9-bb-98-e8-ae-a4-e7-9a-84-e6-89-93-e5-bc-80-e6-96-87-e4-bb-b6-e7-9a-84-e7-9b-ae-e5-bd-95","date":"2016-02-25T01:43:57.000Z","updated":"2018-12-12T09:19:14.568Z","comments":true,"path":"2016/02/25/emacs-e7-bc-96-e8-be-91-e5-99-a8-ef-bc-8c-e8-ae-be-e7-bd-ae-e9-bb-98-e8-ae-a4-e7-9a-84-e6-89-93-e5-bc-80-e6-96-87-e4-bb-b6-e7-9a-84-e7-9b-ae-e5-bd-95/","link":"","permalink":"https://hero.triple.net.cn/2016/02/25/emacs-e7-bc-96-e8-be-91-e5-99-a8-ef-bc-8c-e8-ae-be-e7-bd-ae-e9-bb-98-e8-ae-a4-e7-9a-84-e6-89-93-e5-bc-80-e6-96-87-e4-bb-b6-e7-9a-84-e7-9b-ae-e5-bd-95/","excerpt":"","text":"我在Windows下面， 想设置 Emacs “打开”时默认加载的文件路径是我项目的路径，比如 E:myprojectasp_netProject001 找了很久，大都不能用 我Emacs的HOME是个人文档， 但是“打开”的 时候加载的却是 C:WidnowsSystem 不知道为什么 网上导出传阅的设置默认目录的方式，并不适合我， 如果强制设置了Emacs的路径为我项目的路径，那么项目就会受影响，SVN中有多余的文件，这显然不行 就算能忍受上一条，忽略emacs.d 和 .emacs，打开时，还是 C:WindowsSystem … 最后还是在论坛里找到了，感谢！ 来源： http://bbs.chinaunix.net/thread-1833453-1-1.html 如果是windows,建个emacs的快捷方式，在起始位置那里添上你的目录。 如果是linux，写个shell，先cd到某个目录，再emacs就行了。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://hero.triple.net.cn/tags/emacs/"},{"name":"默认路径","slug":"默认路径","permalink":"https://hero.triple.net.cn/tags/默认路径/"}]},{"title":"将1000个csv数据文件前后串在一起","slug":"e5-b0-861000-e4-b8-aacsv-e6-95-b0-e6-8d-ae-e6-96-87-e4-bb-b6-e5-89-8d-e5-90-8e-e4-b8-b2-e5-9c-a8-e4-b8-80-e8-b5-b7","date":"2016-02-22T01:20:14.000Z","updated":"2018-12-12T09:08:58.781Z","comments":true,"path":"2016/02/22/e5-b0-861000-e4-b8-aacsv-e6-95-b0-e6-8d-ae-e6-96-87-e4-bb-b6-e5-89-8d-e5-90-8e-e4-b8-b2-e5-9c-a8-e4-b8-80-e8-b5-b7/","link":"","permalink":"https://hero.triple.net.cn/2016/02/22/e5-b0-861000-e4-b8-aacsv-e6-95-b0-e6-8d-ae-e6-96-87-e4-bb-b6-e5-89-8d-e5-90-8e-e4-b8-b2-e5-9c-a8-e4-b8-80-e8-b5-b7/","excerpt":"","text":"cat *.csv &gt;&gt; ../total.csv","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[]},{"title":"自己收集的常用字体","slug":"e8-87-aa-e5-b7-b1-e6-94-b6-e9-9b-86-e7-9a-84-e5-b8-b8-e7-94-a8-e5-ad-97-e4-bd-93","date":"2016-02-21T08:38:27.000Z","updated":"2018-12-12T09:13:19.455Z","comments":true,"path":"2016/02/21/e8-87-aa-e5-b7-b1-e6-94-b6-e9-9b-86-e7-9a-84-e5-b8-b8-e7-94-a8-e5-ad-97-e4-bd-93/","link":"","permalink":"https://hero.triple.net.cn/2016/02/21/e8-87-aa-e5-b7-b1-e6-94-b6-e9-9b-86-e7-9a-84-e5-b8-b8-e7-94-a8-e5-ad-97-e4-bd-93/","excerpt":"","text":"Monaco: http://7xkur2.dl1.z0.glb.clouddn.com/fonts\\_Monaco%20font.zip 微软雅黑和mono 的修正版： http://7xkur2.dl1.z0.glb.clouddn.com/fonts\\_MSYHMONO.tar.xz 微软雅黑和mono 的修正版（zip格式）：http://7xkur2.dl1.z0.glb.clouddn.com/fonts_Monaco%20font.zip","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"fonts","slug":"fonts","permalink":"https://hero.triple.net.cn/tags/fonts/"},{"name":"monaco","slug":"monaco","permalink":"https://hero.triple.net.cn/tags/monaco/"},{"name":"微软雅黑","slug":"微软雅黑","permalink":"https://hero.triple.net.cn/tags/微软雅黑/"}]},{"title":"Emacs显示行号","slug":"emacs-e6-98-be-e7-a4-ba-e8-a1-8c-e5-8f-b7","date":"2016-02-21T08:37:59.000Z","updated":"2018-12-12T09:19:14.549Z","comments":true,"path":"2016/02/21/emacs-e6-98-be-e7-a4-ba-e8-a1-8c-e5-8f-b7/","link":"","permalink":"https://hero.triple.net.cn/2016/02/21/emacs-e6-98-be-e7-a4-ba-e8-a1-8c-e5-8f-b7/","excerpt":"","text":"用惯了VIM，转到Emacs，还真有很多不适应的地方。比如我最常用的选中高亮单词，转到指定的行，跳转到指定字符，删除至字符前面，在Emacs都不知道怎么实现。 行号显示应该是比我上面说的还要基本了，默认Emacs不显示。网上查了一下，说是要插件，跟着网上提供的连接点几个发现都打不开。 索性不尝试了，准备将就，不死心试试网友说的命令会不会默认支持了？（Emacs从24之后默认支持了很多优秀的插件） M-x linum-mode 没想到居然成功了！ 把下面的代码贴到Emacs的配置文件中（配置文件默认路径应该在 C:Users_UserName_AppDataRoaming 下面：.emacs），就可以永久显示行号： (global-linum-mode 1) ; always show line numbers(setq linum-format “%d “) ;set format","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://hero.triple.net.cn/tags/emacs/"}]},{"title":"自定义快捷键使Emacs快速跳转到指定行","slug":"e8-87-aa-e5-ae-9a-e4-b9-89-e5-bf-ab-e6-8d-b7-e9-94-ae-e4-bd-bfemacs-e5-bf-ab-e9-80-9f-e8-b7-b3-e8-bd-ac-e5-88-b0-e6-8c-87-e5-ae-9a-e8-a1-8c","date":"2016-02-21T08:27:50.000Z","updated":"2018-12-12T09:13:19.455Z","comments":true,"path":"2016/02/21/e8-87-aa-e5-ae-9a-e4-b9-89-e5-bf-ab-e6-8d-b7-e9-94-ae-e4-bd-bfemacs-e5-bf-ab-e9-80-9f-e8-b7-b3-e8-bd-ac-e5-88-b0-e6-8c-87-e5-ae-9a-e8-a1-8c/","link":"","permalink":"https://hero.triple.net.cn/2016/02/21/e8-87-aa-e5-ae-9a-e4-b9-89-e5-bf-ab-e6-8d-b7-e9-94-ae-e4-bd-bfemacs-e5-bf-ab-e9-80-9f-e8-b7-b3-e8-bd-ac-e5-88-b0-e6-8c-87-e5-ae-9a-e8-a1-8c/","excerpt":"","text":"Emacs默认跳转到指定行的操作方式： M-x goto-line 先要输入“goto-line”然后回车，输入行号，这样比较不方便，。 聪明的网友（来源：http://www.glamenv-septzen.net/view/360）自己想了个键盘映射的方式来实现： 在配置文件中加入： (global-set-key “C-x:” ‘goto-line) 好了之后，重启Emacs。或者重新加载配置文件。 以后就可以通过输入 C-x: 来迅速跳转到想要去的行了。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://hero.triple.net.cn/tags/emacs/"}]},{"title":"php版本的Youtube镜像源码，不翻墙看视频","slug":"php-e7-89-88-e6-9c-ac-e7-9a-84youtube-e9-95-9c-e5-83-8f-e6-ba-90-e7-a0-81-ef-bc-8c-e4-b8-8d-e7-bf-bb-e5-a2-99-e7-9c-8b-e8-a7-86-e9-a2-91","date":"2016-02-06T07:14:04.000Z","updated":"2018-12-12T09:22:01.298Z","comments":true,"path":"2016/02/06/php-e7-89-88-e6-9c-ac-e7-9a-84youtube-e9-95-9c-e5-83-8f-e6-ba-90-e7-a0-81-ef-bc-8c-e4-b8-8d-e7-bf-bb-e5-a2-99-e7-9c-8b-e8-a7-86-e9-a2-91/","link":"","permalink":"https://hero.triple.net.cn/2016/02/06/php-e7-89-88-e6-9c-ac-e7-9a-84youtube-e9-95-9c-e5-83-8f-e6-ba-90-e7-a0-81-ef-bc-8c-e4-b8-8d-e7-bf-bb-e5-a2-99-e7-9c-8b-e8-a7-86-e9-a2-91/","excerpt":"","text":"安装说明 YouTube镜像配置说明 感谢您的使用，本程序原为朝鲜人金坷垃开发的一款突破国家网络封锁的web应用。 自2010年以来，朝鲜当局不停的封锁，导致该程序自2010年以来只更新了2个版本， 15年12月底，本人（投稿者）在 SourceForge 发现了这个项目。只不过已经无法使用了。 经过近半个月的修改和完善。改项目已经起死回生了。另外重写了界面。使用bootstrap框架，界面更简洁。使用谷歌的API,利用海外主机做中转。实现长城之内看youtube。 本程序无需高端服务器，也无需数据库。只需要一台支持php的海外（包括香港，台湾）虚拟主机就可运行。 下面是安装配置说明: 1.安装 安装非常简单，直接把程序压缩包解压到网站目录即可。下一步就是配置了。建议装在根目录。 2.配置 首先要申请youtube的api，在此之前你需要一个谷歌账户。登录您的谷歌账户之后。 打开申请地址 https://console.developers.google.com/ 点击 啟用和管理 API 如下图 随便起个名字，点 建立 然后稍等一会，大概3分钟建立成功了。 然后点击展开右侧导航，进入API管理员 选择你刚才建立的什么账号。然后继续 然后等待一会。出现下面的页面 建立一个YouTube Data API 启用API 接受這些伺服器 IP 位址發出的要求 这个不用填 记下你的api 下面还有申请一个URL Shortener API的api、再次进入api管理员找到URL Shortener API并申请，申请过程和上面的YouTube Data API申请过程一样 申请成功就可以看到你的api啦 下面是配置youtube镜像 打开inc目录。 编辑info.php文件 编辑$ym=’你的网站域名’; 你的站点域名。不可为空，如装在子目录应填写 http://abc.com/abc/这种格式。 编辑$youtube_api=’你的YouTube Data API’; 编辑$gurl_api=’你的URL Shortener API’; 其他的你可以自行设置，你也可以保持默认。 编辑parser.php文件 $ym=’你的网站域名’; 不可为空，如装在子目录应填写 http://abc.com/abc/这种格式。 然后打开首页 尝试搜索视频，如果可以搜索，说明本程序安装成功。 尝试播放一个视频。 pc端播放界面，pc端使用flash播放器 移动移动端播放界面，移动端使用html5播放器 如果要想修改首页的推荐视频。修改编辑inc/info.php $home_v=’用户识别码’; 用户识别码怎么弄？ 打开一个youtube频道主页，后面的就是用户识别码 备用下载： http://7xkur2.dl1.z0.glb.clouddn.com/net\\_y-2.0.zip 注意，某些视频。由于某些原因可能无法播放。 如果您能修改php.ini文件，您可以修改 max_execution_time = 300000; 这样视频看不易中断 如果大家需到问题，或者有bug反馈 请邮件zxqajax@gmail.com（投稿者） PDF**版安装说明-投稿者** http://pan.baidu.com/s/1bwMx5s 后续说明 感谢张小强对本站的投稿 该教程由张小强投稿，文字版教程加一个pdf图文说明。本站为了用户方便浏览，把pdf中的图片全部转移到网站，文末又留了pdf地址。 本教程归Chrome资源所有（https://gochrome.info/）","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"yotube","slug":"yotube","permalink":"https://hero.triple.net.cn/tags/yotube/"}]},{"title":"EASYUI中给combobox绑定远程数据，并自动选择第一项","slug":"easyui-e4-b8-ad-e7-bb-99combobox-e7-bb-91-e5-ae-9a-e8-bf-9c-e7-a8-8b-e6-95-b0-e6-8d-ae-ef-bc-8c-e5-b9-b6-e8-87-aa-e5-8a-a8-e9-80-89-e6-8b-a9-e7-ac-ac-e4-b8-80-e9-a1-b9","date":"2016-02-04T07:18:52.000Z","updated":"2018-12-12T09:19:14.474Z","comments":true,"path":"2016/02/04/easyui-e4-b8-ad-e7-bb-99combobox-e7-bb-91-e5-ae-9a-e8-bf-9c-e7-a8-8b-e6-95-b0-e6-8d-ae-ef-bc-8c-e5-b9-b6-e8-87-aa-e5-8a-a8-e9-80-89-e6-8b-a9-e7-ac-ac-e4-b8-80-e9-a1-b9/","link":"","permalink":"https://hero.triple.net.cn/2016/02/04/easyui-e4-b8-ad-e7-bb-99combobox-e7-bb-91-e5-ae-9a-e8-bf-9c-e7-a8-8b-e6-95-b0-e6-8d-ae-ef-bc-8c-e5-b9-b6-e8-87-aa-e5-8a-a8-e9-80-89-e6-8b-a9-e7-ac-ac-e4-b8-80-e9-a1-b9/","excerpt":"","text":"easyui中使用远程数据给combobox绑定值，然后自动选择第一项（同时禁用编辑） $(“#c_source”).combobox({ url:’async/parameter_search.ashx?c=csource’, method:’get’, valueField: ‘KeyName’, textField: ‘KeyValue’, editable: false, panelHeight: ‘auto’, onLoadSuccess: function () { console.log(“c_source load success”); var val = $(this).combobox(“getData”); for (var item in val[0]) { if (item == “KeyName”) { $(this).combobox(“select”, val[0][item]); } } }});","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"easyui","slug":"easyui","permalink":"https://hero.triple.net.cn/tags/easyui/"},{"name":"combobox","slug":"combobox","permalink":"https://hero.triple.net.cn/tags/combobox/"}]},{"title":"阻止前端使用AJAX时快速刷新（重复提交）","slug":"e7-bb-84-e7-bb-87-e5-89-8d-e7-ab-af-e4-bd-bf-e7-94-a8ajax-e6-97-b6-e5-bf-ab-e9-80-9f-e5-88-b7-e6-96-b0-ef-bc-88-e6-8f-90-e4-ba-a4-ef-bc-89","date":"2016-01-28T06:13:58.000Z","updated":"2018-12-12T09:11:32.281Z","comments":true,"path":"2016/01/28/e7-bb-84-e7-bb-87-e5-89-8d-e7-ab-af-e4-bd-bf-e7-94-a8ajax-e6-97-b6-e5-bf-ab-e9-80-9f-e5-88-b7-e6-96-b0-ef-bc-88-e6-8f-90-e4-ba-a4-ef-bc-89/","link":"","permalink":"https://hero.triple.net.cn/2016/01/28/e7-bb-84-e7-bb-87-e5-89-8d-e7-ab-af-e4-bd-bf-e7-94-a8ajax-e6-97-b6-e5-bf-ab-e9-80-9f-e5-88-b7-e6-96-b0-ef-bc-88-e6-8f-90-e4-ba-a4-ef-bc-89/","excerpt":"","text":"在项目中可能会有这样的情况： 用户输入一个检索条件后，按回车时发起请求，然后把结果显示在界面上， 为了减少客户端重复提交（比如，快速按回车——这其实是发起重复请求），参考下面的代码： 注意，这里仅仅是前端的限制，如果要做到更加有效、严格，还是需要后端配合。 var timer = null; function doSearch(value, name) { var email = $(\"#txt_email\").val(); var phone = $(\"#txt_phone\").val(); var firstn = $(\"#txt_firstname\").val(); var lastn = $(\"#txt_lastname\").val(); //console.log(email + \"|\" + phone + \"|\" + firstn + \"|\" + lastn); clearTimeout(timer); //如果键盘敲击速度太快，小于500毫秒的话就不会向后台发请求，但是最后总会进行一次请求的。 timer = setTimeout(function () { $.ajax({ url: \"async/customer_search.ashx\", data: { \"email\": email, \"phone\": phone, \"firstn\": firstn, \"lastn\": lastn }, type: \"POST\", success: function (data) { console.log('success'); //console.log(data); if (data !== \"\") { $('#dg').datagrid('loadData', JSON.parse(data)); } else { $('#dg').datagrid(\"loadData\", { total: 0, rows: \\[\\] }); } console.log(\"end\"); } }); }, 500); }","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"},{"name":"技术分类","slug":"大前端！/技术分类","permalink":"https://hero.triple.net.cn/categories/大前端！/技术分类/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hero.triple.net.cn/tags/javascript/"},{"name":"jquery","slug":"jquery","permalink":"https://hero.triple.net.cn/tags/jquery/"},{"name":"提交","slug":"提交","permalink":"https://hero.triple.net.cn/tags/提交/"}]},{"title":"easyui 从后台取得数据并绑定到datagrid","slug":"easyui-e4-bb-8e-e5-90-8e-e5-8f-b0-e5-8f-96-e5-be-97-e6-95-b0-e6-8d-ae-e5-b9-b6-e7-bb-91-e5-ae-9a-e5-88-b0datagrid","date":"2016-01-28T03:14:13.000Z","updated":"2018-12-12T09:19:14.470Z","comments":true,"path":"2016/01/28/easyui-e4-bb-8e-e5-90-8e-e5-8f-b0-e5-8f-96-e5-be-97-e6-95-b0-e6-8d-ae-e5-b9-b6-e7-bb-91-e5-ae-9a-e5-88-b0datagrid/","link":"","permalink":"https://hero.triple.net.cn/2016/01/28/easyui-e4-bb-8e-e5-90-8e-e5-8f-b0-e5-8f-96-e5-be-97-e6-95-b0-e6-8d-ae-e5-b9-b6-e7-bb-91-e5-ae-9a-e5-88-b0datagrid/","excerpt":"","text":"项目需要，前台页面输入查询参数（比如邮箱地址）使用ajax发送到后台，然后数据库返回查询结果，并对其格式化，转成json格式，再绑定到前台页面的datagrid上。 期间遇到了几个问题，记录下（文章部分代码来自网络）。 1 ，SqlHelper 2，DataTable转换成JSON字符串 3，后台字符串绑定到datagrid 页面上DataGrid的属性、要显示的字段先设定好： Inv No Date Name Amount Price Cost Note 1，SqlHelper操作类（来自博客园）： /// /// SqlHelper操作类/// public sealed partial class SqlHelper{ /// /// 批量操作每批次记录数 /// public static int BatchSize = 2000; /// &lt;summary&gt; /// 超时时间 /// &lt;/summary&gt; public static int CommandTimeOut = 600; /// &lt;summary&gt; ///初始化SqlHelper实例 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; public SqlHelper(string connectionString) { this.ConnectionString = connectionString; } /// &lt;summary&gt; /// 数据库连接字符串 /// &lt;/summary&gt; public string ConnectionString { get; set; } #region 实例方法 #region ExecuteNonQuery /// &lt;summary&gt; /// 执行SQL语句,返回影响的行数 /// &lt;/summary&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回影响的行数&lt;/returns&gt; public int ExecuteNonQuery(string commandText, params SqlParameter\\[\\] parms) { return ExecuteNonQuery(ConnectionString, CommandType.Text, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回影响的行数 /// &lt;/summary&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回影响的行数&lt;/returns&gt; public int ExecuteNonQuery(CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteNonQuery(ConnectionString, commandType, commandText, parms); } #endregion ExecuteNonQuery #region ExecuteScalar /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行第一列 /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T&quot;&gt;返回对象类型&lt;/typeparam&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行第一列&lt;/returns&gt; public T ExecuteScalar&lt;T&gt;(string commandText, params SqlParameter\\[\\] parms) { return ExecuteScalar&lt;T&gt;(ConnectionString, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行第一列 /// &lt;/summary&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行第一列&lt;/returns&gt; public object ExecuteScalar(string commandText, params SqlParameter\\[\\] parms) { return ExecuteScalar(ConnectionString, CommandType.Text, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行第一列 /// &lt;/summary&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行第一列&lt;/returns&gt; public object ExecuteScalar(CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteScalar(ConnectionString, commandType, commandText, parms); } #endregion ExecuteScalar #region ExecuteDataReader /// &lt;summary&gt; /// 执行SQL语句,返回只读数据集 /// &lt;/summary&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回只读数据集&lt;/returns&gt; private SqlDataReader ExecuteDataReader(string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataReader(ConnectionString, CommandType.Text, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回只读数据集 /// &lt;/summary&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回只读数据集&lt;/returns&gt; private SqlDataReader ExecuteDataReader(CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataReader(ConnectionString, commandType, commandText, parms); } #endregion #region ExecuteDataRow /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行 /// &lt;/summary&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行&lt;/returns&gt; public DataRow ExecuteDataRow(string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataRow(ConnectionString, CommandType.Text, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行 /// &lt;/summary&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行&lt;/returns&gt; public DataRow ExecuteDataRow(CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataRow(ConnectionString, commandType, commandText, parms); } #endregion ExecuteDataRow #region ExecuteDataTable /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一个数据表 /// &lt;/summary&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一个数据表&lt;/returns&gt; public DataTable ExecuteDataTable(string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataTable(ConnectionString, CommandType.Text, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一个数据表 /// &lt;/summary&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一个数据表&lt;/returns&gt; public DataTable ExecuteDataTable(CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(ConnectionString, commandType, commandText, parms).Tables\\[0\\]; } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一个数据表 /// &lt;/summary&gt; /// &lt;param name=&quot;sql&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;order&quot;&gt;排序SQL,如&quot;ORDER BY ID DESC&quot;&lt;/param&gt; /// &lt;param name=&quot;pageSize&quot;&gt;每页记录数&lt;/param&gt; /// &lt;param name=&quot;pageIndex&quot;&gt;页索引&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;param name=&quot;query&quot;&gt;查询SQL&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public DataTable ExecutePageDataTable(string sql, string order, int pageSize, int pageIndex, SqlParameter\\[\\] parms = null, string query = null, string cte = null) { return ExecutePageDataTable(sql, order, pageSize, pageIndex, parms, query, cte); } #endregion ExecuteDataTable #region ExecuteDataSet /// &lt;summary&gt; /// 执行SQL语句,返回结果集 /// &lt;/summary&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集&lt;/returns&gt; public DataSet ExecuteDataSet(string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(ConnectionString, CommandType.Text, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集 /// &lt;/summary&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集&lt;/returns&gt; public DataSet ExecuteDataSet(CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(ConnectionString, commandType, commandText, parms); } #endregion ExecuteDataSet #region 批量操作 /// &lt;summary&gt; /// 大批量数据插入 /// &lt;/summary&gt; /// &lt;param name=&quot;table&quot;&gt;数据表&lt;/param&gt; public void BulkInsert(DataTable table) { BulkInsert(ConnectionString, table); } /// &lt;summary&gt; /// 使用MySqlDataAdapter批量更新数据 /// &lt;/summary&gt; /// &lt;param name=&quot;table&quot;&gt;数据表&lt;/param&gt; public void BatchUpdate(DataTable table) { BatchUpdate(ConnectionString, table); } /// &lt;summary&gt; /// 分批次批量删除数据 /// &lt;/summary&gt; /// &lt;param name=&quot;sql&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;batchSize&quot;&gt;每批次删除记录行数&lt;/param&gt; /// &lt;param name=&quot;interval&quot;&gt;批次执行间隔(秒)&lt;/param&gt; public void BatchDelete(string sql, int batchSize = 1000, int interval = 1) { BatchDelete(ConnectionString, sql, batchSize, interval); } /// &lt;summary&gt; /// 分批次批量更新数据 /// &lt;/summary&gt; /// &lt;param name=&quot;sql&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;batchSize&quot;&gt;每批次更新记录行数&lt;/param&gt; /// &lt;param name=&quot;interval&quot;&gt;批次执行间隔(秒)&lt;/param&gt; public void BatchUpdate(string sql, int batchSize = 1000, int interval = 1) { BatchUpdate(ConnectionString, sql, batchSize, interval); } #endregion 批量操作 #endregion 实例方法 #region 静态方法 private static void PrepareCommand(SqlCommand command, SqlConnection connection, SqlTransaction transaction, CommandType commandType, string commandText, SqlParameter\\[\\] parms) { if (connection.State != ConnectionState.Open) connection.Open(); command.Connection = connection; command.CommandTimeout = CommandTimeOut; // 设置命令文本(存储过程名或SQL语句) command.CommandText = commandText; // 分配事务 if (transaction != null) { command.Transaction = transaction; } // 设置命令类型. command.CommandType = commandType; if (parms != null &amp;&amp; parms.Length &gt; 0) { //预处理SqlParameter参数数组，将为NULL的参数赋值为DBNull.Value; foreach (SqlParameter parameter in parms) { if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &amp;&amp; (parameter.Value == null)) { parameter.Value = DBNull.Value; } } command.Parameters.AddRange(parms); } } #region ExecuteNonQuery /// &lt;summary&gt; /// 执行SQL语句,返回影响的行数 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回影响的行数&lt;/returns&gt; public static int ExecuteNonQuery(string connectionString, string commandText, params SqlParameter\\[\\] parms) { using (SqlConnection connection = new SqlConnection(connectionString)) { return ExecuteNonQuery(connection, CommandType.Text, commandText, parms); } } /// &lt;summary&gt; /// 执行SQL语句,返回影响的行数 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回影响的行数&lt;/returns&gt; public static int ExecuteNonQuery(string connectionString, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { using (SqlConnection connection = new SqlConnection(connectionString)) { return ExecuteNonQuery(connection, commandType, commandText, parms); } } /// &lt;summary&gt; /// 执行SQL语句,返回影响的行数 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回影响的行数&lt;/returns&gt; public static int ExecuteNonQuery(SqlConnection connection, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteNonQuery(connection, null, commandType, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回影响的行数 /// &lt;/summary&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回影响的行数&lt;/returns&gt; public static int ExecuteNonQuery(SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteNonQuery(transaction.Connection, transaction, commandType, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回影响的行数 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回影响的行数&lt;/returns&gt; private static int ExecuteNonQuery(SqlConnection connection, SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { SqlCommand command = new SqlCommand(); PrepareCommand(command, connection, transaction, commandType, commandText, parms); int retval = command.ExecuteNonQuery(); command.Parameters.Clear(); return retval; } #endregion ExecuteNonQuery #region ExecuteScalar /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行第一列 /// &lt;/summary&gt; /// &lt;typeparam name=&quot;T&quot;&gt;返回对象类型&lt;/typeparam&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行第一列&lt;/returns&gt; public static T ExecuteScalar&lt;T&gt;(string connectionString, string commandText, params SqlParameter\\[\\] parms) { object result = ExecuteScalar(connectionString, commandText, parms); if (result != null) { return (T)Convert.ChangeType(result, typeof(T)); ; } return default(T); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行第一列 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行第一列&lt;/returns&gt; public static object ExecuteScalar(string connectionString, string commandText, params SqlParameter\\[\\] parms) { using (SqlConnection connection = new SqlConnection(connectionString)) { return ExecuteScalar(connection, CommandType.Text, commandText, parms); } } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行第一列 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行第一列&lt;/returns&gt; public static object ExecuteScalar(string connectionString, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { using (SqlConnection connection = new SqlConnection(connectionString)) { return ExecuteScalar(connection, commandType, commandText, parms); } } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行第一列 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行第一列&lt;/returns&gt; public static object ExecuteScalar(SqlConnection connection, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteScalar(connection, null, commandType, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行第一列 /// &lt;/summary&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行第一列&lt;/returns&gt; public static object ExecuteScalar(SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteScalar(transaction.Connection, transaction, commandType, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行第一列 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一行第一列&lt;/returns&gt; private static object ExecuteScalar(SqlConnection connection, SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { SqlCommand command = new SqlCommand(); PrepareCommand(command, connection, transaction, commandType, commandText, parms); object retval = command.ExecuteScalar(); command.Parameters.Clear(); return retval; } #endregion ExecuteScalar #region ExecuteDataReader /// &lt;summary&gt; /// 执行SQL语句,返回只读数据集 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回只读数据集&lt;/returns&gt; private static SqlDataReader ExecuteDataReader(string connectionString, string commandText, params SqlParameter\\[\\] parms) { SqlConnection connection = new SqlConnection(connectionString); return ExecuteDataReader(connection, null, CommandType.Text, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回只读数据集 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回只读数据集&lt;/returns&gt; private static SqlDataReader ExecuteDataReader(string connectionString, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { SqlConnection connection = new SqlConnection(connectionString); return ExecuteDataReader(connection, null, commandType, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回只读数据集 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回只读数据集&lt;/returns&gt; private static SqlDataReader ExecuteDataReader(SqlConnection connection, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataReader(connection, null, commandType, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回只读数据集 /// &lt;/summary&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回只读数据集&lt;/returns&gt; private static SqlDataReader ExecuteDataReader(SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataReader(transaction.Connection, transaction, commandType, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回只读数据集 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回只读数据集&lt;/returns&gt; private static SqlDataReader ExecuteDataReader(SqlConnection connection, SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { SqlCommand command = new SqlCommand(); PrepareCommand(command, connection, transaction, commandType, commandText, parms); return command.ExecuteReader(CommandBehavior.CloseConnection); } #endregion #region ExecuteDataRow /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;,返回结果集中的第一行&lt;/returns&gt; public static DataRow ExecuteDataRow(string connectionString, string commandText, params SqlParameter\\[\\] parms) { DataTable dt = ExecuteDataTable(connectionString, CommandType.Text, commandText, parms); return dt.Rows.Count &gt; 0 ? dt.Rows\\[0\\] : null; } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;,返回结果集中的第一行&lt;/returns&gt; public static DataRow ExecuteDataRow(string connectionString, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { DataTable dt = ExecuteDataTable(connectionString, commandType, commandText, parms); return dt.Rows.Count &gt; 0 ? dt.Rows\\[0\\] : null; } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;,返回结果集中的第一行&lt;/returns&gt; public static DataRow ExecuteDataRow(SqlConnection connection, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { DataTable dt = ExecuteDataTable(connection, commandType, commandText, parms); return dt.Rows.Count &gt; 0 ? dt.Rows\\[0\\] : null; } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一行 /// &lt;/summary&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;,返回结果集中的第一行&lt;/returns&gt; public static DataRow ExecuteDataRow(SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { DataTable dt = ExecuteDataTable(transaction, commandType, commandText, parms); return dt.Rows.Count &gt; 0 ? dt.Rows\\[0\\] : null; } #endregion ExecuteDataRow #region ExecuteDataTable /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一个数据表 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一个数据表&lt;/returns&gt; public static DataTable ExecuteDataTable(string connectionString, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(connectionString, CommandType.Text, commandText, parms).Tables\\[0\\]; } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一个数据表 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一个数据表&lt;/returns&gt; public static DataTable ExecuteDataTable(string connectionString, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(connectionString, commandType, commandText, parms).Tables\\[0\\]; } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一个数据表 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一个数据表&lt;/returns&gt; public static DataTable ExecuteDataTable(SqlConnection connection, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(connection, commandType, commandText, parms).Tables\\[0\\]; } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一个数据表 /// &lt;/summary&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一个数据表&lt;/returns&gt; public static DataTable ExecuteDataTable(SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(transaction, commandType, commandText, parms).Tables\\[0\\]; } /// &lt;summary&gt; /// 获取空表结构 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;tableName&quot;&gt;数据表名称&lt;/param&gt; /// &lt;returns&gt;返回结果集中的第一个数据表&lt;/returns&gt; public static DataTable ExecuteEmptyDataTable(string connectionString, string tableName) { return ExecuteDataSet(connectionString, CommandType.Text, string.Format(&quot;select * from {0} where 1=-1&quot;, tableName)).Tables\\[0\\]; } /// &lt;summary&gt; /// 执行SQL语句,返回结果集中的第一个数据表 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;sql&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;order&quot;&gt;排序SQL,如&quot;ORDER BY ID DESC&quot;&lt;/param&gt; /// &lt;param name=&quot;pageSize&quot;&gt;每页记录数&lt;/param&gt; /// &lt;param name=&quot;pageIndex&quot;&gt;页索引&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;param name=&quot;query&quot;&gt;查询SQL&lt;/param&gt; /// &lt;param name=&quot;cte&quot;&gt;CTE表达式&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static DataTable ExecutePageDataTable(string connectionString, string sql, string order, int pageSize, int pageIndex, SqlParameter\\[\\] parms = null, string query = null, string cte = null) { string psql = string.Format(@&quot; {3} SELECT * FROM ( SELECT ROW_NUMBER() OVER (ORDER BY {1}) RowNumber,* FROM ( {0} ) t WHERE 1 = 1 {2} ) t WHERE RowNumber BETWEEN @RowNumber_Begin AND @RowNumber_End&quot;, sql, order, query, cte); List&lt;SqlParameter&gt; paramlist = new List&lt;SqlParameter&gt;() { new SqlParameter(&quot;@RowNumber_Begin&quot;, SqlDbType.Int){ Value = (pageIndex - 1) * pageSize + 1 }, new SqlParameter(&quot;@RowNumber_End&quot;, SqlDbType.Int){ Value = pageIndex * pageSize } }; if (parms != null) paramlist.AddRange(parms); return ExecuteDataTable(connectionString, psql, paramlist.ToArray()); } #endregion ExecuteDataTable #region ExecuteDataSet /// &lt;summary&gt; /// 执行SQL语句,返回结果集 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集&lt;/returns&gt; public static DataSet ExecuteDataSet(string connectionString, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(connectionString, CommandType.Text, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集&lt;/returns&gt; public static DataSet ExecuteDataSet(string connectionString, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { using (SqlConnection connection = new SqlConnection(connectionString)) { return ExecuteDataSet(connection, commandType, commandText, parms); } } /// &lt;summary&gt; /// 执行SQL语句,返回结果集 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集&lt;/returns&gt; public static DataSet ExecuteDataSet(SqlConnection connection, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(connection, null, commandType, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集 /// &lt;/summary&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集&lt;/returns&gt; public static DataSet ExecuteDataSet(SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { return ExecuteDataSet(transaction.Connection, transaction, commandType, commandText, parms); } /// &lt;summary&gt; /// 执行SQL语句,返回结果集 /// &lt;/summary&gt; /// &lt;param name=&quot;connection&quot;&gt;数据库连接&lt;/param&gt; /// &lt;param name=&quot;transaction&quot;&gt;事务&lt;/param&gt; /// &lt;param name=&quot;commandType&quot;&gt;命令类型(存储过程,命令文本, 其它.)&lt;/param&gt; /// &lt;param name=&quot;commandText&quot;&gt;SQL语句或存储过程名称&lt;/param&gt; /// &lt;param name=&quot;parms&quot;&gt;查询参数&lt;/param&gt; /// &lt;returns&gt;返回结果集&lt;/returns&gt; private static DataSet ExecuteDataSet(SqlConnection connection, SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter\\[\\] parms) { SqlCommand command = new SqlCommand(); PrepareCommand(command, connection, transaction, commandType, commandText, parms); SqlDataAdapter adapter = new SqlDataAdapter(command); DataSet ds = new DataSet(); adapter.Fill(ds); if (commandText.IndexOf(&quot;@&quot;) &gt; 0) { commandText = commandText.ToLower(); int index = commandText.IndexOf(&quot;where &quot;); if (index &lt; 0) { index = commandText.IndexOf(&quot;nwhere&quot;); } if (index &gt; 0) { ds.ExtendedProperties.Add(&quot;SQL&quot;, commandText.Substring(0, index - 1)); //将获取的语句保存在表的一个附属数组里，方便更新时生成CommandBuilder } else { ds.ExtendedProperties.Add(&quot;SQL&quot;, commandText); //将获取的语句保存在表的一个附属数组里，方便更新时生成CommandBuilder } } else { ds.ExtendedProperties.Add(&quot;SQL&quot;, commandText); //将获取的语句保存在表的一个附属数组里，方便更新时生成CommandBuilder } foreach (DataTable dt in ds.Tables) { dt.ExtendedProperties.Add(&quot;SQL&quot;, ds.ExtendedProperties\\[&quot;SQL&quot;\\]); } command.Parameters.Clear(); return ds; } #endregion ExecuteDataSet #region 批量操作 /// &lt;summary&gt; /// 大批量数据插入 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;table&quot;&gt;数据表&lt;/param&gt; public static void BulkInsert(string connectionString, DataTable table) { if (string.IsNullOrEmpty(table.TableName)) throw new Exception(&quot;DataTable.TableName属性不能为空&quot;); using (SqlBulkCopy bulk = new SqlBulkCopy(connectionString)) { bulk.BatchSize = BatchSize; bulk.BulkCopyTimeout = CommandTimeOut; bulk.DestinationTableName = table.TableName; foreach (DataColumn col in table.Columns) { bulk.ColumnMappings.Add(col.ColumnName, col.ColumnName); } bulk.WriteToServer(table); bulk.Close(); } } /// &lt;summary&gt; /// 使用MySqlDataAdapter批量更新数据 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;table&quot;&gt;数据表&lt;/param&gt; public static void BatchUpdate(string connectionString, DataTable table) { SqlConnection connection = new SqlConnection(connectionString); SqlCommand command = connection.CreateCommand(); command.CommandTimeout = CommandTimeOut; command.CommandType = CommandType.Text; SqlDataAdapter adapter = new SqlDataAdapter(command); SqlCommandBuilder commandBulider = new SqlCommandBuilder(adapter); commandBulider.ConflictOption = ConflictOption.OverwriteChanges; SqlTransaction transaction = null; try { connection.Open(); transaction = connection.BeginTransaction(); //设置批量更新的每次处理条数 adapter.UpdateBatchSize = BatchSize; //设置事物 adapter.SelectCommand.Transaction = transaction; if (table.ExtendedProperties\\[&quot;SQL&quot;\\] != null) { adapter.SelectCommand.CommandText = table.ExtendedProperties\\[&quot;SQL&quot;\\].ToString(); } adapter.Update(table); transaction.Commit();/////提交事务 } catch (SqlException ex) { if (transaction != null) transaction.Rollback(); throw ex; } finally { connection.Close(); connection.Dispose(); } } /// &lt;summary&gt; /// 分批次批量删除数据 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;sql&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;batchSize&quot;&gt;每批次更新记录行数&lt;/param&gt; /// &lt;param name=&quot;interval&quot;&gt;批次执行间隔(秒)&lt;/param&gt; public static void BatchDelete(string connectionString, string sql, int batchSize = 1000, int interval = 1) { sql = sql.ToLower(); if (batchSize &lt; 1000) batchSize = 1000; if (interval &lt; 1) interval = 1; while (ExecuteScalar(connectionString, sql.Replace(&quot;delete&quot;, &quot;select top 1 1&quot;)) != null) { ExecuteNonQuery(connectionString, CommandType.Text, sql.Replace(&quot;delete&quot;, string.Format(&quot;delete top ({0})&quot;, batchSize))); System.Threading.Thread.Sleep(interval * 1000); } } /// &lt;summary&gt; /// 分批次批量更新数据 /// &lt;/summary&gt; /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt; /// &lt;param name=&quot;sql&quot;&gt;SQL语句&lt;/param&gt; /// &lt;param name=&quot;batchSize&quot;&gt;每批次更新记录行数&lt;/param&gt; /// &lt;param name=&quot;interval&quot;&gt;批次执行间隔(秒)&lt;/param&gt; public static void BatchUpdate(string connectionString, string sql, int batchSize = 1000, int interval = 1) { if (batchSize &lt; 1000) batchSize = 1000; if (interval &lt; 1) interval = 1; string existsSql = Regex.Replace(sql, @&quot;\\[ws.=,&apos;\\]*from&quot;, &quot;select top 1 1 from&quot;, RegexOptions.IgnoreCase); existsSql = Regex.Replace(existsSql, @&quot;set\\[ws.=,&apos;\\]* where&quot;, &quot;where&quot;, RegexOptions.IgnoreCase); existsSql = Regex.Replace(existsSql, @&quot;update&quot;, &quot;select top 1 1 from&quot;, RegexOptions.IgnoreCase); while (ExecuteScalar&lt;int&gt;(connectionString, existsSql) != 0) { ExecuteNonQuery(connectionString, CommandType.Text, Regex.Replace(sql, &quot;update&quot;, string.Format(&quot;update top ({0})&quot;, batchSize), RegexOptions.IgnoreCase)); System.Threading.Thread.Sleep(interval * 1000); } } #endregion 批量操作 #endregion 静态方法 } 2，DATATABLE转换成JSON字符串（来自开源中国） #region DataTable 转换为Json 字符串/// /// DataTable 对象 转换为Json 字符串/// /// /// public static string ToJson(this DataTable dt){ JavaScriptSerializer javaScriptSerializer = new JavaScriptSerializer(); javaScriptSerializer.MaxJsonLength = Int32.MaxValue; //取得最大数值 ArrayList arrayList = new ArrayList(); foreach (DataRow dataRow in dt.Rows) { Dictionary&lt;string, object&gt; dictionary = new Dictionary&lt;string, object&gt;(); //实例化一个参数集合 foreach (DataColumn dataColumn in dt.Columns) { dictionary.Add(dataColumn.ColumnName, dataRow[dataColumn.ColumnName].ToStr()); } arrayList.Add(dictionary); //ArrayList集合中添加键值 } return javaScriptSerializer.Serialize(arrayList); //返回一个json字符串 } #endregion #region 转换为string字符串类型/// /// 转换为string字符串类型/// /// 获取需要转换的值/// 需要格式化的位数/// 返回一个新的字符串public static string ToStr(this object s, string format = “”){ string result = “”; try { if (format == “”) { result = s.ToString(); } else { result = string.Format(“{0:” + format + “}”, s); } } catch { } return result;} #endregion 实际开发过程中发现通过后台查询再转换生成的JSON格式的字符串并不能直接用于easyui的 DataGrid 否则会报一个 Uncaught TypeError: Cannot read property ‘length’ of undefined 的错误。 后来经google发现有网友提到，生成的JSON字符串不能等同于JSON对象。所以需要再转换一次。 这里转换的方式就多了，我找了个最简单的： // data 为ajax获取的JSON字符串 $(‘#dg’).datagrid(‘loadData’, JSON.parse(data)); 其他方式自行搜索。 当然这里顺便也说下，如果JSON中包含NULL，需要转换为空字符串，否则也可能出现这个问题。","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"},{"name":"技术分类","slug":"大前端！/技术分类","permalink":"https://hero.triple.net.cn/categories/大前端！/技术分类/"}],"tags":[{"name":"easyui","slug":"easyui","permalink":"https://hero.triple.net.cn/tags/easyui/"},{"name":"jquery","slug":"jquery","permalink":"https://hero.triple.net.cn/tags/jquery/"},{"name":"datagrid","slug":"datagrid","permalink":"https://hero.triple.net.cn/tags/datagrid/"},{"name":"json","slug":"json","permalink":"https://hero.triple.net.cn/tags/json/"}]},{"title":"态类型的属性赋值","slug":"e6-80-81-e7-b1-bb-e5-9e-8b-e7-9a-84-e5-b1-9e-e6-80-a7-e8-b5-8b-e5-80-bc","date":"2016-01-11T07:08:12.000Z","updated":"2018-12-12T09:11:08.931Z","comments":true,"path":"2016/01/11/e6-80-81-e7-b1-bb-e5-9e-8b-e7-9a-84-e5-b1-9e-e6-80-a7-e8-b5-8b-e5-80-bc/","link":"","permalink":"https://hero.triple.net.cn/2016/01/11/e6-80-81-e7-b1-bb-e5-9e-8b-e7-9a-84-e5-b1-9e-e6-80-a7-e8-b5-8b-e5-80-bc/","excerpt":"","text":"可以向动态类型的属性赋值，属性名都是动态生成的，所以在输入时是没有智能提示的，因为是运行时才解析，所以，赋值和取值时的属性名字一定要一致，不然就取不到值了。 举个例子： dynamic dd = new ExpandoObject();// 赋值dd.Name = “小王”;dd.Age = 35; // 取值Console.WriteLine($”此人名叫 {dd.Name} ，年龄 {dd.Age}。”); ExpandoObject是专为动态行为而设计的类型，因为此时要向动态类型的实例的属性赋值，因此属于复合类型，在用dynamic关键字声明变量后，就必须用一个类来实例化，ExpandoObject类就是这个用途。 然后，赋了Name和Age属性的值，属性名字可以随便写，因为是动态的，编译时不会检查；然后在读取属性的值时，属性名一定要和刚才赋值时的名字一致，不然你是取不到值的。 所以得到结果如下： 此人名叫 小王 ，年龄 35。 实际上，ExpandoObject类显式实现了 IDictionary&lt;string,object&gt; 接口，所以，我们可以知道，其实它里面就是用一个字典来存储动态赋值的数值的，键的类型为字符串，表示属性名；值的类型为object，表示任何类型。 不信？咱们把它里面的字典数据输出来： IDictionary dic = (IDictionary)dd;foreach (var pv in dic){ Console.WriteLine($”Key = {pv.Key} , Value = {pv.Value}”);} 然后得到结果如下： Key = Name , Value = 小王 Key = Age , Value = 35 所为为什么不管你如何动态设置属性，它都可以进行解析，就是这个原因，里面用一个字典来负责存取数据。 From http://www.cnblogs.com/tcjiaan/p/5110658.html","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"asp.net","slug":"asp-net","permalink":"https://hero.triple.net.cn/tags/asp-net/"},{"name":"dynamic","slug":"dynamic","permalink":"https://hero.triple.net.cn/tags/dynamic/"},{"name":"动态类型","slug":"动态类型","permalink":"https://hero.triple.net.cn/tags/动态类型/"}]},{"title":"Linux命令行下使用socks代理","slug":"using-socket-proxy-in-linux","date":"2016-01-01T09:18:51.000Z","updated":"2018-12-18T04:16:57.252Z","comments":true,"path":"2016/01/01/using-socket-proxy-in-linux/","link":"","permalink":"https://hero.triple.net.cn/2016/01/01/using-socket-proxy-in-linux/","excerpt":"","text":"Linux CL下要用socks代理，可以使用 tsocks 这个软件。官网在这里 不过已经很有一段时间没有更新了。 一般发行版的软件源里面相信都有，直接安装即可。 安装完成后，编辑 /etc/tsocks.conf 文件，注意修改下面4行： 1234local = 192.168.1.0/255.255.255.0 //本地不使用代理 server = 192.168.1.1 //代理ip server_port = 1080 //端口 server_type = 5 //socks 4 or 5 保存之后，用 tsocks 打头，如： tsocks apt-get update","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://hero.triple.net.cn/categories/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"socket","slug":"socket","permalink":"https://hero.triple.net.cn/tags/socket/"},{"name":"shell","slug":"shell","permalink":"https://hero.triple.net.cn/tags/shell/"}]},{"title":"使用国内镜像为composer加速（感谢作者！）","slug":"e4-bd-bf-e7-94-a8-e5-9b-bd-e5-86-85-e9-95-9c-e5-83-8f-e4-b8-bacomposer-e5-8a-a0-e9-80-9f-ef-bc-88-e6-84-9f-e8-b0-a2-e4-bd-9c-e8-80-85-ef-bc-81-ef-bc-89","date":"2016-01-01T09:03:09.000Z","updated":"2018-12-12T09:05:36.308Z","comments":true,"path":"2016/01/01/e4-bd-bf-e7-94-a8-e5-9b-bd-e5-86-85-e9-95-9c-e5-83-8f-e4-b8-bacomposer-e5-8a-a0-e9-80-9f-ef-bc-88-e6-84-9f-e8-b0-a2-e4-bd-9c-e8-80-85-ef-bc-81-ef-bc-89/","link":"","permalink":"https://hero.triple.net.cn/2016/01/01/e4-bd-bf-e7-94-a8-e5-9b-bd-e5-86-85-e9-95-9c-e5-83-8f-e4-b8-bacomposer-e5-8a-a0-e9-80-9f-ef-bc-88-e6-84-9f-e8-b0-a2-e4-bd-9c-e8-80-85-ef-bc-81-ef-bc-89/","excerpt":"","text":"来源： http://pkg.phpcomposer.com/ Packagist / Composer 中国全量镜像用法：有两种方式启用本镜像服务： 将配置信息添加到 Composer 的配置文件 config.json 中（系统全局配置）。见“例1 （推荐方式）” 将配置信息添加到单个项目的 composer.json 文件中（单个项目配置）。见“例2” 例1：修改 composer 的全局配置文件（推荐方式）打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令： composer config -g repositories.packagist composer http://packagist.phpcomposer.com 例2：以 laravel 项目的 composer.json 配置文件为例，添加本镜像服务配置信息后如下所示（注意最后几行）：{ &quot;name&quot;: &quot;laravel/laravel&quot;, &quot;description&quot;: &quot;The Laravel Framework.&quot;, &quot;keywords&quot;: [&quot;framework&quot;, &quot;laravel&quot;], &quot;license&quot;: &quot;MIT&quot;, &quot;type&quot;: &quot;project&quot;, &quot;require&quot;: { &quot;php&quot;: &quot;&gt;=5.5.9&quot;, &quot;laravel/framework&quot;: &quot;5.1.*&quot; }, &quot;require-dev&quot;: { &quot;fzaninotto/faker&quot;: &quot;~1.4&quot;, &quot;mockery/mockery&quot;: &quot;0.9.*&quot;, &quot;phpunit/phpunit&quot;: &quot;~4.0&quot;, &quot;phpspec/phpspec&quot;: &quot;~2.1&quot; }, &quot;autoload&quot;: { &quot;classmap&quot;: [ &quot;database&quot; ], &quot;psr-4&quot;: { &quot;App&quot;: &quot;app/&quot; } }, &quot;autoload-dev&quot;: { &quot;classmap&quot;: [ &quot;tests/TestCase.php&quot; ] }, &quot;scripts&quot;: { &quot;post-install-cmd&quot;: [ &quot;php artisan clear-compiled&quot;, &quot;php artisan optimize&quot; ], &quot;pre-update-cmd&quot;: [ &quot;php artisan clear-compiled&quot; ], &quot;post-update-cmd&quot;: [ &quot;php artisan optimize&quot; ], &quot;post-root-package-install&quot;: [ &quot;php -r &quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);&quot;&quot; ], &quot;post-create-project-cmd&quot;: [ &quot;php artisan key:generate&quot; ] }, &quot;config&quot;: { &quot;preferred-install&quot;: &quot;dist&quot; }, &quot;repositories&quot;: [ {&quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;http://packagist.phpcomposer.com&quot;}, {&quot;packagist&quot;: false} ] } 注意：为了避免安装包的时候都要执行两次查询，切记要添加禁用 packagist 的设置，如下： { &quot;repositories&quot;: [ {&quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;http://packagist.phpcomposer.com&quot;}, {&quot;packagist&quot;: false} ] } 说明： 使用本镜像服务就意味着下载的所有的安装包元数据都将来自本镜像服务，而不再向 packagist.org 发起请求。这将加速 Composer 的安装过程，并且更加可靠、快速。（由于众所周知的原因，国外的网站连接速度太慢，并且随时可能被墙） 一般情况下，安装包的数据（zip 文件等）一般是从 GitHub 或其他第三方服务器上下载的，使用本镜像服务后，我们会缓存所有安装包到国内的机房，这样就不必再去向国外的网站发起请求，因此，即使 packagist.org、github.com 或其他第三方服务发生故障（主要是连接速度太慢和被墙），你仍然可以下载、更新安装包。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[]},{"title":"vim在不同平台的字体设置方法","slug":"vim-setting-fonts-on-windows-and-linux","date":"2015-12-04T09:06:39.000Z","updated":"2018-12-12T10:26:19.226Z","comments":true,"path":"2015/12/04/vim-setting-fonts-on-windows-and-linux/","link":"","permalink":"https://hero.triple.net.cn/2015/12/04/vim-setting-fonts-on-windows-and-linux/","excerpt":"","text":"在Linux下设置字体的命令是： : set guifont = Courier 14 而在Windows下则是： : guifont=Lucida_Console:h12:cANSI 当然，如果需要设置多个字体，则我们可以在各个字体之间添加逗号(,)来设置多个字体，如： : set guifont = Courier New 12 , Arial 10 如果字体名字中含有空格，则我们需要将其使用进行转义， 而在windows下则可以将空格转换为:字符。 当然，这样设置之后只会对当前会话有效， 而如果想每次都使用的话，则需要将其加入到其gvimrc设置文件中(将命令中前面的:去掉)。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://hero.triple.net.cn/tags/vim/"}]},{"title":"C#动态post 数据，以招商银行为例（部分代码，）","slug":"c-e5-8a-a8-e6-80-81post-e6-95-b0-e6-8d-ae-ef-bc-8c-e4-bb-a5-e6-8b-9b-e5-95-86-e9-93-b6-e8-a1-8c-e4-b8-ba-e4-be-8b-ef-bc-88-e9-83-a8-e5-88-86-e4-bb-a3-e7-a0-81-ef-bc-8c-ef-bc-89","date":"2015-12-04T08:59:53.000Z","updated":"2018-12-12T08:58:49.110Z","comments":true,"path":"2015/12/04/c-e5-8a-a8-e6-80-81post-e6-95-b0-e6-8d-ae-ef-bc-8c-e4-bb-a5-e6-8b-9b-e5-95-86-e9-93-b6-e8-a1-8c-e4-b8-ba-e4-be-8b-ef-bc-88-e9-83-a8-e5-88-86-e4-bb-a3-e7-a0-81-ef-bc-8c-ef-bc-89/","link":"","permalink":"https://hero.triple.net.cn/2015/12/04/c-e5-8a-a8-e6-80-81post-e6-95-b0-e6-8d-ae-ef-bc-8c-e4-bb-a5-e6-8b-9b-e5-95-86-e9-93-b6-e8-a1-8c-e4-b8-ba-e4-be-8b-ef-bc-88-e9-83-a8-e5-88-86-e4-bb-a3-e7-a0-81-ef-bc-8c-ef-bc-89/","excerpt":"","text":"genMc.bKey = &quot;AaBbCc1234567890&quot;; genMc.bDate = DateTime.Now.ToString(&quot;yyyyMMdd&quot;); genMc.bBranchID = &quot;0571&quot;; genMc.bCono = &quot;000056&quot;; genMc.bBillno = &quot;TEST&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;); genMc.bAmount = &quot;1.23&quot;; genMc.bMerchantPara = &quot;Hello CMBChina&quot;; genMc.bMerchantUrl = &quot;http://www.abc.com/resp.php&quot;; genMc.bPayer = &quot;Buyer1&quot;; genMc.bPayee = &quot;Employeer&quot;; genMc.bIP = &quot;123.123.123.123&quot;; genMc.bGoodType = &quot;54011600&quot;; genMc.bReserved = &quot;&quot;; string mcode = this.CreateMerchantCode(genMc); this.txtMerchantCode.Text = mcode; } protected void btnSubmitPayment_Click(object sender, EventArgs e) { // 拼接交易数据 //StringBuilder _postData = new StringBuilder(); //_postData.Append(&quot;&amp;BranchID=&quot; + this.genMc.bBranchID); //_postData.Append(&quot;&amp;Cono=&quot; + this.genMc.bCono); //_postData.Append(&quot;&amp;BillNo=&quot; + this.genMc.bBillno); //_postData.Append(&quot;&amp;Amount=&quot; + this.genMc.bAmount); //_postData.Append(&quot;&amp;Date=&quot; + this.genMc.bDate); genMc.bKey = &quot;AaBbCc1234567890&quot;; genMc.bDate = DateTime.Now.ToString(&quot;yyyyMMdd&quot;); genMc.bBranchID = &quot;0571&quot;; genMc.bCono = &quot;000056&quot;; genMc.bBillno = DateTime.Now.ToString(&quot;yyMMddHHmm&quot;); genMc.bAmount = &quot;1.23&quot;; genMc.bMerchantPara = &quot;Hello CMBChina&quot;; genMc.bMerchantUrl = &quot;http://www.abc.com/resp.php&quot;; genMc.bPayer = &quot;Buyer1&quot;; genMc.bPayee = &quot;Employeer&quot;; genMc.bIP = &quot;123.123.123.123&quot;; genMc.bGoodType = &quot;54011600&quot;; genMc.bReserved = &quot;&quot;; string _url = &quot;https://netpay.cmbchina.com/netpayment/basehttp.dll?prepayc&quot;; SortedDictionaryparam = new SortedDictionary(); param.Add(&quot;BranchID&quot;, this.genMc.bBranchID); param.Add(&quot;Cono&quot;, this.genMc.bCono); param.Add(&quot;BillNo&quot;, this.genMc.bBillno); param.Add(&quot;Amount&quot;, this.genMc.bAmount); param.Add(&quot;Date&quot;, this.genMc.bDate); //Set a name for the form string formID = &quot;PostForm&quot;; //Build the form using the specified data to be posted. StringBuilder strForm = new StringBuilder(); strForm.Append(&quot; &lt;form id=&quot;&quot;&quot;&quot; name=&quot;&quot;&quot;&quot;&gt;&lt;/form&gt;formID + &quot;&quot; action=&quot;&quot; + _url + &quot;&quot; method=&quot;POST&quot;&gt;&quot;); foreach (var item in param) { strForm.Append(&quot;&lt;input type=&quot;&quot;hidden&quot;&quot; name=&quot;&quot;&quot;&quot; /&gt; &quot;&quot; value=&quot;&quot; + item.Value + &quot;&quot;&gt;&quot;); } strForm.Append(&quot; &quot;); //Build the JavaScript which will do the Posting operation. StringBuilder strScript = new StringBuilder(); strScript.Append(&quot;&lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot;&gt;// &lt;![CDATA[ &quot;); strScript.Append(&quot;var v&quot; + formID + &quot; = document.&quot; + formID + &quot;;&quot;); strScript.Append(&quot;v&quot; + formID + &quot;.submit();&quot;); strScript.Append(&quot; // ]]&gt;&lt;/script&gt;&quot;); //Return the form and the script concatenated. //(The order is important, Form then JavaScript) Response.Write(strForm.ToString() + strScript.ToString());","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"asp.net","slug":"asp-net","permalink":"https://hero.triple.net.cn/tags/asp-net/"},{"name":"c#","slug":"c","permalink":"https://hero.triple.net.cn/tags/c/"},{"name":"post","slug":"post","permalink":"https://hero.triple.net.cn/tags/post/"}]},{"title":"redmine字体修改","slug":"redmine-e5-ad-97-e4-bd-93-e4-bf-ae-e6-94-b9","date":"2015-12-02T05:58:10.000Z","updated":"2018-12-12T09:27:29.808Z","comments":true,"path":"2015/12/02/redmine-e5-ad-97-e4-bd-93-e4-bf-ae-e6-94-b9/","link":"","permalink":"https://hero.triple.net.cn/2015/12/02/redmine-e5-ad-97-e4-bd-93-e4-bf-ae-e6-94-b9/","excerpt":"","text":"一切答案，尽在redmine安装路径的： redminepublicstylesheetsapplication.css","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"redmine","slug":"redmine","permalink":"https://hero.triple.net.cn/tags/redmine/"}]},{"title":"复制listview列表里内容","slug":"e5-a4-8d-e5-88-b6listview-e5-88-97-e8-a1-a8-e9-87-8c-e5-86-85-e5-ae-b9","date":"2015-10-22T05:48:35.000Z","updated":"2018-12-12T09:08:58.743Z","comments":true,"path":"2015/10/22/e5-a4-8d-e5-88-b6listview-e5-88-97-e8-a1-a8-e9-87-8c-e5-86-85-e5-ae-b9/","link":"","permalink":"https://hero.triple.net.cn/2015/10/22/e5-a4-8d-e5-88-b6listview-e5-88-97-e8-a1-a8-e9-87-8c-e5-86-85-e5-ae-b9/","excerpt":"","text":"`//用ctrl + C 复制listview列表里内容 private void listView1_KeyDown(object sender, KeyEventArgs e) { if (e.Control &amp;&amp; e.KeyCode == Keys.C) { if (listView1.SelectedItems.Count &gt; 0) { //将复制的内容放入剪切板中 if (listView1.SelectedItems[0].Text != &quot;&quot;) Clipboard.SetDataObject(listView1.SelectedItems[0].Text); } } }`","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"listview","slug":"listview","permalink":"https://hero.triple.net.cn/tags/listview/"}]},{"title":"怎样用JS准确的判断浏览器刷新事件","slug":"e6-80-8e-e6-a0-b7-e7-94-a8js-e5-87-86-e7-a1-ae-e7-9a-84-e5-88-a4-e6-96-ad-e6-b5-8f-e8-a7-88-e5-99-a8-e5-88-b7-e6-96-b0-e4-ba-8b-e4-bb-b6","date":"2015-09-25T04:31:05.000Z","updated":"2018-12-12T09:11:08.906Z","comments":true,"path":"2015/09/25/e6-80-8e-e6-a0-b7-e7-94-a8js-e5-87-86-e7-a1-ae-e7-9a-84-e5-88-a4-e6-96-ad-e6-b5-8f-e8-a7-88-e5-99-a8-e5-88-b7-e6-96-b0-e4-ba-8b-e4-bb-b6/","link":"","permalink":"https://hero.triple.net.cn/2015/09/25/e6-80-8e-e6-a0-b7-e7-94-a8js-e5-87-86-e7-a1-ae-e7-9a-84-e5-88-a4-e6-96-ad-e6-b5-8f-e8-a7-88-e5-99-a8-e5-88-b7-e6-96-b0-e4-ba-8b-e4-bb-b6/","excerpt":"","text":"window.onbeforeunload = function() { var n = window.event.screenX - window.screenLeft; var b = n &gt; document.documentElement.scrollWidth-20; if(b &amp;&amp; window.event.clientY &lt; 0 || window.event.altKey){ alert(&quot;这是一个关闭操作而非刷新&quot;); window.event.returnValue = &quot;&quot;; //此处放你想要操作的代码 }else{ alert(&quot;这是一个刷新操作而非关闭&quot;); } } 来源: http://segmentfault.com/q/1010000000204152","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"},{"name":"技术分类","slug":"大前端！/技术分类","permalink":"https://hero.triple.net.cn/categories/大前端！/技术分类/"}],"tags":[{"name":"关闭","slug":"关闭","permalink":"https://hero.triple.net.cn/tags/关闭/"},{"name":"刷新","slug":"刷新","permalink":"https://hero.triple.net.cn/tags/刷新/"}]},{"title":"php 连接数据库(mysql)提示 get_result()未定义","slug":"php-e8-bf-9e-e6-8e-a5-e6-95-b0-e6-8d-ae-e5-ba-93mysql-e6-8f-90-e7-a4-ba-get-result-e6-9c-aa-e5-ae-9a-e4-b9-89","date":"2015-09-17T10:37:39.000Z","updated":"2018-12-12T09:22:01.330Z","comments":true,"path":"2015/09/17/php-e8-bf-9e-e6-8e-a5-e6-95-b0-e6-8d-ae-e5-ba-93mysql-e6-8f-90-e7-a4-ba-get-result-e6-9c-aa-e5-ae-9a-e4-b9-89/","link":"","permalink":"https://hero.triple.net.cn/2015/09/17/php-e8-bf-9e-e6-8e-a5-e6-95-b0-e6-8d-ae-e5-ba-93mysql-e6-8f-90-e7-a4-ba-get-result-e6-9c-aa-e5-ae-9a-e4-b9-89/","excerpt":"","text":"和php 版本无关, install php5-mysqlnd 就好了","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hero.triple.net.cn/tags/PHP/"},{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"},{"name":"get_result","slug":"get-result","permalink":"https://hero.triple.net.cn/tags/get-result/"}]},{"title":"PHP 中使用参数化查询","slug":"php-e4-b8-ad-e4-bd-bf-e7-94-a8-e5-8f-82-e6-95-b0-e5-8c-96-e6-9f-a5-e8-af-a2","date":"2015-09-10T06:24:20.000Z","updated":"2018-12-12T09:22:01.184Z","comments":true,"path":"2015/09/10/php-e4-b8-ad-e4-bd-bf-e7-94-a8-e5-8f-82-e6-95-b0-e5-8c-96-e6-9f-a5-e8-af-a2/","link":"","permalink":"https://hero.triple.net.cn/2015/09/10/php-e4-b8-ad-e4-bd-bf-e7-94-a8-e5-8f-82-e6-95-b0-e5-8c-96-e6-9f-a5-e8-af-a2/","excerpt":"","text":"PHP 中提供了三种访问 MySQL 数据库的扩展，即 mysql，mysqli 和 PDO。它们的区别可以比较如下： 扩展 mysql mysqli PDO PHP 版本 2.0+ 5.0+ 5.1+ 生命周期 废弃 活跃 活跃 面向对象语法 否 是 是 过程式语法 是 是 否 服务器端预处理语句 否 是 是 客户端预处理语句 否 否 是 上面所说的预处理语句就是用于参数化查询的。可以看到，除了旧的 mysql 扩展不支持，mysqli 和 PDO 这两个新扩展都支持参数化查询。PDO 扩展相比 mysqli 扩展的好处是，它是与关系数据库类型无关的，因此很方便切换数据库，比如从 MySQL 切换到 PostgreSQL。 首先我们来看看利用 mysqli 扩展如何使用参数化查询。例如： $mysqli = new mysqli(&quot;localhost&quot;, &quot;dbusername&quot;, &quot;dbpassword&quot;, &quot;database&quot;); 再看看用 PDO 扩展如何使用参数化查询。例如： $pdo = new PDO(“mysql:host=localhost;dbname=database”, “dbusername”, “dbpassword”); $username = “somename”;$password = “someword”; $query = “SELECT * FROM users WHERE (name = :username) and (password = :password)”; $statement = $pdo-&gt;prepare($query, array(PDO::ATTR_CURSOR =&gt; PDO::CURSOR_FWDONLY));$statement-&gt;bindParam(“:username”, $username, PDO::PARAM_STR, 10);$statement-&gt;bindParam(“:password”, $password, PDO::PARAM_STR, 12);$statement-&gt;execute(); while ($row = $statement-&gt;fetch(PDO::FETCH_ASSOC)) { printf (“%s : %dn”, $row[“filename”], $row[“filesize”]);}$statement-&gt;closeCursor(); $pdo = null;","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"数据库","slug":"技术分类/数据库","permalink":"https://hero.triple.net.cn/categories/技术分类/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"},{"name":"参数化","slug":"参数化","permalink":"https://hero.triple.net.cn/tags/参数化/"}]},{"title":"emacs快速删除","slug":"emacs-e5-bf-ab-e9-80-9f-e5-88-a0-e9-99-a4","date":"2015-09-10T04:15:48.000Z","updated":"2018-12-12T09:19:14.533Z","comments":true,"path":"2015/09/10/emacs-e5-bf-ab-e9-80-9f-e5-88-a0-e9-99-a4/","link":"","permalink":"https://hero.triple.net.cn/2015/09/10/emacs-e5-bf-ab-e9-80-9f-e5-88-a0-e9-99-a4/","excerpt":"","text":"1 哪儿来的这个想法我从vim中借过来的，以前在用vi操作的时候常常会用到 dt df 来删除一大段文字，还会用到 ~di”~ 之类的快速命令。 可在emacs里面却没有这样的命令，今天在stackoverflow里面找到一个人跟我同样的问题。 Location: http://stackoverflow.com/questions/9860321/emacs-move-to-a-certain-character-forwards-and-backwards 2 问： Emacs: move to a certain(某一，已确定的) character, forwards and backwardsIn vim, I can use f to move the cursor forwards to a certain character and F to do this backwards. How to do it in Emacs? I know you can use C-z or M-z to delete until a certain character, and you can also first delete then paste to achieve a motion. But 1) is there a better way to do this, only movement, without delete? and 2) how to do this backwards? Forward incremental search is C-s , and reverse incremental search is C-r . 3 答： Responding to comment:To delete from the current position backwards to a specific character, you can use C-to mark the current position, then C-rto locate the search character, and C-w to up vote 2 down delete between current position and mark. To get more help on doing things in emacs, you should look at the tutorial. Typing C-h t will open the tutorial in a new buffer. To delete, use zap-to-char or activate the mark by pressing C-spc before jumping, then C-w. from： http://www.cnblogs.com/liweilijie/archive/2013/01/21/2870119.html","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://hero.triple.net.cn/tags/emacs/"},{"name":"删除","slug":"删除","permalink":"https://hero.triple.net.cn/tags/删除/"}]},{"title":"Slackware 14.1 安装完全指南","slug":"slackware-14-1-e5-ae-89-e8-a3-85-e5-ae-8c-e5-85-a8-e6-8c-87-e5-8d-97","date":"2015-09-07T03:29:00.000Z","updated":"2018-12-12T09:27:29.835Z","comments":true,"path":"2015/09/07/slackware-14-1-e5-ae-89-e8-a3-85-e5-ae-8c-e5-85-a8-e6-8c-87-e5-8d-97/","link":"","permalink":"https://hero.triple.net.cn/2015/09/07/slackware-14-1-e5-ae-89-e8-a3-85-e5-ae-8c-e5-85-a8-e6-8c-87-e5-8d-97/","excerpt":"","text":"Slackware 14.1 安装完全指南李顺亮 2013年12月14日 转自：http://www.onesl.com/web/ylsh/2013121402.html 这是也许是互联网上中文网页中最干净最完整的安装指南了，感谢作者！ Linux下面是非常纯净的世界，人与人之间的无私互助常常让我感动。可是，前两天我不幸误中了人 家好心的招。其实，执行清理命令之后，我就后悔自己怎么懒到想都没想呢。虽然立即中止执行，但还是误删了一些东西。事实再一次证明，linux下执行命令 无小事。且把我中招的命令记录在这里，坏就坏在我居然在根目录下执行。 find / -name core -print -exec rm -rf {} ; 友情提醒各位务必注意，linux命令一定要在相应目录下进终端后，才能执行命令。也就是说，要注意执行的范围。 一个个分析修复太过麻烦，反正闲着也是闲着，并且Slackware 14.1刚刚发布，还是重装系统最快也最省事。于是，立马行动，到中科大源里http://mirrors.ustc.edu.cn/slackware/slackware-14.1-iso/，下载slackware-14.1-install-dvd.iso备用。 一、制作启动u盘 尝试了在slackware下用Unetbootin制作启动u盘，但是全程尝试过后，发现自己并不习惯。重来一次吧，还是找台微软机器，改用自己习惯的UltraISO来写优盘。看来，习惯是一把杀猪刀，不服都不行，太可怕了。 a、使用UltraISO打开slackware-14.1-install-dvd.iso 镜像文件。 b、点击UltraISO菜单[启动]，并且选择[写入硬盘映像]。 c、写入方式选择USB-HDD+，开始制做U盘安装启动盘。 二、安装Slackware 系统 联想F31开机摁住F2进入BIOS，修改启动顺序，将U盘调整到硬盘之前，重启电脑。当然重启之时，要插入制作好的启动u盘。 引导到“boot：”时，直接回车，启动系统。设置键盘布局， 直接回车，使用默认的 US 键盘。询问是否作为“root”登录时，直接回车，自动以root登录。 1、硬盘分区 输入cfdisk并回车，对硬盘进行分区。注意以下是单系统分法： 一般将硬盘划分为根分区“/”、主分区“/home”和交换分区“swap”。 sda1 分30G，足够大了。要记住选择bootable并回车一次，即选作根分区。同时，write即写入硬盘。 sda2 分为内存的2倍大，把硬盘分区类型“type”的ID 改成82，作为交换分区。同时，write即写入硬盘。 sda3 余下的全部给个人用的主分区，同时write即写入硬盘。 最后，选择quit回车退出硬盘分区。 2、启动安装程序 在终端里输入setup，启动安装程序。 直接跳过KEYMAP设置，选择设置ADDSWAP，选择ok并回车。 检测交换分区是否有错误，选择No不检测，然后回车。之后，出现新画面swap space configured，即交换分区设置成功，并把设置信息添加到/etc/fstab。我们直接ok并回车。 设置TARGET。选择/dev/sba1，直接select并回车。然后Format，即格式化分区，同时选择格式化成Ext4文件系统。 之后，依样画葫芦设置/dev/sda3，并在要输入的地方输入/home。 设置完成，并把设置信息添加到 /etc/fstab。 3、设置SOURCE 因为要u盘安装，我们选择2 Install from a hard drive partition并回车。在出现的画面里，输入/dev/sdb4（安装之前可使用fdisk -l命令查看启动u盘所在分区）并回车。在新画面里输入/slackware并回车。 4、设置SELECT 我是KDEI、Y、Xfce不选。不开发的话，D应该也可以不选。 如KDEI不选，安装好系统后，到安装u盘的/media/SlackDVD/slackware/kdei/中，寻找中文包kde-l10n-zh_CN-4.10.5-noarch-1.txz，并在终端里installpkg安上中文支持。 选好回车，然后选择 Full 安装并回车，开始系统安装。 5、创建启动盘 直接Skip跳过。 6、安装 LILO 引导程序 直接Skip跳过，不安装lilo引导程序。一来我们不习惯lilo，二来Slackware 14.1已经自带了grub2。 不过，我们务必在终端里 grub-install –root-directory=/ /dev/sda 将Grub 2安装到硬盘引导扇区 grub-mkconfig -o /boot/grub/grub.cfg 重新生成配置文件。 7、配置鼠标 选择你的鼠标类型，我是用usb。之后，在gpm configuration新画面中，选择“Yes”开机启动 gpm 程序，以便在命令行界面可用鼠标复制粘帖文本。 8、配置网络 依次设置主机名（如smsl），设置域名（如onesl.com），设置网络管理，推荐networkmanager。 9、设置开机启动的系统服务 如非单机，建议加选打印机rc.cups和访问局域网rc.samba两项。 10、设置控制台字体 选 No 使用默认字体。 11、设置时区 选No设置为本地时间。然后，选择 Asia/Shanghai。 12、设置启动 X 时默认的窗口管理器 选择 KDE。如以后要修改登录桌面环境，可在终端输入：xwmconfig 重新选择。 13、设置 root 帐户密码 选Yes回车，输入两次要设置的root密码，然后回车。 至此，安装全部完成。返回到安装程序主菜单，选择 EXIT，退出安装程序。 在命令行输入 reboot 重启机器，启动slackware。 如重启后不能引导，我们可先用安装u盘来引导启动，在u盘进入启动界面“boot：”处，跟着界面上面的提示，输入： huge.s root=/dev/sda1 rdinit =ro 即可进入硬盘安好后的slackware系统。当然，最好先进入BIOS改回硬盘启动优先。 重启进入slackware，默认进入的并不是图形界面，如要进入图形界面则要键入startx。 三、系统配置 个人使用的话，就用root登录好了。新手的话，建议添加用户，否则用root登录弄出问题来就麻烦了。 1、更新系统 进入/etc/slackpkg/mirrors，设置用中科大current源，取消掉前面的#注释号即可。current源的slackware，既可以追新，又非常稳定。 然后，在终端里通过命令更新。依次： slackpkg updat slackpkg upgrade-all slackpkg install-new 因为是用current源，执行这个命令，可以避免一些新推出的包没有及时安装所导致的系统稳定问题。 我曾经在Slackware 14用 current源追新时，遇到过kde出问题进不了dolphin文档管理器。那就是因为current源里新推出的包nepomuk-core和nepomuk-widgets没有及时安装。还好找来了nepomuk-core-4.10.2-i486-1alien.txz和nepomuk-widgets-4.10.2-i486-1alien.txz，解决了问题。 有时包的版本不同，也会对系统产生影响。如，pango包的版本太高，安不上永中。可版本退下来到pango-1.30.1-i486-1.txz后，又发现不管是火狐还是永中，只要我们一选择“另存为”，界面里的文字不见了，全部成了一个个空空的框框。 2、修改默认界面 在/etc中的inittab文件中Default runlevel一行下面，将id后默认的3改成4，就可以默认开机进入图形界面。 3、配置中文环境 在/etc/profile.d/lang.sh里,修改/etc/profile.d/lang.sh 注释掉export LANG=en_US这行，并在下面加入 export LANG=zh_CN.UTF-8 同时，把/etc/profile.d/lang.csh也作同样修改。 然后，还要在系统设置里，点击locale(语系)，在country里选择china，languages选择简体中文为第一语言。 4、Firefox默认改为中文 点击ftp://ftp.mozilla.org/pub/firefox/releases/25.1/linux-i686/xpi/zh-CN.xpi，添加中文语言包。 然后，在FireFox地址栏里输入about:config 并回车，在过滤器里输入general.useragent.locale，双击选项并输入”zh-CN”，确定并重启。 5、安装火狐控件 下载Flash控件libflashplayer.so和银联控件libnpUPEditor.so，直接放到 /usr/lib/mozilla/plugins/ 重启火狐搞定。 6、安装fcitx中文输入法 removepkg scim和removepkg scim-bridge，删除掉SCIM相关软件包。在http://slackbuilds.org/repository/14.1/misc/fcitx/里，下载fcitx.tar.gz和fcitx-4.2.6.1_dict.tar.xz建包后安装。 7、增加微软字体 在这里http://www.54ry.com/software/xpfonts.tar.gz下好相关字体，进入“系统设置—字体管理”中安装字体。 四、软件安装 1、安装wps 可以说，我们对永中office已经非常失望。wps的努力，我们看在眼里。进wps社区http://bbs.wps.cn/forum-wpslinux-1.html或者直接到http://community.wps.cn/download/#alpha里下载kingsoft-office_9.1.0.4244~a12p3_x86.tar.xz包，解压就可以使用了。这样的绿色版本，我们大爱。 2、安装filezilla 到http://slackbuilds.org，依次下载并安装wxPython和filezilla。 3、安装wine 因为要使用东兴证券和Dreamweaver 8.0，当然只能用wine了。 建包安装wine要花太多时间，网上高人已经帮我们打好了包。我们直接下载wine-1.7.4-i486-1sl.txz，并且在终端里installpkg。 然后，我们依次wine安装东兴证券和Dreamweaver 8.0。Wine安装东兴证券时，会先找到一个gecko之类的东西，询问我们是否安装，我们当然同意并安装。 wine安装后，我们先要下载mfc42.dll，并直接把它放到/root/.wine/drive_c/windows/system32/目录下 于是，东兴证券复活了。 爱好三国志的网友，也可以wine来玩。下载三国志pk版之后wine，打上十周年补丁。不过，要把movie这个目录改个名如moviebak，反正就是不让它工作，这样才可以玩威力加强的pk版。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"slackware","slug":"slackware","permalink":"https://hero.triple.net.cn/tags/slackware/"}]},{"title":"NetBeans 中如何正常顯示中文","slug":"display-chinese-in-netbeans","date":"2015-09-02T07:26:09.000Z","updated":"2018-12-18T05:02:57.064Z","comments":true,"path":"2015/09/02/display-chinese-in-netbeans/","link":"","permalink":"https://hero.triple.net.cn/2015/09/02/display-chinese-in-netbeans/","excerpt":"NetBeans IDE 7.0.1 前一陣子出了，順手也一併升級。 前幾天，把舊版7.0移除。沒想到，居然把設定檔也給移除了。 由6.x一直升級到7.0，我都是這樣做，都沒問題。 這次怎會這樣？難道和這個農曆月份有關？ XD","text":"NetBeans IDE 7.0.1 前一陣子出了，順手也一併升級。 前幾天，把舊版7.0移除。沒想到，居然把設定檔也給移除了。 由6.x一直升級到7.0，我都是這樣做，都沒問題。 這次怎會這樣？難道和這個農曆月份有關？ XD 於是，只好重新設定。順便解決[NetBeans]使用 Consolas 字型時，無法顯示中文的問題。 其實，[NetBeans] 可以選擇程式碼顯示的字型。 但是，只有選擇某些英文字型時才能正常顯示中文，例如dialoginput這個字型。 但，選擇適合用於顯示程式碼的字型 - Consolas 時，中文卻變成小方塊般的亂碼，無法正常顯示中文。 為何說微軟的Consolas這字型，適合用於顯示程式碼呢？有興趣的人可以參考下面網頁，就不難瞭解… 在同事的協助下，我們倆終於搞定了 讓[NetBeans]可以顯示 Consolas 字型。 可以比較舒服的觀看code了～ 一般的显示配置1vim /usr/local/netbeans-7.3/etc/netbeans.conf 根据需要修改： 12345# 字体启用平滑：-J-Dswing.aatext=true -J-Dawt.useSystemAAFontSettings=lcd# 字体大小：--fontsize 18 ##完整設定步驟如下… 第一步先察看[NetBeans] 是使用的JAVA存放於那個目錄，請打開的設定檔 Ubuntu下面的路径：/usr/local/netbeans-7.3.1/etc/netbeans.conf 1C:Program FilesNetBeans 7**.**0.1etcNetBeans.conf 註：目錄請換成您自己[NetBeans] 所在目錄 因我安裝的是[NetBeans IDE 7.0.1]，所以是上述的目錄 找出如下的設定 12\\# Default location of JDK, can be overridden by using --jdkhome &lt;dir&gt;: NetBeans _jdkhome=&quot;C:Program FilesJavajre6&quot; 第二步到 [NetBeans]所使用的java目錄，開啟 fontconfig.properties 1C:Program FilesJavajre6libfontconfig.properties 註：如果目錄下沒有 fontconfig.properties 檔案，請複製該目錄下fontconfig.properties.src，並改名為 fontconfig.properties 第三步在檔案 fontconfig.properties 的最後，增加下面設定，設定Consolas的實體字型檔 1234filename.Consolas=CONSOLA.TTF filename.Consolas_Bold=CONSOLAB.TTF filename.Consolas_Italic=CONSOLAI.TTF filename.Consolas\\_Bold\\_Italic=CONSOLAZ.TTF 修改 Search Sequences 內的設定，將順序作如下的調整 12#sequence.monospaced**.**x-windows-950=chinese-ms950,alphabetic,dingbats,symbol,chinese-ms950-extb sequence.monospaced**.**x-windows-950=alphabetic,chinese-ms950,dingbats,symbol,chinese-ms950-extb 註：我是正體中文，其他中文語系，請改用您自己的中文語系 修改monospaced的相關設定 1234567891011121314151617181920212223242526272829303132#monospaced.plain.alphabetic=Courier New monospaced.plain.alphabetic=Consolas monospaced.plain.chinese-ms950=MingLiU monospaced.plain.chinese-ms950-extb=MingLiU-ExtB monospaced.plain.hebrew=David monospaced.plain.japanese=MS Gothic monospaced.plain.korean=GulimChe #monospaced.bold.alphabetic=Courier New Bold monospaced.bold.alphabetic=Consolas Bold monospaced.bold.chinese-ms950=PMingLiU monospaced.bold.chinese-ms950-extb=PMingLiU-ExtB monospaced.bold.hebrew=David Bold monospaced.bold.japanese=MS Gothic monospaced.bold.korean=GulimChe #monospaced.bolditalic.alphabetic=Courier New Italic monospaced.italic.alphabetic=Consolas Italic monospaced.italic.alphabetic=Consolas Italic monospaced.italic.chinese-ms950=PMingLiU monospaced.italic.chinese-ms950-extb=PMingLiU-ExtB monospaced.italic.hebrew=David monospaced.italic.japanese=MS Gothic monospaced.italic.korean=GulimChe #monospaced.bolditalic.alphabetic=Courier New Bold Italic monospaced.bolditalic.alphabetic=Consolas Bold Italic monospaced.bolditalic.chinese-ms950=PMingLiU monospaced.bolditalic.chinese-ms950-extb=PMingLiU-ExtB monospaced.bolditalic.hebrew=David Bold monospaced.bolditalic.japanese=MS Gothic monospaced.bolditalic.korean=GulimChe 第四步最後一步驟，可以說是最重要的… 在NetBeans 中的字型，請選擇monospaced 之前參考的文章，不是沒提到這點，不然就說選擇Consolas……… :( 設定完之後，也就瞭解…為何選擇dialoginput這個字型時，NetBeans 可以正常顯示～","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hero.triple.net.cn/tags/java/"},{"name":"netbeans","slug":"netbeans","permalink":"https://hero.triple.net.cn/tags/netbeans/"}]},{"title":"linux grep命令详解","slug":"linux-grep-e5-91-bd-e4-bb-a4-e8-af-a6-e8-a7-a3","date":"2015-08-13T05:57:31.000Z","updated":"2018-12-12T09:20:50.306Z","comments":true,"path":"2015/08/13/linux-grep-e5-91-bd-e4-bb-a4-e8-af-a6-e8-a7-a3/","link":"","permalink":"https://hero.triple.net.cn/2015/08/13/linux-grep-e5-91-bd-e4-bb-a4-e8-af-a6-e8-a7-a3/","excerpt":"","text":"简介 grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。 Unix的grep家族包括grep、egrep和fgrep。egrep和fgrep的命令只跟grep有很小不同。egrep是grep的扩展，支持更多的re元字符， fgrep就是fixed grep或fast grep，它们把所有的字母都看作单词，也就是说，正则表达式中的元字符表示回其自身的字面意义，不再特殊。linux使用GNU版本的grep。它功能更强，可以通过-G、-E、-F命令行选项来使用egrep和fgrep的功能。 grep常用用法[root@www ~]# grep [-acinv] [–color=auto] ‘搜寻字符串’ filename选项与参数： -a ：将 binary 文件以 text 文件的方式搜寻数据 -c ：计算找到 ‘搜寻字符串’ 的次数 -i ：忽略大小写的不同，所以大小写视为相同 -n ：顺便输出行号 -v ：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行！ –color=auto ：可以将找到的关键词部分加上颜色的显示喔！ 将/etc/passwd，有出现 root 的行取出来 # grep root /etc/passwd root:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin或 # cat /etc/passwd | grep rootroot:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin 将/etc/passwd，有出现 root 的行取出来,同时显示这些行在/etc/passwd的行号 # grep -n root /etc/passwd1:root:x:0:0:root:/root:/bin/bash 30:operator:x:11:0:operator:/root:/sbin/nologin 在关键字的显示方面，grep 可以使用 –color=auto 来将关键字部分使用颜色显示。 这可是个很不错的功能啊！但是如果每次使用 grep 都得要自行加上 –color=auto 又显的很麻烦～ 此时那个好用的 alias 就得来处理一下啦！你可以在 ~/.bashrc 内加上这行：『alias grep=’grep –color=auto’』再以『 source ~/.bashrc 』来立即生效即可喔！ 这样每次运行 grep 他都会自动帮你加上颜色显示啦 将/etc/passwd，将没有出现 root 的行取出来 # grep -v root /etc/passwd root:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin 将/etc/passwd，将没有出现 root 和nologin的行取出来 # grep -v root /etc/passwd | grep -v nologinroot:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin 用 dmesg 列出核心信息，再以 grep 找出内含 eth 那行,要将捉到的关键字显色，且加上行号来表示： [root@www ~]# dmesg | grep -n –color=auto ‘eth’247:eth0: RealTek RTL8139 at 0xee846000, 00:90:cc:a6:34:84, IRQ 10248:eth0: Identified 8139 chip type ‘RTL-8139C’294:eth0: link up, 100Mbps, full-duplex, lpa 0xC5E1305:eth0: no IPv6 routers present# 你会发现除了 eth 会有特殊颜色来表示之外，最前面还有行号喔！ 在关键字的显示方面，grep 可以使用 –color=auto 来将关键字部分使用颜色显示。 这可是个很不错的功能啊！但是如果每次使用 grep 都得要自行加上 –color=auto 又显的很麻烦～ 此时那个好用的 alias 就得来处理一下啦！你可以在 ~/.bashrc 内加上这行：『alias grep=’grep –color=auto’』再以『 source ~/.bashrc 』来立即生效即可喔！ 这样每次运行 grep 他都会自动帮你加上颜色显示啦 用 dmesg 列出核心信息，再以 grep 找出内含 eth 那行,在关键字所在行的前两行与后三行也一起捉出来显示 [root@www ~]# dmesg | grep -n -A3 -B2 –color=auto ‘eth’245-PCI: setting IRQ 10 as level-triggered 246-ACPI: PCI Interrupt 0000:00:0e.0[A] -&gt; Link [LNKB] … 247:eth0: RealTek RTL8139 at 0xee846000, 00:90:cc:a6:34:84, IRQ 10248:eth0: Identified 8139 chip type ‘RTL-8139C’249-input: PC Speaker as /class/input/input2 250-ACPI: PCI Interrupt 0000:00:01.4[B] -&gt; Link [LNKB] … 251-hdb: ATAPI 48X DVD-ROM DVD-R-RAM CD-R/RW drive, 2048kB Cache, UDMA(66)# 如上所示，你会发现关键字 247 所在的前两行及 248 后三行也都被显示出来！# 这样可以让你将关键字前后数据捉出来进行分析啦！ 根据文件内容递归查找目录 # grep ‘energywise’ * #在当前目录搜索带’energywise’行的文件 # grep -r ‘energywise’ * #在当前目录及其子目录下搜索’energywise’行的文件 # grep -l -r ‘energywise’ * #在当前目录及其子目录下搜索’energywise’行的文件，但是不显示匹配的行，只显示匹配的文件 这几个命令很使用，是查找文件的利器。 grep与正规表达式 字符类 字符类的搜索：如果我想要搜寻 test 或 taste 这两个单字时，可以发现到，其实她们有共通的 ‘t?st’ 存在～这个时候，我可以这样来搜寻： [root@www ~]# grep -n ‘t[ae]st’ regular_express.txt 8:I can’t finish the test.9:Oh! The soup taste good. 其实 [] 里面不论有几个字节，他都谨代表某『一个』字节， 所以，上面的例子说明了，我需要的字串是『tast』或『test』两个字串而已！ 字符类的反向选择 [^] ：如果想要搜索到有 oo 的行，但不想要 oo 前面有 g，如下 [root@www ~]# grep -n ‘[^g]oo’ regular_express.txt 2:apple is my favorite food. 3:Football game is not use feet only. 18:google is the best tools for search keyword. 19:goooooogle yes! 第 2,3 行没有疑问，因为 foo 与 Foo 均可被接受！ 但是第 18 行明明有 google 的 goo 啊～别忘记了，因为该行后面出现了 tool 的 too 啊！所以该行也被列出来～ 也就是说， 18 行里面虽然出现了我们所不要的项目 (goo) 但是由於有需要的项目 (too) ， 因此，是符合字串搜寻的喔！ 至於第 19 行，同样的，因为 goooooogle 里面的 oo 前面可能是 o ，例如： go(ooo)oogle ，所以，这一行也是符合需求的！ 字符类的连续：再来，假设我 oo 前面不想要有小写字节，所以，我可以这样写 [^abcd….z]oo ， 但是这样似乎不怎么方便，由於小写字节的 ASCII 上编码的顺序是连续的， 因此，我们可以将之简化为底下这样： [root@www ~]# grep -n ‘[^a-z]oo’ regular_express.txt 3:Football game is not use feet only. 也就是说，当我们在一组集合字节中，如果该字节组是连续的，例如大写英文/小写英文/数字等等， 就可以使用[a-z],[A-Z],[0-9]等方式来书写，那么如果我们的要求字串是数字与英文呢？ 呵呵！就将他全部写在一起，变成：[a-zA-Z0-9]。 我们要取得有数字的那一行，就这样： [root@www ~]# grep -n ‘[0-9]‘ regular_express.txt 5:However, this dress is about $ 3183 dollars. 15:You are the best is mean you are the no. 1. 行首与行尾字节 ^ $ 行首字符：如果我想要让 the 只在行首列出呢？ 这个时候就得要使用定位字节了！我们可以这样做： [root@www ~]# grep -n ‘^the’ regular_express.txt 12:the symbol ‘*’ is represented as start. 此时，就只剩下第 12 行，因为只有第 12 行的行首是 the 开头啊～此外， 如果我想要开头是小写字节的那一行就列出呢？可以这样： [root@www ~]# grep -n ‘^[a-z]‘ regular_express.txt 2:apple is my favorite food. 4:this dress doesn’t fit me.10:motorcycle is cheap than car. 12:the symbol ‘*’ is represented as start. 18:google is the best tools for search keyword. 19:goooooogle yes!20:go! go! Let’s go. 如果我不想要开头是英文字母，则可以是这样： [root@www ~]# grep -n ‘^[^a-zA-Z]‘ regular_express.txt 1:”Open Source” is a good mechanism to develop programs. 21:# I am VBird ^ 符号，在字符类符号(括号[])之内与之外是不同的！ 在 [] 内代表『反向选择』，在 [] 之外则代表定位在行首的意义！ 那如果我想要找出来，行尾结束为小数点 (.) 的那一行： [root@www ~]# grep -n ‘.$’ regular_express.txt 1:”Open Source” is a good mechanism to develop programs. 2:apple is my favorite food. 3:Football game is not use feet only. 4:this dress doesn’t fit me.10:motorcycle is cheap than car. 11:This window is clear. 12:the symbol ‘*’ is represented as start. 15:You are the best is mean you are the no. 1. 16:The world is the same with “glad”. 17:I like dog. 18:google is the best tools for search keyword. 20:go! go! Let’s go. 特别注意到，因为小数点具有其他意义(底下会介绍)，所以必须要使用转义字符()来加以解除其特殊意义！ 找出空白行： [root@www ~]# grep -n ‘^$’ regular_express.txt 22: 因为只有行首跟行尾 (^$)，所以，这样就可以找出空白行啦！ 任意一个字节 . 与重复字节 * 这两个符号在正则表达式的意义如下： . (小数点)：代表『一定有一个任意字节』的意思； * (星号)：代表『重复前一个字符， 0 到无穷多次』的意思，为组合形态 假设我需要找出 g??d 的字串，亦即共有四个字节， 起头是 g 而结束是 d ，我可以这样做： [root@www ~]# grep -n ‘g..d’ regular_express.txt 1:”Open Source” is a good mechanism to develop programs. 9:Oh! The soup taste good. 16:The world is the same with “glad”. 因为强调 g 与 d 之间一定要存在两个字节，因此，第 13 行的 god 与第 14 行的 gd 就不会被列出来啦！ 如果我想要列出有 oo, ooo, oooo 等等的数据， 也就是说，至少要有两个(含) o 以上，该如何是好？ 因为 代表的是『重复 0 个或多个前面的 RE 字符』的意义， 因此，『o』代表的是：『拥有空字节或一个 o 以上的字节』，因此，『 grep -n ‘o‘ regular_express.txt 』将会把所有的数据都列印出来终端上！ 当我们需要『至少两个 o 以上的字串』时，就需要 ooo ，亦即是： [root@www ~]# grep -n ‘ooo*’ regular_express.txt 1:”Open Source” is a good mechanism to develop programs. 2:apple is my favorite food. 3:Football game is not use feet only. 9:Oh! The soup taste good. 18:google is the best tools for search keyword. 19:goooooogle yes! 如果我想要字串开头与结尾都是 g，但是两个 g 之间仅能存在至少一个 o ，亦即是 gog, goog, gooog…. 等等，那该如何？ [root@www ~]# grep -n ‘goo*g’ regular_express.txt 18:google is the best tools for search keyword. 19:goooooogle yes! 如果我想要找出 g 开头与 g 结尾的行，当中的字符可有可无 [root@www ~]# grep -n ‘g.*g’ regular_express.txt 1:”Open Source” is a good mechanism to develop programs. 14:The gd software is a library for drafting programs. 18:google is the best tools for search keyword. 19:goooooogle yes!20:go! go! Let’s go. 因为是代表 g 开头与 g 结尾，中间任意字节均可接受，所以，第 1, 14, 20 行是可接受的喔！ 这个 .* 的 RE 表示任意字符是很常见的. 如果我想要找出『任意数字』的行？因为仅有数字，所以就成为： [root@www ~]# grep -n ‘[0-9][0-9]*’ regular_express.txt 5:However, this dress is about $ 3183 dollars. 15:You are the best is mean you are the no. 1. **限定连续 RE 字符范围 {}** 我们可以利用 . 与 RE 字符及 * 来配置 0 个到无限多个重复字节， 那如果我想要限制一个范围区间内的重复字节数呢？ 举例来说，我想要找出两个到五个 o 的连续字串，该如何作？这时候就得要使用到限定范围的字符 {} 了。 但因为 { 与 } 的符号在 shell 是有特殊意义的，因此， 我们必须要使用字符 来让他失去特殊意义才行。 至於 {} 的语法是这样的，假设我要找到两个 o 的字串，可以是： [root@www ~]# grep -n ‘o{2}’ regular_express.txt 1:”Open Source” is a good mechanism to develop programs. 2:apple is my favorite food. 3:Football game is not use feet only. 9:Oh! The soup taste good. 18:google is the best tools for search ke 19:goooooogle yes! 假设我们要找出 g 后面接 2 到 5 个 o ，然后再接一个 g 的字串，他会是这样： [root@www ~]# grep -n ‘go{2,5}g’ regular_express.txt 18:google is the best tools for search keyword. 如果我想要的是 2 个 o 以上的 goooo….g 呢？除了可以是 gooo*g ，也可以是： [root@www ~]# grep -n ‘go{2,}g’ regular_express.txt 18:google is the best tools for search keyword. 19:goooooogle yes! 扩展grep(grep -E 或者 egrep)： 使用扩展grep的主要好处是增加了额外的正则表达式元字符集。 打印所有包含NW或EA的行。如果不是使用egrep，而是grep，将不会有结果查出。 # egrep &apos;NW|EA&apos; testfile northwest NW Charles Main 3.0 .98 3 34 eastern EA TB Savage 4.4 .84 5 20 对于标准grep，如果在扩展元字符前面加，grep会自动启用扩展选项-E。 #grep ‘NW|EA’ testfilenorthwest NW Charles Main 3.0 .98 3 34 eastern EA TB Savage 4.4 .84 5 20 搜索所有包含一个或多个3的行。 # egrep ‘3+’ testfile# grep -E ‘3+’ testfile# grep ‘3+’ testfile #这3条命令将会northwest NW Charles Main 3.0 .98 3 34 western WE Sharon Gray 5.3 .97 5 23 northeast NE AM Main Jr. 5.1 .94 3 13 central CT Ann Stephens 5.7 .94 5 13 搜索所有包含0个或1个小数点字符的行。 # egrep ‘2.?[0-9]‘ testfile# grep -E ‘2.?[0-9]‘ testfile# grep ‘2.?[0-9]‘ testfile #首先含有2字符，其后紧跟着0个或1个点，后面再是0和9之间的数字。western WE Sharon Gray 5.3 .97 5 23 southwest SW Lewis Dalsass 2.7 .8 2 18 eastern EA TB Savage 4.4 .84 5 20 搜索一个或者多个连续的no的行。 # egrep ‘(no)+’ testfile# grep -E ‘(no)+’ testfile# grep ‘(no)+’ testfile #3个命令返回相同结果，northwest NW Charles Main 3.0 .98 3 34 northeast NE AM Main Jr. 5.1 .94 3 13 north NO Margot Weber 4.5 .89 5 9 不使用正则表达式 fgrep 查询速度比grep命令快，但是不够灵活：它只能找固定的文本，而不是规则表达式。 如果你想在一个文件或者输出中找到包含星号字符的行 fgrep ‘‘ /etc/profilefor i in /etc/profile.d/.sh ; do 或grep -F ‘‘ /etc/profilefor i in /etc/profile.d/.sh ; do","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hero.triple.net.cn/tags/linux/"},{"name":"grep","slug":"grep","permalink":"https://hero.triple.net.cn/tags/grep/"}]},{"title":"C# 时间戳转换为普通时间","slug":"c-e6-97-b6-e9-97-b4-e6-88-b3-e8-bd-ac-e6-8d-a2-e4-b8-ba-e6-99-ae-e9-80-9a-e6-97-b6-e9-97-b4","date":"2015-08-06T06:02:10.000Z","updated":"2018-12-12T08:58:49.126Z","comments":true,"path":"2015/08/06/c-e6-97-b6-e9-97-b4-e6-88-b3-e8-bd-ac-e6-8d-a2-e4-b8-ba-e6-99-ae-e9-80-9a-e6-97-b6-e9-97-b4/","link":"","permalink":"https://hero.triple.net.cn/2015/08/06/c-e6-97-b6-e9-97-b4-e6-88-b3-e8-bd-ac-e6-8d-a2-e4-b8-ba-e6-99-ae-e9-80-9a-e6-97-b6-e9-97-b4/","excerpt":"","text":"时间戳转为C#格式时间 // 时间戳转为C#格式时间 private DateTime StampToDateTime(string timeStamp) { DateTime dateTimeStart = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1)); long lTime = long.Parse(timeStamp + &quot;0000000&quot;); TimeSpan toNow = new TimeSpan(lTime); return dateTimeStart.Add(toNow); } DateTime时间格式转换为Unix时间戳格式 // DateTime时间格式转换为Unix时间戳格式 private int DateTimeToStamp(System.DateTime time) { System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1)); return (int)(time - startTime).TotalSeconds; }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"时间","slug":"时间","permalink":"https://hero.triple.net.cn/tags/时间/"},{"name":"时间戳","slug":"时间戳","permalink":"https://hero.triple.net.cn/tags/时间戳/"},{"name":"转换","slug":"转换","permalink":"https://hero.triple.net.cn/tags/转换/"}]},{"title":"ubuntu下怎么使用shadowsocks？","slug":"ubuntu-e4-b8-8b-e6-80-8e-e4-b9-88-e4-bd-bf-e7-94-a8shadowsocks-ef-bc-9f","date":"2015-08-04T02:39:36.000Z","updated":"2018-12-12T09:24:02.238Z","comments":false,"path":"2015/08/04/ubuntu-e4-b8-8b-e6-80-8e-e4-b9-88-e4-bd-bf-e7-94-a8shadowsocks-ef-bc-9f/","link":"","permalink":"https://hero.triple.net.cn/2015/08/04/ubuntu-e4-b8-8b-e6-80-8e-e4-b9-88-e4-bd-bf-e7-94-a8shadowsocks-ef-bc-9f/","excerpt":"","text":"Ubuntu下怎么使用Shadowsocks？用pip安装就很简单。 安装ssapt-get install python-pip &amp; pip install shadowsocks 启动 ss客户端 启动方法a，直接在终端用命令： sslocal -s 123.123.213.213 -p 6666 -b 127.0.0.1 -l 1080 -k 23333 -t 600 -m aes-256-cfb 2. 启动方法b，用配置文件启动 配置文件存为ss.conf，格式： { &quot;server&quot; : &quot;123.123.213.213&quot;, &quot;server_port&quot; : 6666, &quot;local_port&quot; : 1080, &quot;password&quot; : &quot;23333&quot;, &quot;timeout&quot; : 600, &quot;method&quot; : &quot;aes-256-cfb&quot; } 启动时使用命令： sslocal -c /filepath/to/ss.conf 完成。 **PS：** &gt; a. 记得在Network设置代理: 设置Socks Host指向 ss客户端的本地IP和端口, 即`127.0.0.1 1080`; &gt; b. 有同学反应还是不能科学上网。说明一下，SS不同于VPN，它是走socks5协议的，一般搭配浏览器食用，对于 **terminal的get,wget等走http是没有帮助的**。虽然有socks转http的方法，但这里就不折腾了。 )开机启动ss(可选)在/etc/rc.local中添加启动命令。例如: sudo vi /etc/rc.local 在exit 0前添加(这里假设你已经在第2步写好shell脚本，并命名为`ss_start.sh`) sudo sh /path/to/sslocal/ss_start.sh 如果路径和权限都没问题，在下次开机时就会启动ss了。 查看ss是否已经开启，用下面这个: ps -ef | grep sslocal 输出两条进程信息就说明成功开启了(其中一条是上面这条命令的)。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://hero.triple.net.cn/tags/shadowsocks/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://hero.triple.net.cn/tags/ubuntu/"}]},{"title":"vim中，如何保存宏","slug":"vim-e4-b8-ad-ef-bc-8c-e5-a6-82-e4-bd-95-e4-bf-9d-e5-ad-98-e5-ae-8f","date":"2015-07-24T03:14:00.000Z","updated":"2018-12-12T09:24:02.291Z","comments":true,"path":"2015/07/24/vim-e4-b8-ad-ef-bc-8c-e5-a6-82-e4-bd-95-e4-bf-9d-e5-ad-98-e5-ae-8f/","link":"","permalink":"https://hero.triple.net.cn/2015/07/24/vim-e4-b8-ad-ef-bc-8c-e5-a6-82-e4-bd-95-e4-bf-9d-e5-ad-98-e5-ae-8f/","excerpt":"","text":"vim中的宏其实是把操作命令写到一个寄存器里了。 宏的确是可以保存下来，想要发给别人还需要一系列操作。 按下面操作。 1 先建立一个宏。按qa建立名字叫a的宏，其实是把你的操作存在寄存器a里。 2 在任意一个文件的任意位置normal状态下，命令”ap 即可以把宏的内容显示出来。比如说我的宏是：”LIBRARY ieee;^M USE ieee.std_logic_1164.all;^M USE ieee.std_logic_arith.all;^M USE ieee.std_logic_unsigned.ALL^M^[“ 3 如果你想发给别人可以保存下来这段内容。发给对方。 4 对方接到你的这段宏之后，可以使用命令：let @a=”LIBRARY ieee;^M USE ieee.std_logic_1164.all;^M USE ieee.std_logic_arith.all;^M USE ieee.std_logic_unsigned.ALL^M^[“ 5 这样他@a命令就可以使用你制作的宏了。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://hero.triple.net.cn/tags/vim/"},{"name":"宏","slug":"宏","permalink":"https://hero.triple.net.cn/tags/宏/"}]},{"title":"Gridview导出Excel（基本版）","slug":"gridview-e5-af-bc-e5-87-baexcel-ef-bc-88-e5-9f-ba-e6-9c-ac-e7-89-88-ef-bc-89","date":"2015-06-17T09:06:28.000Z","updated":"2018-12-12T09:19:37.123Z","comments":true,"path":"2015/06/17/gridview-e5-af-bc-e5-87-baexcel-ef-bc-88-e5-9f-ba-e6-9c-ac-e7-89-88-ef-bc-89/","link":"","permalink":"https://hero.triple.net.cn/2015/06/17/gridview-e5-af-bc-e5-87-baexcel-ef-bc-88-e5-9f-ba-e6-9c-ac-e7-89-88-ef-bc-89/","excerpt":"","text":"关键方法/// /// 将网格数据导出到Excel////// 网格名称(如GridView1)/// 要导出的文件类型(Excel:application/ms-excel)/// 要保存的文件名public void GridViewToExcel(Control ctrl, string FileType, string FileName){ bool gridViewAllowPaging = false; if (ctrl is GridView) { gridViewAllowPaging = ((GridView)ctrl).AllowPaging; if (gridViewAllowPaging) { ((GridView)ctrl).AllowPaging = false; } } HttpContext.Current.Response.Charset = “GB2312”; HttpContext.Current.Response.ContentEncoding = System.Text.Encoding.UTF8;//注意编码 HttpContext.Current.Response.AppendHeader(“Content-Disposition”, “attachment;filename=” + HttpUtility.UrlEncode(FileName, System.Text.Encoding.UTF8).ToString()); HttpContext.Current.Response.ContentType = FileType;//image/JPEG;text/HTML;image/GIF;vnd.ms-excel/msword ctrl.Page.EnableViewState = false; System.IO.StringWriter tw = new System.IO.StringWriter(); HtmlTextWriter hw = new HtmlTextWriter(tw); ctrl.RenderControl(hw); HttpContext.Current.Response.Write(tw.ToString()); HttpContext.Current.Response.End(); if (ctrl is GridView &amp;&amp; gridViewAllowPaging) { ((GridView)ctrl).AllowPaging = true; }} /// /// 必须重写，否则会报错——类型“GridView”的控件“gridView1”必须放在具有 runat=server 的窗体标记内。//////public override void VerifyRenderingInServerForm(Control control){} 调用方法也很简单： protected void btnExport_Click(object sender, EventArgs e) { // export to excel GridViewToExcel(gridView, &quot;application/ms-excel&quot;, &quot;explode_&quot; + DateTime.Now.ToShortTimeString()+&quot;.xls&quot;); }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"excel","slug":"excel","permalink":"https://hero.triple.net.cn/tags/excel/"},{"name":"gridview","slug":"gridview","permalink":"https://hero.triple.net.cn/tags/gridview/"}]},{"title":"C# 生成大量16位随机数","slug":"c-e7-94-9f-e6-88-90-e5-a4-a7-e9-87-8f16-e4-bd-8d-e9-9a-8f-e6-9c-ba-e6-95-b0","date":"2015-05-28T10:10:00.000Z","updated":"2018-12-12T08:58:49.126Z","comments":true,"path":"2015/05/28/c-e7-94-9f-e6-88-90-e5-a4-a7-e9-87-8f16-e4-bd-8d-e9-9a-8f-e6-9c-ba-e6-95-b0/","link":"","permalink":"https://hero.triple.net.cn/2015/05/28/c-e7-94-9f-e6-88-90-e5-a4-a7-e9-87-8f16-e4-bd-8d-e9-9a-8f-e6-9c-ba-e6-95-b0/","excerpt":"","text":"using System.Collections.Generic;using System.Linq;using System.Text;using System.Security.Cryptography;using System.IO; namespace InitRandom{ // 生成16位随机数字，写入D:AAAA16.txt中 // // todo: 有万分之一左右的数据长度小于16位 class Program { static void Main(string[] args) { string path = @”D:AAAA16.txt”; RandomNumberGenerator randgen = new RNGCryptoServiceProvider(); byte[] data = new byte[8]; using (StreamWriter sw = new StreamWriter(path, true)) { for (long i = 0; i &lt; 100000; i++) { randgen.GetBytes(data); string n = Math.Abs(BitConverter.ToInt64(data, 0)).ToString(); if (n.Length &gt;= 16) { sw.Write(n.Substring(0,16) + “n”); } } } Console.WriteLine(“Finished”); Console.ReadLine(); } }}","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"随机数","slug":"随机数","permalink":"https://hero.triple.net.cn/tags/随机数/"}]},{"title":"EasyUI分页","slug":"easyui-e5-88-86-e9-a1-b5","date":"2015-05-17T09:53:41.000Z","updated":"2018-12-12T09:19:14.480Z","comments":false,"path":"2015/05/17/easyui-e5-88-86-e9-a1-b5/","link":"","permalink":"https://hero.triple.net.cn/2015/05/17/easyui-e5-88-86-e9-a1-b5/","excerpt":"","text":"前端代码（ASPX） 开发时的代码，拿来即用主义有福～～～ id Product Code List StorageName Unit Cost 前端JS： $(function () { $('#tt').datagrid({ pageNumber: 1, url: \"listData.ashx\", columns: \\[\\[ { field: 'id', title: 'id', width: 100 }, { field: 'StorageName', title: 'name', width: 100 }, { field: 'MaxCap', title: 'maxcap', width: 100 }, { field: 'Code', title: 'code', width: 100 }, \\]\\], pagination: true, rownumbers: true, pageList: \\[10, 20, 30, 50\\] }); var p = $('#tt').datagrid('getPager'); (p).pagination({ beforePageText: '第', //页数文本框前显示的汉字 afterPageText: '页 共 {pages} 页', displayMsg: '共{total}条数据' }); }); 后台处理程序（ASHX）： public void ProcessRequest(HttpContext context) { context.Response.ContentType = “application/json”; context.Response.Charset = “utf-8”; //总条数 int count = 1; // 页码数 string pageNumber = context.Request[“page”] ?? “1”; // 页尺寸 string pageSize = context.Request[“rows”] ?? “10”; // 库位编号 string code = context.Request[“code”] ?? “”; // 仓库编号 string whid = context.Request[“WHID”] ?? “”; // 库位名称 string sName = context.Request[“sName”] ?? “”; // 渠道 string channel = context.Request[“Channal”] ?? “”; string strSql = &quot;select top &quot; + pageSize + &quot; * from Base\\_Storage bs inner join Base\\_Warehouse bw on bs.WHID=bw.ID where 1=1 &quot;; string pageStr = &quot;&quot;; string strWhere = &quot;&quot;; if (pageNumber == &quot;1&quot;) { pageStr += &quot;&quot;; } else { pageStr += &quot; and bs.ID not in (SELECT TOP (&quot; + int.Parse(pageSize) * (int.Parse(pageNumber) - 1) + &quot;) ID FROM Base_Storage ORDER BY ID) &quot;; } if (code.Length &gt; 0) { strWhere += &quot;and bs.Code like &apos;%&quot; + code + &quot;%&apos; &quot;; } if (whid.Length &gt; 0) { strWhere += &quot;and bs.WHID in (&quot; + whid + &quot;) &quot;; } if (sName.Length &gt; 0) { strWhere += &quot;and bs.StorageName like &apos;&quot; + sName + &quot;%&apos; &quot;; } if (channel.Length &gt; 0) { strWhere += &quot;and bs.Channel=&apos;&quot; + channel + &quot;&apos; &quot;; } strSql = strSql + pageStr; string json = string.Empty; DataTable dt = DBHelper.getDataTable(strSql); // 获取总页数 DataTable dtPage = DBHelper.getDataTable(&quot;select * from Base\\_Storage bs inner join Base\\_Warehouse bw on bs.WHID=bw.ID where 1=1 &quot; + strWhere); if (dtPage != null &amp;&amp; dtPage.Rows.Count &gt; 0) { count = dtPage.Rows.Count; } // 校验是否有数据，并生成 Json格式 if (dt.Rows.Count &gt; 0) { json = getJson(dt, count,int.Parse(pageSize),int.Parse(pageNumber),strSql); } context.Response.Write(json); context.Response.End(); } /// &lt;summary&gt; /// 节点树的组合 /// &lt;/summary&gt; /// &lt;paramname=&quot;dt&quot;&gt;参数为DataTable&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public string getJson(DataTable dt, int count, int pageSize, int pageNumber,string strsql) { StringBuilder json = new StringBuilder(); json.Append(&quot;{&quot;); if (dt != null &amp;&amp; dt.Rows.Count &gt; 0) { json.Append(&quot;&quot;rows&quot;:\\[&quot;); // 循环出所有一级地理位置 foreach (DataRow dr in dt.Rows) { json.Append(&quot;{&quot;id&quot;:&quot; + dr\\[&quot;ID&quot;\\].ToString()); json.Append(&quot;,&quot;Code&quot;:&quot;&quot; + dr\\[&quot;Code&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;StorageName&quot;:&quot;&quot; + dr\\[&quot;StorageName&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;MaxCap&quot;:&quot;&quot; + dr\\[&quot;MaxCap&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;WHID&quot;:&quot;&quot; + dr\\[&quot;WHID&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;WarehouseName&quot;:&quot;&quot; + dr\\[&quot;WarehouseName&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;Channel&quot;:&quot;&quot; + dr\\[&quot;Channal&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;ChannelK3Code&quot;:&quot;&quot; + dr\\[&quot;ChannalK3Code&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;Type&quot;:&quot;&quot; + dr\\[&quot;Type&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;TypeK3Code&quot;:&quot;&quot; + dr\\[&quot;TypeK3Code&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;Category&quot;:&quot;&quot; + dr\\[&quot;Category&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;CategoryK3Code&quot;:&quot;&quot; + dr\\[&quot;CategoryK3Code&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;CustomerID&quot;:&quot;&quot; + dr\\[&quot;CustomerID&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;,&quot;Disableds&quot;:&quot;&quot; + dr\\[&quot;Disableds&quot;\\].ToString() + &quot;&quot;&quot;); json.Append(&quot;},&quot;); } json.Remove(json.Length - 1, 1); // 去掉 trail 逗号（,） json.Append(&quot;\\],&quot;total&quot;:&quot; + count); json.Append(&quot;,&quot;pageSize&quot;:&quot; + pageSize); json.Append(&quot;,&quot;pageNumber&quot;:&quot; + pageNumber); } //json.Remove(json.Length - 1, 1); // 去掉 trail 逗号（,） json.Append(&quot;}&quot;); return json.ToString(); }","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"easyui","slug":"easyui","permalink":"https://hero.triple.net.cn/tags/easyui/"},{"name":"分页","slug":"分页","permalink":"https://hero.triple.net.cn/tags/分页/"}]},{"title":"Windows GVim启动最大化","slug":"max-gvim-on-start-up-windows","date":"2015-05-17T05:45:57.000Z","updated":"2018-12-12T10:19:55.491Z","comments":true,"path":"2015/05/17/max-gvim-on-start-up-windows/","link":"","permalink":"https://hero.triple.net.cn/2015/05/17/max-gvim-on-start-up-windows/","excerpt":"","text":"编辑 _vimrc，添加一行：1autocmd GUIEnter * simalt ~x !此法不支持GNOME下的GVim","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://hero.triple.net.cn/tags/vim/"}]},{"title":"vpn868错误","slug":"vpn868-e9-94-99-e8-af-af","date":"2015-05-14T01:57:38.000Z","updated":"2018-12-12T09:24:02.349Z","comments":true,"path":"2015/05/14/vpn868-e9-94-99-e8-af-af/","link":"","permalink":"https://hero.triple.net.cn/2015/05/14/vpn868-e9-94-99-e8-af-af/","excerpt":"","text":"vpn868错误解决方法： 一句话：DNS导致的，不要使用自动获取的，可以用8.8.8.8,8.8.4.4等 vpn868错误：未进行远程连接，因为远程访问服务器的名称问题没有解决。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"vpn","slug":"vpn","permalink":"https://hero.triple.net.cn/tags/vpn/"},{"name":"vpn868错误","slug":"vpn868错误","permalink":"https://hero.triple.net.cn/tags/vpn868错误/"}]},{"title":"easyui：清除datagrid中的数据","slug":"easyui-ef-bc-9a-e6-b8-85-e9-99-a4datagrid-e4-b8-ad-e7-9a-84-e6-95-b0-e6-8d-ae","date":"2015-05-11T08:33:40.000Z","updated":"2018-12-12T09:19:14.510Z","comments":true,"path":"2015/05/11/easyui-ef-bc-9a-e6-b8-85-e9-99-a4datagrid-e4-b8-ad-e7-9a-84-e6-95-b0-e6-8d-ae/","link":"","permalink":"https://hero.triple.net.cn/2015/05/11/easyui-ef-bc-9a-e6-b8-85-e9-99-a4datagrid-e4-b8-ad-e7-9a-84-e6-95-b0-e6-8d-ae/","excerpt":"","text":"$(‘#grid’).datagrid(‘loadData’,{total:0,rows:[]});","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"},{"name":"技术分类","slug":"大前端！/技术分类","permalink":"https://hero.triple.net.cn/categories/大前端！/技术分类/"}],"tags":[{"name":"easyui","slug":"easyui","permalink":"https://hero.triple.net.cn/tags/easyui/"},{"name":"jquery","slug":"jquery","permalink":"https://hero.triple.net.cn/tags/jquery/"},{"name":"datagrid","slug":"datagrid","permalink":"https://hero.triple.net.cn/tags/datagrid/"}]},{"title":"关于Easyui中tree 的那点破事","slug":"e5-85-b3-e4-ba-8eeasyui-e4-b8-adtree-e7-9a-84-e9-82-a3-e7-82-b9-e7-a0-b4-e4-ba-8b","date":"2015-05-07T08:20:51.000Z","updated":"2018-12-12T09:08:58.722Z","comments":true,"path":"2015/05/07/e5-85-b3-e4-ba-8eeasyui-e4-b8-adtree-e7-9a-84-e9-82-a3-e7-82-b9-e7-a0-b4-e4-ba-8b/","link":"","permalink":"https://hero.triple.net.cn/2015/05/07/e5-85-b3-e4-ba-8eeasyui-e4-b8-adtree-e7-9a-84-e9-82-a3-e7-82-b9-e7-a0-b4-e4-ba-8b/","excerpt":"","text":"先看官网的提供的说明： id: 节点的ID text: 节点显示的文字 state: 节点状态，有两个值 ‘open’ or ‘closed’, 默认为’open’. 当为‘closed’时说明此节点下有子节点否则此节点为叶子节点 checked: Indicate whether the node is checked selected. attributes: 节点中其他属性的集合 children: 子节点集合 接收的JSON格式如下： [{ &quot;id&quot;`:1,` &quot;text&quot;`:&quot;Folder1&quot;,` &quot;iconCls&quot;`:&quot;icon-save&quot;,` &quot;children&quot;`:[{` &quot;text&quot;`:&quot;File1&quot;,` &quot;checked&quot;`:true` },{ &quot;text&quot;`:&quot;Books&quot;,` &quot;state&quot;`:&quot;open&quot;,` &quot;attributes&quot;`:{` &quot;url&quot;`:&quot;/demo/book/abc&quot;,` &quot;price&quot;`:100` }, &quot;children&quot;`:[{` &quot;text&quot;`:&quot;PhotoShop&quot;,` &quot;checked&quot;`:true` },{ &quot;id&quot;`: 8,` &quot;text&quot;`:&quot;Sub Bookds&quot;,` &quot;state&quot;`:“closed”` }] }] },{ &quot;text&quot;`:&quot;Languages&quot;,` &quot;state&quot;`:&quot;closed&quot;,` &quot;children&quot;`:[{` &quot;text&quot;`:“Java”` },{ &quot;text&quot;`:“C#”` }] }] 我们在应用时，程序只要返这样的格式给tree 就可以了 如果tree 节点不多，建议一次取出所有数据。如果想异步加载数据。可以使用如下代码： html: &lt;`ulid=”tree”&gt;&lt;/ul&gt;` JS: $(`function(){` $(`‘#tree’).tree({` url:`‘treedata.ashx’,` onClick:`function(node){` alert(node.text); } }) }) 代码很简单吧，其实复杂的都在处理JSON数据中，后端要生tree指定格式的字符串，这棵树才会正常运转. 大多数据在设计的时候不会专门为此树设计相应的字段。 比如：text 在我们的数据库中可能是title 那我们就需要在生成字符串后替换下，将title 替换为 text 。 很多同学认为在点击节点时需要把此节点的ID传给后端程序，这一点很多同学在初次接触时会有误解，在点击节点时会自动检查是否有子节点，如有会自动调用url并将父ID传过去地。","categories":[{"name":"大前端！","slug":"大前端！","permalink":"https://hero.triple.net.cn/categories/大前端！/"},{"name":"技术分类","slug":"大前端！/技术分类","permalink":"https://hero.triple.net.cn/categories/大前端！/技术分类/"}],"tags":[{"name":"easyui","slug":"easyui","permalink":"https://hero.triple.net.cn/tags/easyui/"}]},{"title":"VMware虚拟机提速12招","slug":"vmware-e8-99-9a-e6-8b-9f-e6-9c-ba-e6-8f-90-e9-80-9f12-e6-8b-9b","date":"2015-05-06T01:36:37.000Z","updated":"2018-12-12T09:24:02.332Z","comments":true,"path":"2015/05/06/vmware-e8-99-9a-e6-8b-9f-e6-9c-ba-e6-8f-90-e9-80-9f12-e6-8b-9b/","link":"","permalink":"https://hero.triple.net.cn/2015/05/06/vmware-e8-99-9a-e6-8b-9f-e6-9c-ba-e6-8f-90-e9-80-9f12-e6-8b-9b/","excerpt":"","text":"转:http://virtualman.blog.51cto.com/200540/39414 VMware自从1998年试水服务器虚拟化以来，已经成为虚拟化市场不争的领头羊。大量企业的广泛应用使得VMware的产品成为高稳定、高可靠、高性能的代名词。而VMware的旗舰产品VMware VI3(Virtual Infrastructure 3)则成为企业级数据中心首选的虚拟化平台。 而企业级数据中心对性能相当敏感，如何获得最优性能成为企业级数据中心追求的目标之一。因此，本文针对VMware ESX Server上的虚拟机性能优化来进行探讨，希望对企业级数据中心起到抛砖引玉的作用。 首先，需要从物理和虚拟两个层次研究ESX Server的配置，ESX Server的配置将影响所有虚拟机的性能，因此是性能调优的首要考虑因素；性能优化的第二方面是虚拟机的配置，包括硬件配置、选项设置等；第三方面当然是虚拟机内客户操作系统的配置，该部分的性能优化实际和虚拟架构本身没有直接关系，但是却和用户的应用性能关系密切，用户反应的性能问题很多时候也可从该层次获得圆满解决。 下面分别讨论优化VMware ESX Server客户操作系统性能的12招妙计，其中招数1－4属于ESX Server服务器配置优化，招数5－9属于虚拟机相关配置调优，招数10－12属于操作系统相关的调优建议。 第一招:**升级到最新版本**当然这招适用的前提是您原来运行的是VMware ESX Server 2.x的版本。如果您是VMware的新用户，你可以直接跳过这招。 VI3是VMware最新的企业级虚拟化产品，较老版本相比有显著的性能提升，VMware优化了ESX Server的好多组件，例如：VI3里的虚拟机开始使用PAE内存，可以访问到16GB的内存，而原来的版本最多可用到的内存只有3.6GB；VI3中的虚拟网络性能也大大改善；VMFS3是VMFS家族的新成员，不仅仅是简单的升级版本，而是改善了性能和扩展能力；虚拟机对服务控制台的依赖降低；ESX 3.0主机可以支持Broadcom的网卡数多达20个，而最多支持的Intel e1000网卡更是多达32个。 关于具体的硬件最大支持能力，请参考VMware的支持列表，可以从下载。 第二招：升级服务器的CPU**和内存**这招是新购硬件时要重点考虑的。原来在购买服务器时，大多依赖于应用部门提出的要求。部署了虚拟化之后，建议用户尽可能买高端服务器，可以很方便的提升整个资源的利用率，可以提供资源的调度灵活性等。当然，所谓的高端服务器，主要是指CPU和内存的配置要高端。 在进行CPU选择时，要考虑CPU的效率，CPU运作高效是虚拟架构高效的重要前提，有时候，发热过高会导致CPU性能急剧下降。如果可能，尽量配置多核、多颗CPU。 当然，内存的性能也很重要。VMware建议ESX Server至少配置8GB内存，当然多多益善，每台ESX Server最多可以支持64GB内存。在虚拟机配置时，尽可能避免内存过载，虽然VMware可以处理过载，但是内存过载会导致在内存和硬盘之间进行交换，这会严重影响系统性能。 第三招: 提升服务器的存储提升存储性能显然可以改善很多系统的性能，如果可能的话，建议使用外部存储，这可以避免内置存储性能导致的瓶颈。 你可以安装多个磁盘控制器或尽可能多的磁盘来提高系统的性能，当然，在规划虚拟机时，也要考虑虚拟文件存放的分布问题，特别时面对高I/O的虚拟机。当然，具体的I/O配置需要根据应用进行，实际上VMware和我们的合作伙伴提供了很多I/O配置的最佳实践，你可以到VMware的网站下载相关的文档进行参考。 第四招: 优化服务器的网络在虚拟环境中，尽量配置千兆以太网卡来确保性能，千兆以太网络是VMware ESX Server虚拟架构的推荐配置。当配置物理网卡时，速率和工作模式要和交换机端口的配置一致。如果只有100Mbps的快速以太网络，建议将网卡和交换机端口的速率/模式设成100/全双工。当配置千兆以太网络时，建议将交换机端口和网卡模式配置为自适应。 配置多块网卡时要使用teaming功能，将多块网卡封装称一块虚拟网卡，增加带宽的同时，提高了可靠性，当然也可以简化管理。如果配置了千兆网卡，建议使用vmxnet或e1000虚拟网卡，尽可能不用vlance网卡。 第五招: 在服务器上适当分布虚拟机在VMware ESX 2.x版 本中，你可以根据自己对虚拟机负载的判定，手动将不同负载的虚拟机进行组合，分布到不同服务器，确保负载的均衡，这是一个手工的过程，并且往往很难做到准 确判定。并且，由于虚拟机创建方便，可能经常会有些虚拟机创建好了而没有使用，又忘记删除不用的虚拟机。而如果不用的虚拟机也启用了，仍然占用资源。因 此，要将不需要运行的虚拟机及时关闭，从而节省资源。 升级到VI3后，虚拟机的分布可以完全自动化，DRS可以帮助管理员完成虚拟机负载的分布，确保每台服务器都有合理的负载运行，这可以大大降低管理员的工作负载，并且由于自动化实现，负载分布会很均匀。在配置了DRS的VI3环境中，配置虚拟机时再也不需要指定具体的ESX Server，而是指定一个资源池，DRS会自动移动虚拟机到合适的ESX Server上去。当虚拟机添加、关闭或删除时，DRS会自动管理所有ESX Server的负载。 如果一台虚拟机没有足够的资源运行，DRS会自动均衡资源池里的虚拟机资源来确保所有虚拟机的运行。如果资源池资源已经用光，可以简单增加ESX Server到该资源池，这个过程不需要停机。 VI3’s DRS功能是基于VMotion实现的，VMotion可以不需停机、在线迁移一台虚拟机从一台物理服务器到另外一台物理服务器，这实际也改善了虚拟架构的性能，让不同的物理服务器资源获得最大限度利用，而不是负载不均衡的配置。 第六招: 谨慎使用远程访问控制台有时候关闭不用的VMware远程控制台就会使虚拟机的性能大大改善，尽管你可能认为该操作对性能的影响很小。实际上，每个远程控制台(VMRC)进程都会直接消耗ESX Server服务控制台中宝贵的CPU资源。建议尽可能不要通过VMRC连接虚拟机，VMRC是标准的远程访问技术，没有进行任何优化。除非需要进行某些特定的配置，必须使用VMRC，否则建议关闭VMRC。 为了优化性能，你可以使用第三方的远程控制软件，如：Citrix ICA客户端、Microsoft Terminal Service或RDP、Telnet、SSH等来连接远程的ESX Server的服务控制台。当然，有些远程访问方式并不是等同的，VNC可能消耗的资源就比上面提到的几种访问方式大，但仍然比VMRC消耗的资源少。 第七招: 虚拟机CPU**和内存配置**优化物理服务器上增加CPU数量和多余内存无疑会提高操作系统和应用的性能，在虚拟的环境中也一样。但是，多CPU和内存共享会增加ESX Server的负载，这种情况要尽量避免。 如果看到虚拟机运行很慢，要检查CPU的利用率，看看每颗CPU的空闲时间是多少，同时也要通过VMware管理界面检查整个系统的CPU利用率。 使用VMware SMP增加虚拟机的CPU数量有时候不能解决虚拟机性能问题，因为有些应用不能利用到多CPU的优势。在启用SMP之前要分析一下操作系统和应用是否能利用SMP来改善性能。如果应用不是多线程或多进程的，启用虚拟SMP只会消耗物理CPU资源，而不能提高虚拟机本身的性能。 要节俭的使用Virtual SMP，大多数情况下虚拟机运行在单虚拟CPU时性能最好。当然，具体情况只能分别对待，需要的话，可以测试一下各个虚拟机的情况。 如果性能差不是CPU导致的，需要检查内存的使用情况。最重要的就是看客户操作系统是否在使用交换内存，如果如此，就要及时纠正。有很多手段来决定是否在使用交换内存，在Linux客户操作系统，你可以使用vmstat命令查看；在Windows平台上，你可以使用“管理工具”下面的“性能工具”来检查每秒的内存页面数。如果某虚拟机的内存页错误很高，如：1000页每秒，此时可以增加其最小内存来避免频繁页交换。如果最低内存大小已经快速逼近最大内存，需要增加资源设定。 您只需要为虚拟机配置需求的内存量就可以了，为虚拟机配置过多的内存并不能改善性能，而如此配置会浪费您宝贵的内存资源。 更改虚拟机最小和最大CPU资源分配值是优化性能的另外一种方法。为了避免CPU资源争抢，配置CPU的最小份额为某适当值，而不是设为零。相反地，为了避免低优先级的虚拟机消耗太多的CPU资源，可以设置该虚拟机的最大CPU份额，如50％，从而确保其他高优先级的虚拟机能够利用到尽可能多的CPU资源。 当然，还可以定义每个虚拟机使用哪个CPU，该配置称为“CPU亲和”（Processor Affinity）。默认情况下这个参数是关闭的，大多数情况下这是推荐配置。只有真的必须时，才需要打开这个选项。 如果有个虚拟机特别耗费资源，你可能才需要设定CPU亲和来隔离这个虚拟机，来确保该虚拟机的性能。当然，这种配置也可以保护该服务器上的其他虚拟机，但是配置了CPU亲和的虚拟机不能进行动态DRS，要特别注意该配置的使用。 第八招: 删除不需要的虚拟硬件在物理服务器增加或删除硬件都很耗时费力，物理服务器上不用的多余硬件一般都不会影响系统的性能，但是虚拟机的环境完全不同。 删除或关闭虚拟硬件时增加虚拟机性能的好办法，当然可能对性能的影响并不大，但是每个虚拟机很小的性能优化可能会大幅度改善整个服务器的性能。 如果某虚拟机不需要CD/DVD ROM驱动器、软驱、网卡或串口/并口，那么就毫不客气地删除或关闭。如果之后需要，随时可以轻松打开或添加，虚拟硬件的添加相当方便、快速。 第九招: 升级VMware Tools在ESX Server升级或安装补丁后，要及时更新安装在客户操作系统里的VMware Tools。有时，补丁包里保护对VMware Tools的更新，及时更新虚拟机里的VMware Tools是很重要的。 如果你从VMware的其他平台迁移过来的虚拟机，迁移后记得更新虚拟机里的VMware Tools，不同的VMware产品，VMware Tools的版本是不一样的。 在VMware Tools里，要确保ESX Server主机和虚拟机的时间同步，同时运行多个不同的时钟会引起很多不必要的麻烦。当然，如果使用了VMware Tools来进行时间同步，就不要使用其他的时间同步方式，如NTP客户端等。如果您必须使用其他的时间同步机制，那么必须关闭VMware Tools里的时间同步。这种情况出现在Windows活动目录的成员虚拟机上，它们必须同域控制器进行时间同步。 为了确保Windows虚拟机良好的显示性能，可以在Windows虚拟机种启用Windows Display Properties-&gt;“Settings”-&gt;“Advanced”-&gt;“Troubleshoot”-&gt;“Hardware acceleration”功能，这可以使VMRC的鼠标移动更为流畅。 具体配置见下图所示。 第十招: 优化Windows**客户操作系统**对虚拟机的虚拟磁盘进行碎片整理可以有益于I/O性能的改善，通过第三方基于服务器的磁盘碎片整理工具可以使磁盘的组织结构更为合理。当然，要合理运行磁盘碎片整理程序，确保在系统空闲时间进行，从而降低对生产业务的影响。 注意：如果虚拟机带回退日志运行，则这招就失灵了。 关闭有些无需的服务和后台进程，也可以虚拟机系统节约资源。当然，禁用某些服务时要小心，确保你要禁用的服务不影响你系统的运行。如果你不能确认一个服务是否是必须的，请咨询系统管理员获得确认，或者创建一个虚拟机的克隆，进行禁用服务影响的具体测试。 下面列出了一些可以在虚拟机里停用或禁用的通用Windows服务。当这些服务并非需要时，请停用他们。当然，这需要根据虚拟机的应用情况具体分析。 ü Alerter ü Clip Book ü Computer Browser ü DHCP Client (Unless using DHCP IP addresses) ü Fast User Switching Compatibility (Windows XP) ü IMAPI CD-Burning COM Service (Windows XP) ü Indexing Service (Unless needed) ü Internet Connection Firewall (ICF) / Internet Connection Sharing ü IPSEC Services ü Messenger ü Network DDE ü Network DDE DSDM ü Network Location Awareness (NLA) ü Print Spooler (May be needed in some cases) ü Remote Desktop Help Session Manager ü Remote Registry (May be needed) ü Routing and Remote Access (May be needed) ü Smart Card ü SSDP Discovery Service ü System Restore Service (Windows XP) ü Telnet (May be needed) ü Themes ü Uninterruptible Power Supply ü Windows Audio (Windows XP) ü Windows Image Acquisition (WIA) ü Windows Time (May be needed) ü Wireless Zero Configuration 可以删除从未使用的Windows组件，以减少操作系统内存的消耗，让应用获得更多的可用内存，同时增加虚拟机的安全。 许多虚拟机并不需要NTFS最后访问的时间标签，可以禁用这个功能，从而可以减少一些不明显的资源消耗，获得更多的CPU资源。不用将这个时间标签和最后修改时间标签混淆，最后访问时间标签时文件最后一次读写的记录，而最后修改时间标签记录了文件最后一次写的时间和日期，进行备份和归档时往往需要最后修改时间标签。 一般运行在VMware ESX Server上的虚拟机都是服务器，因此不需要象台式机一样那么抢眼的图形显示。为此，可以禁用Windows虚拟机里的图形效果增强，同时禁用窗口拖动时显示的功能。 图：禁用Windows的Visual Effect选项，获得最佳性能 图：禁用窗口拖动时的内容显示，获得最佳性能 大多数情况下，你不需要在Windows服务器桌面上使用秋叶，因此通常可以禁用Windows桌面墙纸。 如果你虚拟机安装的是Windows XP，你可能也想禁用系统恢复功能，这可以释放磁盘空间、CPU和 I/O资源。实际上Windows XP本身的恢复功能在虚拟机里没有任何作用，因为你可以通过VMware添加模式或快照功能达到更为强大的功能。 某些系统电源功能，比如休眠、硬件电源节约（停用硬盘、显示器等），在虚拟机里已经没有任何意义。一般都可以将这些功能禁用，当然也屏幕保护功能同样。 你可能希望通过屏幕保护来锁住远程终端屏幕，增加安全性。但实际上，第六条已经说明，不建议用户长期打开远程管理终端。如果你需要程序交互，只需要关闭远程终端，而不退出。如果你仍然担心安全问题，那你需要重新设计你ESX Server的安全设计。 第十一招: 优化Linux**操作系统**当使用Linux客户操作系统时，建议选择2.4或者2.6内核版本。Linux 2.6内核的默认系统时钟是每秒1000次，这对于虚拟机只会增加负担，唯一可以改变该参数的方式就是重新编译，建议改成内核时钟100次每秒。如果你不能重新编译内核，可以使用2.4的Linux内核，2.4版本的Linux内核时钟默认为每秒100次。 一般运行在ESX Server上的Linux是服务器，可能不需要X-Windows。如果可能，不要安装图形桌面，只使用命令行的控制台，从而可以让Linux虚拟机运行的更高效。 如果你实在需要图形桌面，可以使用简化的Windows管理器，如WindowMaker。KDE和Gnome两个都是资源消耗大户，因此，尽量避免使用他们。 当然，也要禁用或卸载Linux的未用进程、服务和后台任务，包括未用的程序包，这将释放CPU和内存资源，让应用运行更顺畅。 第十二招: 使用智能的防病毒和备份配置如果仅仅将虚拟机部署在开发测试环境，你可能不需要安装防病毒软件保护虚拟机(除非你在测试防病毒解决方案)。开发环境中的虚拟机一般都需要安装防病毒软件。 如何优化防病毒配置来保证虚拟机的性能呢？第一步就是配置病毒扫描周期，将病毒扫描安排在业务不繁忙时刻，确保病毒扫描和应用不形成资源竞争。一般情况下，每天进行一次完整病毒扫描就足够了。 服务器通常不需要实时病毒扫描，因为实时病毒扫描会影响服务器性能。如果可能，就禁用病毒实时扫描，特别是在生产的数据库、文件或Web服务器上，尽可能禁用实时病毒扫描功能。 另外，大多数病毒防护方案都可以去除某些类型的文件和目录能力。某些应用文件不需要病毒保护，如数据库数据文件，扫描这种类型文件可能严重影响系统性能。因此，可以在病毒扫描时去除这些文件。交换文件一般也可以跳过病毒扫描。 如果在虚拟机里安装了备份引擎，备份应该安排在系统空闲时间进行，同时也尽量和病毒扫描时间叉开。否则，会引起备份和病毒扫描之间的资源争用，导致系统性能严重下降。 建议尽量采用VMware Virtual Infrastructure 3引入的VCB(VMware Consolidated Backup)功能，通过将备份负载移到SAN上，VCB减少了备份带来的虚拟机性能下降。当将VCB和其他的备份软件结合，就可以轻松实现无需服务器的备份（Server-Free Backup），从而确保虚拟机可以使用生产服务器的所有资源来运行企业应用，实现应用性能最优化。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"VMware","slug":"VMware","permalink":"https://hero.triple.net.cn/tags/VMware/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://hero.triple.net.cn/tags/虚拟机/"},{"name":"优化","slug":"优化","permalink":"https://hero.triple.net.cn/tags/优化/"},{"name":"性能","slug":"性能","permalink":"https://hero.triple.net.cn/tags/性能/"}]},{"title":"symfony可用的nginx配置文件","slug":"nginx-configuration-using-nginx","date":"2015-04-02T01:56:56.000Z","updated":"2018-12-12T09:32:22.733Z","comments":true,"path":"2015/04/02/nginx-configuration-using-nginx/","link":"","permalink":"https://hero.triple.net.cn/2015/04/02/nginx-configuration-using-nginx/","excerpt":"","text":"说明： symfony项目可以和其它项目共用用，包括 wordpress 和 drupal 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133user www www;worker_processes auto;error\\_log /home/wwwlogs/nginx\\_error.log;pid /usr/local/nginx/logs/nginx.pid;#Specifies the value for maximum file descriptors that can be opened by this process.worker\\_rlimit\\_nofile 51200;events&#123; use epoll; worker_connections 51200; multi_accept on;&#125;http&#123; include mime.types; default_type application/octet-stream; server\\_names\\_hash\\_bucket\\_size 128; client\\_header\\_buffer_size 32k; large\\_client\\_header_buffers 4 32k; client\\_max\\_body_size 50m; sendfile on; tcp_nopush on; keepalive_timeout 60; tcp_nodelay on; fastcgi\\_connect\\_timeout 300; fastcgi\\_send\\_timeout 300; fastcgi\\_read\\_timeout 300; fastcgi\\_buffer\\_size 64k; fastcgi_buffers 4 64k; fastcgi\\_busy\\_buffers_size 128k; fastcgi\\_temp\\_file\\_write\\_size 256k; gzip on; gzip\\_min\\_length 1k; gzip_buffers 4 16k; gzip\\_http\\_version 1.0; gzip\\_comp\\_level 2; gzip_types text/plain application/x-javascript text/css application/xml; gzip_vary on; gzip_proxied expired no-cache no-store private auth; gzip_disable &quot;MSIE \\[1-6\\].&quot;; server_tokens off; #log format log\\_format access &apos;$remote\\_addr - $remote\\_user \\[$time\\_local\\] &quot;$request&quot; &apos; &apos;$status $body\\_bytes\\_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http\\_user\\_agent&quot; $http\\_x\\_forwarded_for&apos;; server &#123; listen 80 default; server_name mydomain; root /home/wwwroot/default/; index index.html index.htm index.php; rewrite ^/app.php/?(.*)$ /$1 permanent; location / &#123; root /home/wwwroot/default/; try_files $uri @rewriteapp; &#125; location @rewriteapp &#123; rewrite ^(.*)$ /app.php/$1 last; &#125; location @rewrite&#123;2 rewrite ^/(.*)$ /index.php?q=$1;2&#125; location /symfonyPrj/ &#123; alias /home/wwwroot/default/symfonyPrj/; index app.php app_dev.php index.html index.htm index.php; &#125; location ~ /symfonyPrj/(.+).php(/|$) &#123; fastcgi_pass unix:/tmp/php-cgi.sock; include fastcgi_params; fastcgi\\_split\\_path_info ^(.+.php)(/.*)$; fastcgi\\_param SCRIPT\\_FILENAME /home/wwwroot/default$fastcgi\\_script\\_name; &#125; location /wordpress/ &#123; fastcgi_pass unix:/tmp/php-cgi.sock; include fastcgi_params; fastcgi\\_split\\_path_info ^(.+.php)(/.*)$; fastcgi\\_param SCRIPT\\_FILENAME /home/wwwroot/default$fastcgi\\_script\\_name; fastcgi_index index.php; &#125;2location /drupal/ &#123;22include fastcgi_params;22fastcgi\\_param SCRIPT\\_FILENAME /home/wwwroot/default$fastcgi\\_script\\_name;22fastcgi\\_intercept\\_errors on;22fastcgi_pass unix:/tmp/php-cgi.sock;22fastcgi\\_split\\_path_info ^(.+.php)(/.*)$;22fastcgi_index index.php;2&#125; location ~ ^/(app|app_dev).php(/|$) &#123; fastcgi_pass unix:/tmp/php-cgi.sock; fastcgi\\_split\\_path_info ^(.+.php)(/.*)$; include fastcgi_params; fastcgi\\_param SCRIPT\\_FILENAME /home/wwwroot/default/symfonyPrj/web/$fastcgi\\_script\\_name; fastcgi_param HTTPS off; &#125; location /nginx_status &#123; stub_status on; access_log off; &#125; location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*.(js|css)?$ &#123; expires 12h; &#125; access_log /home/wwwlogs/access.log access; &#125;&#125; 每添加一个新项目非symfony的时候，只要复制一份新的locate /newProject/ 配置代码，然后把对应的项目名称改掉～ 如果是Symfony的话，还要将 1234567location ~ ^/(app|app_dev).php(/|$) &#123; fastcgi_pass unix:/tmp/php-cgi.sock; fastcgi\\_split\\_path_info ^(.+.php)(/.*)$; include fastcgi_params; fastcgi\\_param SCRIPT\\_FILENAME /home/wwwroot/default/symfonyPrj/web/$fastcgi\\_script\\_name; fastcgi_param HTTPS off;&#125; 也复制一份。","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"https://hero.triple.net.cn/tags/wordpress/"},{"name":"nginx","slug":"nginx","permalink":"https://hero.triple.net.cn/tags/nginx/"},{"name":"drupal","slug":"drupal","permalink":"https://hero.triple.net.cn/tags/drupal/"},{"name":"symfony","slug":"symfony","permalink":"https://hero.triple.net.cn/tags/symfony/"}]},{"title":"nginx常见错误小记","slug":"nginx-e5-b8-b8-e8-a7-81-e9-94-99-e8-af-af-e5-b0-8f-e8-ae-b0","date":"2015-04-02T01:55:16.000Z","updated":"2018-12-12T09:21:19.231Z","comments":true,"path":"2015/04/02/nginx-e5-b8-b8-e8-a7-81-e9-94-99-e8-af-af-e5-b0-8f-e8-ae-b0/","link":"","permalink":"https://hero.triple.net.cn/2015/04/02/nginx-e5-b8-b8-e8-a7-81-e9-94-99-e8-af-af-e5-b0-8f-e8-ae-b0/","excerpt":"","text":"nginx出现403错误解决方法错误信息：connect() failed (111: Connect refuesd) 方案1：检查nginx配置文件中的fast_cgi设置，确认fast_pass设置合理： 我将原来在FreeBSD上的文件copy到ubuntu上后出现这个错误， 把fast_pass 127.0.0.1:9000;改成fast_pass unix:/tmp/php_cgi.sock; 错误解决。 nginx出现no input files解决方法第一要做的就是检查错误日志中的路径。 我的错误情况是 nginx配置文件中在完整的项目路径后又加了个 $fast_script_name 造成的结果就类似这样： /var/www/html/project1/project1 解决方案是在location中去掉路径中的项目名（改成/var/www/html/） nginx访问php文件变成下载也就是不解析php了。 这个网上很多方法了，我说说我自己的情况， 原因一：由于原来做项目的时候起的目录名太长，所以在nginx中配置的时候，手贱把location后面的项目名称改了， 比如：原来项目名称叫 ThisIsABigBang 配置的时候 写的是 location /bigbang/ {… …} 问题就出在这里，改成和项目名一致就可以了。 原因二： 没有加fastcgi_pass unix:/tmp/php-cgi.sock; 打开页面显示空白，没任何没错提示（包括日志）没指定 include fastcgi_params;fastcgi_params SCRIPT_FILENAME /var/www/projects$fastcgi_script_name; 页面显示Access denied错误日志是： FastCGI sent in stderr: “Access to the script ‘/var/www/html’ has been denied (see security.limit_extensions)” while reading response header from upstream, client: xxx.xxx.xxx.xxx, server: localhost, request: “GET /index.php HTTP/1.1”, upstream: “fastcgi:xxxxxxxxxx”, host: “xxx.xxx.xxx.xxx” 原因： 加入下面两句话 fastcgi\\_split\\_path_info ^(.+.php)(/.*)$; fastcgi_index index.php; 参考stackoverflow: http://stackoverflow.com/questions/23390531/access-denied-403-for-php-files-with-nginx-php-fpm 更详细的设置参见另一篇文章：symfony可用的nginx配置文件","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"},{"name":"操作系统","slug":"技术分类/操作系统","permalink":"https://hero.triple.net.cn/categories/技术分类/操作系统/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://hero.triple.net.cn/tags/nginx/"}]},{"title":"《上古卷轴5：天际》自己当护卫","slug":"e3-80-8a-e4-b8-8a-e5-8f-a4-e5-8d-b7-e8-bd-b45-ef-bc-9a-e5-a4-a9-e9-99-85-e3-80-8b-e8-87-aa-e5-b7-b1-e5-bd-93-e6-8a-a4-e5-8d-ab","date":"2015-03-31T14:36:32.000Z","updated":"2018-12-12T08:59:53.197Z","comments":true,"path":"2015/03/31/e3-80-8a-e4-b8-8a-e5-8f-a4-e5-8d-b7-e8-bd-b45-ef-bc-9a-e5-a4-a9-e9-99-85-e3-80-8b-e8-87-aa-e5-b7-b1-e5-bd-93-e6-8a-a4-e5-8d-ab/","link":"","permalink":"https://hero.triple.net.cn/2015/03/31/e3-80-8a-e4-b8-8a-e5-8f-a4-e5-8d-b7-e8-bd-b45-ef-bc-9a-e5-a4-a9-e9-99-85-e3-80-8b-e8-87-aa-e5-b7-b1-e5-bd-93-e6-8a-a4-e5-8d-ab/","excerpt":"","text":"小弟之前一直在找有什么指令 可以复制一个自己 虽然是找到了 但是..潜在问题还是很多 比如说 结婚、死亡、穿装备等 目前小弟只解决了穿装备的问题 其余两个可能要等考完试才有时间去测 先来分享可行的部份 首先按 ～ 开启控制台 游标点自己 然后输入 player.placeatme 7 就会冒出一个 穿基本装备的自己 (牛角面包装) 而那身基本装备…一整个丑到炸掉= =” 这时请先忍住 不要拔刀对它砍下去… (砍下去会有很大的麻烦-_ -|||) 请对着它 开启控制台 输入setrelationshiprank player 1 之后 再输入addfac 5c84d 1 拥有同伴选项 (!):在进行这动作时,建议请先把你原本的护卫请回家,当然也是可以增加第2个护卫,不过这不在我分享的心得范围内。 后面它变成自己同伴后 就可以对它为所欲为啦给它装备。 ｗ。 给完装备后 (一定要先给它装备!武器也是!!) 大家一定会问为什么它没有自动穿上 那是因为…它很笨 必须由我们自己来用控制台 把它原本的牛角面包装消除 (扒衣服) 它才会心甘情愿的穿上我们给的装备 照样对着它开启控制台 点它 输入 showinventory 查询牛角面包套装的套装代码 查完后 请输入removeitem (牛角面包装代码) 1 消除牛角面包~ 也许有人会想先把它扒光后再来给装备 很抱歉..这是行不通的 因为它被脱到只剩一件的时候,你再趴它的话 它会穿回原本的牛角面包全套… so~请按照步骤来 都用完后~恭喜!! 一个上古复制人诞生啦~ But!! 这还没结束 因为…它是个胆小鬼 不过关于这问题我也找到了解决的办法!!@w@ 请对着它 开启控制台 然后输入setav confidence # 一共有5个级别 1胆小←→3中间值←→5莽夫 之后就可以推它出去送死了（误！） 还有一个步骤 就是它的技能基本值 一样对着它开启控制台 输入 getav 技能名称 例如getav onehanded 就可以看到单手武器能力数值 查询完你要查的技能数值后 要调整的话 请输入modav 技能名称 数字 例如它当前双手武器的能力数值是25 输入modav twohanded 50 数值升为75 需要减少的话输入负数 以下是各个技能名称 单手武器：modav onehanded ## 双手武器：modav twohanded ## 箭术：modav marksman ## 格挡：modav block ## 重甲：modav heavyarmor ## 轻甲：modav lightarmor ## 潜行：modav sneak ## 变化魔法：modav alteration ## 召唤魔法：modav conjuration ## 迷幻魔法：modav illusion ## 回复魔法：modav restoration ## 毁灭魔法：modav destruction ## 开锁：modav lockpicking ## 偷窃：modav pickpocket ## 基本数值 血量：modav health ## 魔法：modav magicka ## 体力：modav stamina ## 血量恢复：forceav healrate ## 魔法恢复：forceav magickarate ## 体力恢复：forceav staminarate ## 最后是负重和移动速度 这两个有些不一样 数值不是增减 而是直接指定的 输入500 他的负重即变成500 移动速度初默认100 设置完后得改变一下攻击姿态才可以看到效果 负重：forceav carryweight ## 移动速度：modav speedmult ## (谜:喵的！你骗人！！这哪叫一个步骤ˋ皿ˊ凸) （我爽～咬我啊～） 都用好后就可以带着它 全地图到处跑喽~ (结婚方面还是不建议,小心别让它挫起来!!) 为保护当事人 故贴上海苔XDD~","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"上古卷轴5","slug":"上古卷轴5","permalink":"https://hero.triple.net.cn/tags/上古卷轴5/"}]},{"title":"今日是数据备份日","slug":"e4-bb-8a-e6-97-a5-e6-98-af-e6-95-b0-e6-8d-ae-e5-a4-87-e4-bb-bd-e6-97-a5","date":"2015-03-31T03:10:02.000Z","updated":"2018-12-12T09:05:36.260Z","comments":true,"path":"2015/03/31/e4-bb-8a-e6-97-a5-e6-98-af-e6-95-b0-e6-8d-ae-e5-a4-87-e4-bb-bd-e6-97-a5/","link":"","permalink":"https://hero.triple.net.cn/2015/03/31/e4-bb-8a-e6-97-a5-e6-98-af-e6-95-b0-e6-8d-ae-e5-a4-87-e4-bb-bd-e6-97-a5/","excerpt":"","text":"今日是数据备份日，别忘了在愚人节前备份数据 照片，视频，联系人 还有自己的代码，数据库，服务器快照，一切让你觉得重要的，都备份一下吧，手动备份，毕竟程序也有可能存在未知的问题。数据可贵！","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"数据备份","slug":"数据备份","permalink":"https://hero.triple.net.cn/tags/数据备份/"}]},{"title":"mysqldump 命令介绍","slug":"mysqldump-e5-91-bd-e4-bb-a4-e4-bb-8b-e7-bb-8d","date":"2015-03-24T03:57:40.000Z","updated":"2018-12-12T09:20:50.341Z","comments":true,"path":"2015/03/24/mysqldump-e5-91-bd-e4-bb-a4-e4-bb-8b-e7-bb-8d/","link":"","permalink":"https://hero.triple.net.cn/2015/03/24/mysqldump-e5-91-bd-e4-bb-a4-e4-bb-8b-e7-bb-8d/","excerpt":"","text":"对于不懂得服务器运维的人来说，备份数据库算是最简单也是最重要的工作之一了 我经常用的方式就是用mysqldump保存要备份的数据库到指定的sql文件中： mysqldump -p database1 &gt; db1_2015_01_01.sql 非常简单，默认使用的参数（部分）介绍如下： -h, –host= -h命令可以指定主机ip，默认是localhost -l, –lock-tables -l命令表示在开始导出数据时锁定所有表 -u username123 -u用来指定导出操作时用到的用户名，默认是当前系统用户名，-p用来指定密码 –add-drop-database 每个数据库创建之前添加drop数据库语句。 –add-drop-table 每个数据表创建之前添加drop数据表语句。 但是随着数据的增多，导出的文件越来越大，正想着用其他方式来备份，这是后话，回头再单独写篇介绍吧。 一边学习一边胡掰掰。 如果要仅仅导出数据库的表结构，可以使用 -d, –no-data -d目的是不写入表的任何行信息。如果你只想得到一个表的结构的导出，这是很有用的！ 如果想要导出单张表，可以参考下面的命令： mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"},{"name":"mysqldump","slug":"mysqldump","permalink":"https://hero.triple.net.cn/tags/mysqldump/"}]},{"title":"Beauty is not in the face Beauty is a light in the Heart !!﻿","slug":"beauty-is-not-in-the-face-beauty-is-a-light-in-the-heart-ef-bb-bf","date":"2015-03-18T03:40:21.000Z","updated":"2018-12-12T08:58:16.428Z","comments":true,"path":"2015/03/18/beauty-is-not-in-the-face-beauty-is-a-light-in-the-heart-ef-bb-bf/","link":"","permalink":"https://hero.triple.net.cn/2015/03/18/beauty-is-not-in-the-face-beauty-is-a-light-in-the-heart-ef-bb-bf/","excerpt":"","text":"Beauty is not in the face Beauty is a light in the Heart !!","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[]},{"title":"Python 中的字符串","slug":"python-e4-b8-ad-e7-9a-84-e5-ad-97-e7-ac-a6-e4-b8-b2","date":"2015-03-17T07:32:35.000Z","updated":"2018-12-12T09:27:29.781Z","comments":true,"path":"2015/03/17/python-e4-b8-ad-e7-9a-84-e5-ad-97-e7-ac-a6-e4-b8-b2/","link":"","permalink":"https://hero.triple.net.cn/2015/03/17/python-e4-b8-ad-e7-9a-84-e5-ad-97-e7-ac-a6-e4-b8-b2/","excerpt":"","text":"使用三引号（””” 或 ‘’’） 使用三引号可以指定一个多行字符串，同时也可以在三引号中自由的单引号和双引号。例如： This is a multi-line,this is second line,‘Hello third line’,“thinks, I’m forth line.” 自然字符串 如果你需要指示一些不需要特殊处理的字符串（如转义字符n），那么你需要指定一个自然字符串。自然字符串通过给字符加上前缀 R 或者 r 来指定，例如： R”New link are indicated by n.” Unicode字符串 如果使用非英文书写文本，只需要在字符串前面加上前缀 u 或者 U。例如： U”This is a Unicode String.” 字符串是不可变的 这意味着，你一旦创建了一个字符串，你就不能再改变他了。 按字面意义级联字符串 如果你把两个字符串按字面意义相邻放着，他们会被Python自动级联。例如： ‘What’s’’your name?’ 会被自动转为： ‘What’s your name?’ 在Python中单引号（’）和双引号（”）是相同的 他们没有任何不同。 ===建议=== 一定要自然字符串处理正则表达式 否则会需要使用很多很多反斜线，例如向后引用字符串可以写成 ‘1’ 或者 r’1’","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"python","slug":"python","permalink":"https://hero.triple.net.cn/tags/python/"}]},{"title":"Python-字符串","slug":"python-e5-ad-97-e7-ac-a6-e4-b8-b2","date":"2014-12-02T06:45:44.000Z","updated":"2018-12-12T09:27:29.808Z","comments":false,"path":"2014/12/02/python-e5-ad-97-e7-ac-a6-e4-b8-b2/","link":"","permalink":"https://hero.triple.net.cn/2014/12/02/python-e5-ad-97-e7-ac-a6-e4-b8-b2/","excerpt":"","text":"使用三引号（””” 或 ‘’’） 使用三引号可以指定一个多行字符串，同时也可以在三引号中自由的单引号和双引号。例如： This is a multi-line,this is second line,‘Hello third line’,“thinks, I’m forth line.” 自然字符串 如果你需要指示一些不需要特殊处理的字符串（如转义字符n），那么你需要指定一个自然字符串。自然字符串通过给字符加上前缀 R 或者 r 来指定，例如： R”New link are indicated by n.” Unicode字符串 如果使用非英文书写文本，只需要在字符串前面加上前缀 u 或者 U。例如： U”This is a Unicode String.” 字符串是不可变的 这意味着，你一旦创建了一个字符串，你就不能再改变他了。 按字面意义级联字符串 如果你把两个字符串按字面意义相邻放着，他们会被Python自动级联。例如： ‘What’s’’your name?’ 会被自动转为： ‘What’s your name?’ 在Python中单引号（’）和双引号（”）是相同的 他们没有任何不同。 ===建议=== 一定要自然字符串处理正则表达式 否则会需要使用很多很多反斜线，例如向后引用字符串可以写成 ‘1’ 或者 r’1’","categories":[{"name":"技术分类","slug":"技术分类","permalink":"https://hero.triple.net.cn/categories/技术分类/"}],"tags":[{"name":"python","slug":"python","permalink":"https://hero.triple.net.cn/tags/python/"},{"name":"字符串","slug":"字符串","permalink":"https://hero.triple.net.cn/tags/字符串/"}]},{"title":"mysql 新建用户","slug":"mysql-e6-96-b0-e5-bb-ba-e7-94-a8-e6-88-b7","date":"2014-11-13T07:49:39.000Z","updated":"2018-12-12T09:20:50.374Z","comments":false,"path":"2014/11/13/mysql-e6-96-b0-e5-bb-ba-e7-94-a8-e6-88-b7/","link":"","permalink":"https://hero.triple.net.cn/2014/11/13/mysql-e6-96-b0-e5-bb-ba-e7-94-a8-e6-88-b7/","excerpt":"","text":"数据库 create database `db_name_ssss` default character set utf8mb4 collate utf8mb4_unicode_ci; –- 新增： CREATE USER xxxuser IDENTIFIED BY &apos;USERPWD_123end&apos;; 指定权限： grant all privileges on dbname.* to xxxuser@&apos;%&apos; 修改密码： grant all privileges on DB1.* to xxxuser@&apos;%&apos; identified by &apos;PW_xz22s9rd&apos;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://hero.triple.net.cn/tags/mysql/"},{"name":"数据库","slug":"数据库","permalink":"https://hero.triple.net.cn/tags/数据库/"},{"name":"修改密码","slug":"修改密码","permalink":"https://hero.triple.net.cn/tags/修改密码/"},{"name":"创建用户","slug":"创建用户","permalink":"https://hero.triple.net.cn/tags/创建用户/"}]}]}